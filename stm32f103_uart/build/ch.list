
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08002df1 	.word	0x08002df1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	0800023b 	.word	0x0800023b
 8000070:	0800023b 	.word	0x0800023b
 8000074:	0800023b 	.word	0x0800023b
 8000078:	0800023b 	.word	0x0800023b
 800007c:	0800023b 	.word	0x0800023b
 8000080:	0800023b 	.word	0x0800023b
 8000084:	0800023b 	.word	0x0800023b
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	08002f31 	.word	0x08002f31
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	080033f1 	.word	0x080033f1
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	08003251 	.word	0x08003251
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000184:	f003 fa34 	bl	80035f0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 fe92 	bl	8002eb0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f003 f9c6 	bl	8003560 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f003 fa04 	bl	80035e0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f002 f9a2 	bl	8002530 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f003 b9e8 	b.w	80035d0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	080038cc 	.word	0x080038cc
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20001048 	.word	0x20001048
                ldr     r1, =__bss_base__
 8000220:	20001048 	.word	0x20001048
                ldr     r2, =__bss_end__
 8000224:	200019e8 	.word	0x200019e8
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f002 fdd8 	bl	8002e10 <chThdExit>

08000260 <.zombies>:
.zombies:       b       .zombies
 8000260:	e7fe      	b.n	8000260 <.zombies>

08000262 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000262:	f002 fe05 	bl	8002e70 <chSchDoPreemption>

08000266 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <__port_exit_from_isr+0x2>
	...

0800026c <malloc>:
 800026c:	4b02      	ldr	r3, [pc, #8]	; (8000278 <malloc+0xc>)
 800026e:	4601      	mov	r1, r0
 8000270:	6818      	ldr	r0, [r3, #0]
 8000272:	f000 b80b 	b.w	800028c <_malloc_r>
 8000276:	bf00      	nop
 8000278:	20000c10 	.word	0x20000c10

0800027c <free>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <free+0xc>)
 800027e:	4601      	mov	r1, r0
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	f000 bb71 	b.w	8000968 <_free_r>
 8000286:	bf00      	nop
 8000288:	20000c10 	.word	0x20000c10

0800028c <_malloc_r>:
 800028c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000290:	f101 050b 	add.w	r5, r1, #11
 8000294:	2d16      	cmp	r5, #22
 8000296:	b083      	sub	sp, #12
 8000298:	4606      	mov	r6, r0
 800029a:	d823      	bhi.n	80002e4 <_malloc_r+0x58>
 800029c:	2910      	cmp	r1, #16
 800029e:	f200 80b6 	bhi.w	800040e <_malloc_r+0x182>
 80002a2:	f000 fb0d 	bl	80008c0 <__malloc_lock>
 80002a6:	2510      	movs	r5, #16
 80002a8:	2318      	movs	r3, #24
 80002aa:	2002      	movs	r0, #2
 80002ac:	4fd1      	ldr	r7, [pc, #836]	; (80005f4 <_malloc_r+0x368>)
 80002ae:	443b      	add	r3, r7
 80002b0:	685c      	ldr	r4, [r3, #4]
 80002b2:	f1a3 0208 	sub.w	r2, r3, #8
 80002b6:	4294      	cmp	r4, r2
 80002b8:	f000 80b6 	beq.w	8000428 <_malloc_r+0x19c>
 80002bc:	6863      	ldr	r3, [r4, #4]
 80002be:	68e1      	ldr	r1, [r4, #12]
 80002c0:	f023 0303 	bic.w	r3, r3, #3
 80002c4:	4423      	add	r3, r4
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	68a5      	ldr	r5, [r4, #8]
 80002ca:	f042 0201 	orr.w	r2, r2, #1
 80002ce:	60e9      	str	r1, [r5, #12]
 80002d0:	4630      	mov	r0, r6
 80002d2:	608d      	str	r5, [r1, #8]
 80002d4:	3408      	adds	r4, #8
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	f000 faf4 	bl	80008c4 <__malloc_unlock>
 80002dc:	4620      	mov	r0, r4
 80002de:	b003      	add	sp, #12
 80002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002e4:	f035 0507 	bics.w	r5, r5, #7
 80002e8:	f100 8091 	bmi.w	800040e <_malloc_r+0x182>
 80002ec:	42a9      	cmp	r1, r5
 80002ee:	f200 808e 	bhi.w	800040e <_malloc_r+0x182>
 80002f2:	f000 fae5 	bl	80008c0 <__malloc_lock>
 80002f6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80002fa:	f0c0 8190 	bcc.w	800061e <_malloc_r+0x392>
 80002fe:	0a6b      	lsrs	r3, r5, #9
 8000300:	f000 808c 	beq.w	800041c <_malloc_r+0x190>
 8000304:	2b04      	cmp	r3, #4
 8000306:	f200 8160 	bhi.w	80005ca <_malloc_r+0x33e>
 800030a:	09ab      	lsrs	r3, r5, #6
 800030c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000310:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8000314:	00c1      	lsls	r1, r0, #3
 8000316:	4fb7      	ldr	r7, [pc, #732]	; (80005f4 <_malloc_r+0x368>)
 8000318:	4439      	add	r1, r7
 800031a:	684c      	ldr	r4, [r1, #4]
 800031c:	3908      	subs	r1, #8
 800031e:	42a1      	cmp	r1, r4
 8000320:	d106      	bne.n	8000330 <_malloc_r+0xa4>
 8000322:	e00c      	b.n	800033e <_malloc_r+0xb2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f280 8129 	bge.w	800057c <_malloc_r+0x2f0>
 800032a:	68e4      	ldr	r4, [r4, #12]
 800032c:	42a1      	cmp	r1, r4
 800032e:	d006      	beq.n	800033e <_malloc_r+0xb2>
 8000330:	6863      	ldr	r3, [r4, #4]
 8000332:	f023 0303 	bic.w	r3, r3, #3
 8000336:	1b5a      	subs	r2, r3, r5
 8000338:	2a0f      	cmp	r2, #15
 800033a:	ddf3      	ble.n	8000324 <_malloc_r+0x98>
 800033c:	4660      	mov	r0, ip
 800033e:	693c      	ldr	r4, [r7, #16]
 8000340:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 80005f8 <_malloc_r+0x36c>
 8000344:	4564      	cmp	r4, ip
 8000346:	d07a      	beq.n	800043e <_malloc_r+0x1b2>
 8000348:	6863      	ldr	r3, [r4, #4]
 800034a:	f023 0303 	bic.w	r3, r3, #3
 800034e:	1b5a      	subs	r2, r3, r5
 8000350:	2a0f      	cmp	r2, #15
 8000352:	f300 8172 	bgt.w	800063a <_malloc_r+0x3ae>
 8000356:	2a00      	cmp	r2, #0
 8000358:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800035c:	f280 8163 	bge.w	8000626 <_malloc_r+0x39a>
 8000360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000364:	f080 810e 	bcs.w	8000584 <_malloc_r+0x2f8>
 8000368:	2201      	movs	r2, #1
 800036a:	08db      	lsrs	r3, r3, #3
 800036c:	1099      	asrs	r1, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	408a      	lsls	r2, r1
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8000378:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
 800037c:	430a      	orrs	r2, r1
 800037e:	f1a8 0108 	sub.w	r1, r8, #8
 8000382:	e9c4 e102 	strd	lr, r1, [r4, #8]
 8000386:	607a      	str	r2, [r7, #4]
 8000388:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
 800038c:	f8ce 400c 	str.w	r4, [lr, #12]
 8000390:	2401      	movs	r4, #1
 8000392:	1083      	asrs	r3, r0, #2
 8000394:	409c      	lsls	r4, r3
 8000396:	4294      	cmp	r4, r2
 8000398:	d857      	bhi.n	800044a <_malloc_r+0x1be>
 800039a:	4214      	tst	r4, r2
 800039c:	d106      	bne.n	80003ac <_malloc_r+0x120>
 800039e:	f020 0003 	bic.w	r0, r0, #3
 80003a2:	0064      	lsls	r4, r4, #1
 80003a4:	4214      	tst	r4, r2
 80003a6:	f100 0004 	add.w	r0, r0, #4
 80003aa:	d0fa      	beq.n	80003a2 <_malloc_r+0x116>
 80003ac:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80003b0:	46ce      	mov	lr, r9
 80003b2:	4680      	mov	r8, r0
 80003b4:	f8de 300c 	ldr.w	r3, [lr, #12]
 80003b8:	459e      	cmp	lr, r3
 80003ba:	d107      	bne.n	80003cc <_malloc_r+0x140>
 80003bc:	e111      	b.n	80005e2 <_malloc_r+0x356>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f280 811e 	bge.w	8000600 <_malloc_r+0x374>
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	459e      	cmp	lr, r3
 80003c8:	f000 810b 	beq.w	80005e2 <_malloc_r+0x356>
 80003cc:	6859      	ldr	r1, [r3, #4]
 80003ce:	f021 0103 	bic.w	r1, r1, #3
 80003d2:	1b4a      	subs	r2, r1, r5
 80003d4:	2a0f      	cmp	r2, #15
 80003d6:	ddf2      	ble.n	80003be <_malloc_r+0x132>
 80003d8:	f045 0801 	orr.w	r8, r5, #1
 80003dc:	4630      	mov	r0, r6
 80003de:	e9d3 e402 	ldrd	lr, r4, [r3, #8]
 80003e2:	441d      	add	r5, r3
 80003e4:	f042 0601 	orr.w	r6, r2, #1
 80003e8:	f8c3 8004 	str.w	r8, [r3, #4]
 80003ec:	f8ce 400c 	str.w	r4, [lr, #12]
 80003f0:	f8c4 e008 	str.w	lr, [r4, #8]
 80003f4:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80003f8:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 80003fc:	606e      	str	r6, [r5, #4]
 80003fe:	505a      	str	r2, [r3, r1]
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	f000 fa5f 	bl	80008c4 <__malloc_unlock>
 8000406:	9b00      	ldr	r3, [sp, #0]
 8000408:	f103 0408 	add.w	r4, r3, #8
 800040c:	e002      	b.n	8000414 <_malloc_r+0x188>
 800040e:	230c      	movs	r3, #12
 8000410:	2400      	movs	r4, #0
 8000412:	6033      	str	r3, [r6, #0]
 8000414:	4620      	mov	r0, r4
 8000416:	b003      	add	sp, #12
 8000418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800041c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000420:	2040      	movs	r0, #64	; 0x40
 8000422:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8000426:	e776      	b.n	8000316 <_malloc_r+0x8a>
 8000428:	68dc      	ldr	r4, [r3, #12]
 800042a:	42a3      	cmp	r3, r4
 800042c:	bf08      	it	eq
 800042e:	3002      	addeq	r0, #2
 8000430:	f47f af44 	bne.w	80002bc <_malloc_r+0x30>
 8000434:	693c      	ldr	r4, [r7, #16]
 8000436:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80005f8 <_malloc_r+0x36c>
 800043a:	4564      	cmp	r4, ip
 800043c:	d184      	bne.n	8000348 <_malloc_r+0xbc>
 800043e:	2401      	movs	r4, #1
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	1083      	asrs	r3, r0, #2
 8000444:	409c      	lsls	r4, r3
 8000446:	4294      	cmp	r4, r2
 8000448:	d9a7      	bls.n	800039a <_malloc_r+0x10e>
 800044a:	68bc      	ldr	r4, [r7, #8]
 800044c:	6863      	ldr	r3, [r4, #4]
 800044e:	f023 0803 	bic.w	r8, r3, #3
 8000452:	45a8      	cmp	r8, r5
 8000454:	d303      	bcc.n	800045e <_malloc_r+0x1d2>
 8000456:	eba8 0305 	sub.w	r3, r8, r5
 800045a:	2b0f      	cmp	r3, #15
 800045c:	dc7e      	bgt.n	800055c <_malloc_r+0x2d0>
 800045e:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80005fc <_malloc_r+0x370>
 8000462:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000466:	f8d9 3000 	ldr.w	r3, [r9]
 800046a:	3201      	adds	r2, #1
 800046c:	eb04 0a08 	add.w	sl, r4, r8
 8000470:	442b      	add	r3, r5
 8000472:	f000 812d 	beq.w	80006d0 <_malloc_r+0x444>
 8000476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800047a:	330f      	adds	r3, #15
 800047c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8000480:	f02b 0b0f 	bic.w	fp, fp, #15
 8000484:	4659      	mov	r1, fp
 8000486:	4630      	mov	r0, r6
 8000488:	f002 fc92 	bl	8002db0 <_sbrk_r>
 800048c:	1c41      	adds	r1, r0, #1
 800048e:	4602      	mov	r2, r0
 8000490:	f000 80ed 	beq.w	800066e <_malloc_r+0x3e2>
 8000494:	4582      	cmp	sl, r0
 8000496:	f200 80e8 	bhi.w	800066a <_malloc_r+0x3de>
 800049a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800049e:	4459      	add	r1, fp
 80004a0:	f8c9 1004 	str.w	r1, [r9, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	f000 8149 	beq.w	800073c <_malloc_r+0x4b0>
 80004aa:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 80004ae:	3101      	adds	r1, #1
 80004b0:	bf1b      	ittet	ne
 80004b2:	eba2 0a0a 	subne.w	sl, r2, sl
 80004b6:	4453      	addne	r3, sl
 80004b8:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 80004bc:	f8c9 3004 	strne.w	r3, [r9, #4]
 80004c0:	f012 0307 	ands.w	r3, r2, #7
 80004c4:	f000 8110 	beq.w	80006e8 <_malloc_r+0x45c>
 80004c8:	f1c3 0108 	rsb	r1, r3, #8
 80004cc:	440a      	add	r2, r1
 80004ce:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80004d2:	4493      	add	fp, r2
 80004d4:	3108      	adds	r1, #8
 80004d6:	eba1 010b 	sub.w	r1, r1, fp
 80004da:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80004de:	4651      	mov	r1, sl
 80004e0:	4630      	mov	r0, r6
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	9200      	str	r2, [sp, #0]
 80004e6:	f002 fc63 	bl	8002db0 <_sbrk_r>
 80004ea:	1c42      	adds	r2, r0, #1
 80004ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80004f0:	f000 8149 	beq.w	8000786 <_malloc_r+0x4fa>
 80004f4:	1a83      	subs	r3, r0, r2
 80004f6:	eb03 0b0a 	add.w	fp, r3, sl
 80004fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80004fe:	f04b 0301 	orr.w	r3, fp, #1
 8000502:	4451      	add	r1, sl
 8000504:	42bc      	cmp	r4, r7
 8000506:	60ba      	str	r2, [r7, #8]
 8000508:	f8c9 1004 	str.w	r1, [r9, #4]
 800050c:	6053      	str	r3, [r2, #4]
 800050e:	f000 8121 	beq.w	8000754 <_malloc_r+0x4c8>
 8000512:	f1b8 0f0f 	cmp.w	r8, #15
 8000516:	f240 811f 	bls.w	8000758 <_malloc_r+0x4cc>
 800051a:	f04f 0c05 	mov.w	ip, #5
 800051e:	6863      	ldr	r3, [r4, #4]
 8000520:	f1a8 000c 	sub.w	r0, r8, #12
 8000524:	f020 0007 	bic.w	r0, r0, #7
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	4303      	orrs	r3, r0
 800052e:	eb04 0e00 	add.w	lr, r4, r0
 8000532:	280f      	cmp	r0, #15
 8000534:	6063      	str	r3, [r4, #4]
 8000536:	e9ce cc01 	strd	ip, ip, [lr, #4]
 800053a:	f200 812b 	bhi.w	8000794 <_malloc_r+0x508>
 800053e:	4614      	mov	r4, r2
 8000540:	6853      	ldr	r3, [r2, #4]
 8000542:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8000546:	428a      	cmp	r2, r1
 8000548:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 800054c:	bf38      	it	cc
 800054e:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 8000552:	428a      	cmp	r2, r1
 8000554:	bf38      	it	cc
 8000556:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 800055a:	e08a      	b.n	8000672 <_malloc_r+0x3e6>
 800055c:	f045 0201 	orr.w	r2, r5, #1
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	4425      	add	r5, r4
 8000566:	6062      	str	r2, [r4, #4]
 8000568:	4630      	mov	r0, r6
 800056a:	60bd      	str	r5, [r7, #8]
 800056c:	3408      	adds	r4, #8
 800056e:	606b      	str	r3, [r5, #4]
 8000570:	f000 f9a8 	bl	80008c4 <__malloc_unlock>
 8000574:	4620      	mov	r0, r4
 8000576:	b003      	add	sp, #12
 8000578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800057c:	4423      	add	r3, r4
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	68e1      	ldr	r1, [r4, #12]
 8000582:	e6a1      	b.n	80002c8 <_malloc_r+0x3c>
 8000584:	0a5a      	lsrs	r2, r3, #9
 8000586:	2a04      	cmp	r2, #4
 8000588:	d969      	bls.n	800065e <_malloc_r+0x3d2>
 800058a:	2a14      	cmp	r2, #20
 800058c:	f200 80be 	bhi.w	800070c <_malloc_r+0x480>
 8000590:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8000594:	00c9      	lsls	r1, r1, #3
 8000596:	325b      	adds	r2, #91	; 0x5b
 8000598:	eb07 0e01 	add.w	lr, r7, r1
 800059c:	5879      	ldr	r1, [r7, r1]
 800059e:	f1ae 0e08 	sub.w	lr, lr, #8
 80005a2:	458e      	cmp	lr, r1
 80005a4:	f000 8097 	beq.w	80006d6 <_malloc_r+0x44a>
 80005a8:	684a      	ldr	r2, [r1, #4]
 80005aa:	f022 0203 	bic.w	r2, r2, #3
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d902      	bls.n	80005b8 <_malloc_r+0x32c>
 80005b2:	6889      	ldr	r1, [r1, #8]
 80005b4:	458e      	cmp	lr, r1
 80005b6:	d1f7      	bne.n	80005a8 <_malloc_r+0x31c>
 80005b8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 80005c2:	f8ce 4008 	str.w	r4, [lr, #8]
 80005c6:	60cc      	str	r4, [r1, #12]
 80005c8:	e6e2      	b.n	8000390 <_malloc_r+0x104>
 80005ca:	2b14      	cmp	r3, #20
 80005cc:	d95f      	bls.n	800068e <_malloc_r+0x402>
 80005ce:	2b54      	cmp	r3, #84	; 0x54
 80005d0:	f200 80a4 	bhi.w	800071c <_malloc_r+0x490>
 80005d4:	0b2b      	lsrs	r3, r5, #12
 80005d6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80005da:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80005de:	00c1      	lsls	r1, r0, #3
 80005e0:	e699      	b.n	8000316 <_malloc_r+0x8a>
 80005e2:	f108 0801 	add.w	r8, r8, #1
 80005e6:	f018 0f03 	tst.w	r8, #3
 80005ea:	f10e 0e08 	add.w	lr, lr, #8
 80005ee:	f47f aee1 	bne.w	80003b4 <_malloc_r+0x128>
 80005f2:	e057      	b.n	80006a4 <_malloc_r+0x418>
 80005f4:	20000800 	.word	0x20000800
 80005f8:	20000808 	.word	0x20000808
 80005fc:	20001048 	.word	0x20001048
 8000600:	461c      	mov	r4, r3
 8000602:	4419      	add	r1, r3
 8000604:	684a      	ldr	r2, [r1, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800060c:	f042 0201 	orr.w	r2, r2, #1
 8000610:	604a      	str	r2, [r1, #4]
 8000612:	4630      	mov	r0, r6
 8000614:	60eb      	str	r3, [r5, #12]
 8000616:	609d      	str	r5, [r3, #8]
 8000618:	f000 f954 	bl	80008c4 <__malloc_unlock>
 800061c:	e6fa      	b.n	8000414 <_malloc_r+0x188>
 800061e:	08e8      	lsrs	r0, r5, #3
 8000620:	f105 0308 	add.w	r3, r5, #8
 8000624:	e642      	b.n	80002ac <_malloc_r+0x20>
 8000626:	4423      	add	r3, r4
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	4630      	mov	r0, r6
 800062c:	f042 0201 	orr.w	r2, r2, #1
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	3408      	adds	r4, #8
 8000634:	f000 f946 	bl	80008c4 <__malloc_unlock>
 8000638:	e6ec      	b.n	8000414 <_malloc_r+0x188>
 800063a:	f045 0e01 	orr.w	lr, r5, #1
 800063e:	f042 0101 	orr.w	r1, r2, #1
 8000642:	4425      	add	r5, r4
 8000644:	f8c4 e004 	str.w	lr, [r4, #4]
 8000648:	4630      	mov	r0, r6
 800064a:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800064e:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8000652:	6069      	str	r1, [r5, #4]
 8000654:	50e2      	str	r2, [r4, r3]
 8000656:	f000 f935 	bl	80008c4 <__malloc_unlock>
 800065a:	3408      	adds	r4, #8
 800065c:	e6da      	b.n	8000414 <_malloc_r+0x188>
 800065e:	099a      	lsrs	r2, r3, #6
 8000660:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8000664:	00c9      	lsls	r1, r1, #3
 8000666:	3238      	adds	r2, #56	; 0x38
 8000668:	e796      	b.n	8000598 <_malloc_r+0x30c>
 800066a:	42bc      	cmp	r4, r7
 800066c:	d060      	beq.n	8000730 <_malloc_r+0x4a4>
 800066e:	68bc      	ldr	r4, [r7, #8]
 8000670:	6863      	ldr	r3, [r4, #4]
 8000672:	f023 0b03 	bic.w	fp, r3, #3
 8000676:	45ab      	cmp	fp, r5
 8000678:	ebab 0305 	sub.w	r3, fp, r5
 800067c:	d302      	bcc.n	8000684 <_malloc_r+0x3f8>
 800067e:	2b0f      	cmp	r3, #15
 8000680:	f73f af6c 	bgt.w	800055c <_malloc_r+0x2d0>
 8000684:	4630      	mov	r0, r6
 8000686:	f000 f91d 	bl	80008c4 <__malloc_unlock>
 800068a:	2400      	movs	r4, #0
 800068c:	e6c2      	b.n	8000414 <_malloc_r+0x188>
 800068e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8000692:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8000696:	00c1      	lsls	r1, r0, #3
 8000698:	e63d      	b.n	8000316 <_malloc_r+0x8a>
 800069a:	f859 3908 	ldr.w	r3, [r9], #-8
 800069e:	454b      	cmp	r3, r9
 80006a0:	f040 8096 	bne.w	80007d0 <_malloc_r+0x544>
 80006a4:	f010 0f03 	tst.w	r0, #3
 80006a8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80006ac:	d1f5      	bne.n	800069a <_malloc_r+0x40e>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	ea23 0304 	bic.w	r3, r3, r4
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	0064      	lsls	r4, r4, #1
 80006b8:	429c      	cmp	r4, r3
 80006ba:	f63f aec6 	bhi.w	800044a <_malloc_r+0x1be>
 80006be:	b91c      	cbnz	r4, 80006c8 <_malloc_r+0x43c>
 80006c0:	e6c3      	b.n	800044a <_malloc_r+0x1be>
 80006c2:	0064      	lsls	r4, r4, #1
 80006c4:	f108 0804 	add.w	r8, r8, #4
 80006c8:	421c      	tst	r4, r3
 80006ca:	d0fa      	beq.n	80006c2 <_malloc_r+0x436>
 80006cc:	4640      	mov	r0, r8
 80006ce:	e66d      	b.n	80003ac <_malloc_r+0x120>
 80006d0:	f103 0b10 	add.w	fp, r3, #16
 80006d4:	e6d6      	b.n	8000484 <_malloc_r+0x1f8>
 80006d6:	f04f 0801 	mov.w	r8, #1
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	1092      	asrs	r2, r2, #2
 80006de:	fa08 f202 	lsl.w	r2, r8, r2
 80006e2:	431a      	orrs	r2, r3
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	e76a      	b.n	80005be <_malloc_r+0x332>
 80006e8:	eb02 010b 	add.w	r1, r2, fp
 80006ec:	4249      	negs	r1, r1
 80006ee:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80006f2:	4651      	mov	r1, sl
 80006f4:	4630      	mov	r0, r6
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	f002 fb59 	bl	8002db0 <_sbrk_r>
 80006fe:	1c43      	adds	r3, r0, #1
 8000700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000704:	f47f aef6 	bne.w	80004f4 <_malloc_r+0x268>
 8000708:	469a      	mov	sl, r3
 800070a:	e6f6      	b.n	80004fa <_malloc_r+0x26e>
 800070c:	2a54      	cmp	r2, #84	; 0x54
 800070e:	d826      	bhi.n	800075e <_malloc_r+0x4d2>
 8000710:	0b1a      	lsrs	r2, r3, #12
 8000712:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8000716:	00c9      	lsls	r1, r1, #3
 8000718:	326e      	adds	r2, #110	; 0x6e
 800071a:	e73d      	b.n	8000598 <_malloc_r+0x30c>
 800071c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000720:	d826      	bhi.n	8000770 <_malloc_r+0x4e4>
 8000722:	0beb      	lsrs	r3, r5, #15
 8000724:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000728:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800072c:	00c1      	lsls	r1, r0, #3
 800072e:	e5f2      	b.n	8000316 <_malloc_r+0x8a>
 8000730:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000734:	445b      	add	r3, fp
 8000736:	f8c9 3004 	str.w	r3, [r9, #4]
 800073a:	e6b6      	b.n	80004aa <_malloc_r+0x21e>
 800073c:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8000740:	2800      	cmp	r0, #0
 8000742:	f47f aeb2 	bne.w	80004aa <_malloc_r+0x21e>
 8000746:	eb08 030b 	add.w	r3, r8, fp
 800074a:	68bc      	ldr	r4, [r7, #8]
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6063      	str	r3, [r4, #4]
 8000752:	e6f6      	b.n	8000542 <_malloc_r+0x2b6>
 8000754:	4614      	mov	r4, r2
 8000756:	e6f4      	b.n	8000542 <_malloc_r+0x2b6>
 8000758:	2301      	movs	r3, #1
 800075a:	6053      	str	r3, [r2, #4]
 800075c:	e792      	b.n	8000684 <_malloc_r+0x3f8>
 800075e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8000762:	d821      	bhi.n	80007a8 <_malloc_r+0x51c>
 8000764:	0bda      	lsrs	r2, r3, #15
 8000766:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800076a:	00c9      	lsls	r1, r1, #3
 800076c:	3277      	adds	r2, #119	; 0x77
 800076e:	e713      	b.n	8000598 <_malloc_r+0x30c>
 8000770:	f240 5254 	movw	r2, #1364	; 0x554
 8000774:	4293      	cmp	r3, r2
 8000776:	d821      	bhi.n	80007bc <_malloc_r+0x530>
 8000778:	0cab      	lsrs	r3, r5, #18
 800077a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800077e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8000782:	00c1      	lsls	r1, r0, #3
 8000784:	e5c7      	b.n	8000316 <_malloc_r+0x8a>
 8000786:	3b08      	subs	r3, #8
 8000788:	449b      	add	fp, r3
 800078a:	ebab 0b02 	sub.w	fp, fp, r2
 800078e:	f04f 0a00 	mov.w	sl, #0
 8000792:	e6b2      	b.n	80004fa <_malloc_r+0x26e>
 8000794:	f104 0108 	add.w	r1, r4, #8
 8000798:	4630      	mov	r0, r6
 800079a:	f000 f8e5 	bl	8000968 <_free_r>
 800079e:	68bc      	ldr	r4, [r7, #8]
 80007a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80007a4:	6863      	ldr	r3, [r4, #4]
 80007a6:	e6cc      	b.n	8000542 <_malloc_r+0x2b6>
 80007a8:	f240 5154 	movw	r1, #1364	; 0x554
 80007ac:	428a      	cmp	r2, r1
 80007ae:	d80b      	bhi.n	80007c8 <_malloc_r+0x53c>
 80007b0:	0c9a      	lsrs	r2, r3, #18
 80007b2:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80007b6:	00c9      	lsls	r1, r1, #3
 80007b8:	327c      	adds	r2, #124	; 0x7c
 80007ba:	e6ed      	b.n	8000598 <_malloc_r+0x30c>
 80007bc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80007c0:	207f      	movs	r0, #127	; 0x7f
 80007c2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80007c6:	e5a6      	b.n	8000316 <_malloc_r+0x8a>
 80007c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80007cc:	227e      	movs	r2, #126	; 0x7e
 80007ce:	e6e3      	b.n	8000598 <_malloc_r+0x30c>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	e770      	b.n	80006b6 <_malloc_r+0x42a>

080007d4 <memcpy>:
 80007d4:	4684      	mov	ip, r0
 80007d6:	ea41 0300 	orr.w	r3, r1, r0
 80007da:	f013 0303 	ands.w	r3, r3, #3
 80007de:	d149      	bne.n	8000874 <memcpy+0xa0>
 80007e0:	3a40      	subs	r2, #64	; 0x40
 80007e2:	d323      	bcc.n	800082c <memcpy+0x58>
 80007e4:	680b      	ldr	r3, [r1, #0]
 80007e6:	6003      	str	r3, [r0, #0]
 80007e8:	684b      	ldr	r3, [r1, #4]
 80007ea:	6043      	str	r3, [r0, #4]
 80007ec:	688b      	ldr	r3, [r1, #8]
 80007ee:	6083      	str	r3, [r0, #8]
 80007f0:	68cb      	ldr	r3, [r1, #12]
 80007f2:	60c3      	str	r3, [r0, #12]
 80007f4:	690b      	ldr	r3, [r1, #16]
 80007f6:	6103      	str	r3, [r0, #16]
 80007f8:	694b      	ldr	r3, [r1, #20]
 80007fa:	6143      	str	r3, [r0, #20]
 80007fc:	698b      	ldr	r3, [r1, #24]
 80007fe:	6183      	str	r3, [r0, #24]
 8000800:	69cb      	ldr	r3, [r1, #28]
 8000802:	61c3      	str	r3, [r0, #28]
 8000804:	6a0b      	ldr	r3, [r1, #32]
 8000806:	6203      	str	r3, [r0, #32]
 8000808:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800080a:	6243      	str	r3, [r0, #36]	; 0x24
 800080c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800080e:	6283      	str	r3, [r0, #40]	; 0x28
 8000810:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000812:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000814:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000816:	6303      	str	r3, [r0, #48]	; 0x30
 8000818:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800081a:	6343      	str	r3, [r0, #52]	; 0x34
 800081c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800081e:	6383      	str	r3, [r0, #56]	; 0x38
 8000820:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000822:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000824:	3040      	adds	r0, #64	; 0x40
 8000826:	3140      	adds	r1, #64	; 0x40
 8000828:	3a40      	subs	r2, #64	; 0x40
 800082a:	d2db      	bcs.n	80007e4 <memcpy+0x10>
 800082c:	3230      	adds	r2, #48	; 0x30
 800082e:	d30b      	bcc.n	8000848 <memcpy+0x74>
 8000830:	680b      	ldr	r3, [r1, #0]
 8000832:	6003      	str	r3, [r0, #0]
 8000834:	684b      	ldr	r3, [r1, #4]
 8000836:	6043      	str	r3, [r0, #4]
 8000838:	688b      	ldr	r3, [r1, #8]
 800083a:	6083      	str	r3, [r0, #8]
 800083c:	68cb      	ldr	r3, [r1, #12]
 800083e:	60c3      	str	r3, [r0, #12]
 8000840:	3010      	adds	r0, #16
 8000842:	3110      	adds	r1, #16
 8000844:	3a10      	subs	r2, #16
 8000846:	d2f3      	bcs.n	8000830 <memcpy+0x5c>
 8000848:	320c      	adds	r2, #12
 800084a:	d305      	bcc.n	8000858 <memcpy+0x84>
 800084c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000850:	f840 3b04 	str.w	r3, [r0], #4
 8000854:	3a04      	subs	r2, #4
 8000856:	d2f9      	bcs.n	800084c <memcpy+0x78>
 8000858:	3204      	adds	r2, #4
 800085a:	d008      	beq.n	800086e <memcpy+0x9a>
 800085c:	07d2      	lsls	r2, r2, #31
 800085e:	bf1c      	itt	ne
 8000860:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000864:	f800 3b01 	strbne.w	r3, [r0], #1
 8000868:	d301      	bcc.n	800086e <memcpy+0x9a>
 800086a:	880b      	ldrh	r3, [r1, #0]
 800086c:	8003      	strh	r3, [r0, #0]
 800086e:	4660      	mov	r0, ip
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2a08      	cmp	r2, #8
 8000876:	d313      	bcc.n	80008a0 <memcpy+0xcc>
 8000878:	078b      	lsls	r3, r1, #30
 800087a:	d0b1      	beq.n	80007e0 <memcpy+0xc>
 800087c:	f010 0303 	ands.w	r3, r0, #3
 8000880:	d0ae      	beq.n	80007e0 <memcpy+0xc>
 8000882:	f1c3 0304 	rsb	r3, r3, #4
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	07db      	lsls	r3, r3, #31
 800088a:	bf1c      	itt	ne
 800088c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000890:	f800 3b01 	strbne.w	r3, [r0], #1
 8000894:	d3a4      	bcc.n	80007e0 <memcpy+0xc>
 8000896:	f831 3b02 	ldrh.w	r3, [r1], #2
 800089a:	f820 3b02 	strh.w	r3, [r0], #2
 800089e:	e79f      	b.n	80007e0 <memcpy+0xc>
 80008a0:	3a04      	subs	r2, #4
 80008a2:	d3d9      	bcc.n	8000858 <memcpy+0x84>
 80008a4:	3a01      	subs	r2, #1
 80008a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80008aa:	f800 3b01 	strb.w	r3, [r0], #1
 80008ae:	d2f9      	bcs.n	80008a4 <memcpy+0xd0>
 80008b0:	780b      	ldrb	r3, [r1, #0]
 80008b2:	7003      	strb	r3, [r0, #0]
 80008b4:	784b      	ldrb	r3, [r1, #1]
 80008b6:	7043      	strb	r3, [r0, #1]
 80008b8:	788b      	ldrb	r3, [r1, #2]
 80008ba:	7083      	strb	r3, [r0, #2]
 80008bc:	4660      	mov	r0, ip
 80008be:	4770      	bx	lr

080008c0 <__malloc_lock>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <__malloc_unlock>:
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <_malloc_trim_r>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	460c      	mov	r4, r1
 80008cc:	4f23      	ldr	r7, [pc, #140]	; (800095c <_malloc_trim_r+0x94>)
 80008ce:	4606      	mov	r6, r0
 80008d0:	f7ff fff6 	bl	80008c0 <__malloc_lock>
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80008da:	685d      	ldr	r5, [r3, #4]
 80008dc:	310f      	adds	r1, #15
 80008de:	f025 0503 	bic.w	r5, r5, #3
 80008e2:	4429      	add	r1, r5
 80008e4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80008e8:	f021 010f 	bic.w	r1, r1, #15
 80008ec:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80008f0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80008f4:	db07      	blt.n	8000906 <_malloc_trim_r+0x3e>
 80008f6:	2100      	movs	r1, #0
 80008f8:	4630      	mov	r0, r6
 80008fa:	f002 fa59 	bl	8002db0 <_sbrk_r>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	442b      	add	r3, r5
 8000902:	4298      	cmp	r0, r3
 8000904:	d004      	beq.n	8000910 <_malloc_trim_r+0x48>
 8000906:	4630      	mov	r0, r6
 8000908:	f7ff ffdc 	bl	80008c4 <__malloc_unlock>
 800090c:	2000      	movs	r0, #0
 800090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000910:	4261      	negs	r1, r4
 8000912:	4630      	mov	r0, r6
 8000914:	f002 fa4c 	bl	8002db0 <_sbrk_r>
 8000918:	3001      	adds	r0, #1
 800091a:	d00d      	beq.n	8000938 <_malloc_trim_r+0x70>
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <_malloc_trim_r+0x98>)
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	1b2d      	subs	r5, r5, r4
 8000924:	f045 0501 	orr.w	r5, r5, #1
 8000928:	4630      	mov	r0, r6
 800092a:	1b09      	subs	r1, r1, r4
 800092c:	6055      	str	r5, [r2, #4]
 800092e:	6019      	str	r1, [r3, #0]
 8000930:	f7ff ffc8 	bl	80008c4 <__malloc_unlock>
 8000934:	2001      	movs	r0, #1
 8000936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000938:	2100      	movs	r1, #0
 800093a:	4630      	mov	r0, r6
 800093c:	f002 fa38 	bl	8002db0 <_sbrk_r>
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	1a83      	subs	r3, r0, r2
 8000944:	2b0f      	cmp	r3, #15
 8000946:	ddde      	ble.n	8000906 <_malloc_trim_r+0x3e>
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <_malloc_trim_r+0x9c>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	680c      	ldr	r4, [r1, #0]
 8000950:	4903      	ldr	r1, [pc, #12]	; (8000960 <_malloc_trim_r+0x98>)
 8000952:	1b00      	subs	r0, r0, r4
 8000954:	6053      	str	r3, [r2, #4]
 8000956:	6008      	str	r0, [r1, #0]
 8000958:	e7d5      	b.n	8000906 <_malloc_trim_r+0x3e>
 800095a:	bf00      	nop
 800095c:	20000800 	.word	0x20000800
 8000960:	2000104c 	.word	0x2000104c
 8000964:	20000c08 	.word	0x20000c08

08000968 <_free_r>:
 8000968:	2900      	cmp	r1, #0
 800096a:	d05e      	beq.n	8000a2a <_free_r+0xc2>
 800096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096e:	460f      	mov	r7, r1
 8000970:	4606      	mov	r6, r0
 8000972:	f7ff ffa5 	bl	80008c0 <__malloc_lock>
 8000976:	f857 cc04 	ldr.w	ip, [r7, #-4]
 800097a:	4d75      	ldr	r5, [pc, #468]	; (8000b50 <_free_r+0x1e8>)
 800097c:	f1a7 0008 	sub.w	r0, r7, #8
 8000980:	f02c 0301 	bic.w	r3, ip, #1
 8000984:	18c2      	adds	r2, r0, r3
 8000986:	68a9      	ldr	r1, [r5, #8]
 8000988:	6854      	ldr	r4, [r2, #4]
 800098a:	4291      	cmp	r1, r2
 800098c:	f024 0403 	bic.w	r4, r4, #3
 8000990:	f000 8084 	beq.w	8000a9c <_free_r+0x134>
 8000994:	f01c 0f01 	tst.w	ip, #1
 8000998:	6054      	str	r4, [r2, #4]
 800099a:	eb02 0104 	add.w	r1, r2, r4
 800099e:	d133      	bne.n	8000a08 <_free_r+0xa0>
 80009a0:	f857 ec08 	ldr.w	lr, [r7, #-8]
 80009a4:	6849      	ldr	r1, [r1, #4]
 80009a6:	eba0 000e 	sub.w	r0, r0, lr
 80009aa:	6887      	ldr	r7, [r0, #8]
 80009ac:	f105 0c08 	add.w	ip, r5, #8
 80009b0:	4567      	cmp	r7, ip
 80009b2:	4473      	add	r3, lr
 80009b4:	f001 0101 	and.w	r1, r1, #1
 80009b8:	d060      	beq.n	8000a7c <_free_r+0x114>
 80009ba:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80009be:	f8c7 e00c 	str.w	lr, [r7, #12]
 80009c2:	f8ce 7008 	str.w	r7, [lr, #8]
 80009c6:	2900      	cmp	r1, #0
 80009c8:	f000 808d 	beq.w	8000ae6 <_free_r+0x17e>
 80009cc:	f043 0101 	orr.w	r1, r3, #1
 80009d0:	6041      	str	r1, [r0, #4]
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009d8:	d230      	bcs.n	8000a3c <_free_r+0xd4>
 80009da:	2201      	movs	r2, #1
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	686c      	ldr	r4, [r5, #4]
 80009e0:	1099      	asrs	r1, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	408a      	lsls	r2, r1
 80009e6:	4322      	orrs	r2, r4
 80009e8:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80009ec:	f855 4033 	ldr.w	r4, [r5, r3, lsl #3]
 80009f0:	3908      	subs	r1, #8
 80009f2:	e9c0 4102 	strd	r4, r1, [r0, #8]
 80009f6:	606a      	str	r2, [r5, #4]
 80009f8:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
 80009fc:	60e0      	str	r0, [r4, #12]
 80009fe:	4630      	mov	r0, r6
 8000a00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000a04:	f7ff bf5e 	b.w	80008c4 <__malloc_unlock>
 8000a08:	6849      	ldr	r1, [r1, #4]
 8000a0a:	07c9      	lsls	r1, r1, #31
 8000a0c:	d40e      	bmi.n	8000a2c <_free_r+0xc4>
 8000a0e:	4423      	add	r3, r4
 8000a10:	f105 0c08 	add.w	ip, r5, #8
 8000a14:	6891      	ldr	r1, [r2, #8]
 8000a16:	f043 0401 	orr.w	r4, r3, #1
 8000a1a:	4561      	cmp	r1, ip
 8000a1c:	d06b      	beq.n	8000af6 <_free_r+0x18e>
 8000a1e:	68d2      	ldr	r2, [r2, #12]
 8000a20:	60ca      	str	r2, [r1, #12]
 8000a22:	6091      	str	r1, [r2, #8]
 8000a24:	6044      	str	r4, [r0, #4]
 8000a26:	50c3      	str	r3, [r0, r3]
 8000a28:	e7d4      	b.n	80009d4 <_free_r+0x6c>
 8000a2a:	4770      	bx	lr
 8000a2c:	f043 0101 	orr.w	r1, r3, #1
 8000a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a34:	f847 1c04 	str.w	r1, [r7, #-4]
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	d3ce      	bcc.n	80009da <_free_r+0x72>
 8000a3c:	0a5a      	lsrs	r2, r3, #9
 8000a3e:	2a04      	cmp	r2, #4
 8000a40:	d846      	bhi.n	8000ad0 <_free_r+0x168>
 8000a42:	099a      	lsrs	r2, r3, #6
 8000a44:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8000a48:	00ff      	lsls	r7, r7, #3
 8000a4a:	f102 0138 	add.w	r1, r2, #56	; 0x38
 8000a4e:	19ec      	adds	r4, r5, r7
 8000a50:	59ea      	ldr	r2, [r5, r7]
 8000a52:	3c08      	subs	r4, #8
 8000a54:	4294      	cmp	r4, r2
 8000a56:	d055      	beq.n	8000b04 <_free_r+0x19c>
 8000a58:	6851      	ldr	r1, [r2, #4]
 8000a5a:	f021 0103 	bic.w	r1, r1, #3
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d902      	bls.n	8000a68 <_free_r+0x100>
 8000a62:	6892      	ldr	r2, [r2, #8]
 8000a64:	4294      	cmp	r4, r2
 8000a66:	d1f7      	bne.n	8000a58 <_free_r+0xf0>
 8000a68:	68d4      	ldr	r4, [r2, #12]
 8000a6a:	e9c0 2402 	strd	r2, r4, [r0, #8]
 8000a6e:	60a0      	str	r0, [r4, #8]
 8000a70:	60d0      	str	r0, [r2, #12]
 8000a72:	4630      	mov	r0, r6
 8000a74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000a78:	f7ff bf24 	b.w	80008c4 <__malloc_unlock>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d162      	bne.n	8000b46 <_free_r+0x1de>
 8000a80:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8000a84:	4423      	add	r3, r4
 8000a86:	f043 0401 	orr.w	r4, r3, #1
 8000a8a:	60d1      	str	r1, [r2, #12]
 8000a8c:	608a      	str	r2, [r1, #8]
 8000a8e:	6044      	str	r4, [r0, #4]
 8000a90:	50c3      	str	r3, [r0, r3]
 8000a92:	4630      	mov	r0, r6
 8000a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000a98:	f7ff bf14 	b.w	80008c4 <__malloc_unlock>
 8000a9c:	f01c 0f01 	tst.w	ip, #1
 8000aa0:	4423      	add	r3, r4
 8000aa2:	d107      	bne.n	8000ab4 <_free_r+0x14c>
 8000aa4:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8000aa8:	1b00      	subs	r0, r0, r4
 8000aaa:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8000aae:	4423      	add	r3, r4
 8000ab0:	60ca      	str	r2, [r1, #12]
 8000ab2:	6091      	str	r1, [r2, #8]
 8000ab4:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <_free_r+0x1ec>)
 8000ab6:	f043 0101 	orr.w	r1, r3, #1
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	6041      	str	r1, [r0, #4]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	60a8      	str	r0, [r5, #8]
 8000ac2:	d89c      	bhi.n	80009fe <_free_r+0x96>
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <_free_r+0x1f0>)
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	f7ff fefd 	bl	80008c8 <_malloc_trim_r>
 8000ace:	e796      	b.n	80009fe <_free_r+0x96>
 8000ad0:	2a14      	cmp	r2, #20
 8000ad2:	d90a      	bls.n	8000aea <_free_r+0x182>
 8000ad4:	2a54      	cmp	r2, #84	; 0x54
 8000ad6:	d81d      	bhi.n	8000b14 <_free_r+0x1ac>
 8000ad8:	0b1a      	lsrs	r2, r3, #12
 8000ada:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8000ade:	00ff      	lsls	r7, r7, #3
 8000ae0:	f102 016e 	add.w	r1, r2, #110	; 0x6e
 8000ae4:	e7b3      	b.n	8000a4e <_free_r+0xe6>
 8000ae6:	4423      	add	r3, r4
 8000ae8:	e794      	b.n	8000a14 <_free_r+0xac>
 8000aea:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8000aee:	00ff      	lsls	r7, r7, #3
 8000af0:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 8000af4:	e7ab      	b.n	8000a4e <_free_r+0xe6>
 8000af6:	e9c5 0004 	strd	r0, r0, [r5, #16]
 8000afa:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 8000afe:	6044      	str	r4, [r0, #4]
 8000b00:	50c3      	str	r3, [r0, r3]
 8000b02:	e77c      	b.n	80009fe <_free_r+0x96>
 8000b04:	2701      	movs	r7, #1
 8000b06:	686b      	ldr	r3, [r5, #4]
 8000b08:	1089      	asrs	r1, r1, #2
 8000b0a:	fa07 f101 	lsl.w	r1, r7, r1
 8000b0e:	4319      	orrs	r1, r3
 8000b10:	6069      	str	r1, [r5, #4]
 8000b12:	e7aa      	b.n	8000a6a <_free_r+0x102>
 8000b14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8000b18:	d806      	bhi.n	8000b28 <_free_r+0x1c0>
 8000b1a:	0bda      	lsrs	r2, r3, #15
 8000b1c:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8000b20:	00ff      	lsls	r7, r7, #3
 8000b22:	f102 0177 	add.w	r1, r2, #119	; 0x77
 8000b26:	e792      	b.n	8000a4e <_free_r+0xe6>
 8000b28:	f240 5154 	movw	r1, #1364	; 0x554
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	d806      	bhi.n	8000b3e <_free_r+0x1d6>
 8000b30:	0c9a      	lsrs	r2, r3, #18
 8000b32:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8000b36:	00ff      	lsls	r7, r7, #3
 8000b38:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8000b3c:	e787      	b.n	8000a4e <_free_r+0xe6>
 8000b3e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 8000b42:	217e      	movs	r1, #126	; 0x7e
 8000b44:	e783      	b.n	8000a4e <_free_r+0xe6>
 8000b46:	f043 0101 	orr.w	r1, r3, #1
 8000b4a:	6041      	str	r1, [r0, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e756      	b.n	80009fe <_free_r+0x96>
 8000b50:	20000800 	.word	0x20000800
 8000b54:	20000c0c 	.word	0x20000c0c
 8000b58:	20001048 	.word	0x20001048
 8000b5c:	00000000 	.word	0x00000000

08000b60 <efl_lld_start.constprop.0>:
 *
 * @param[in] eflp      pointer to a @p EFlashDriver structure
 *
 * @notapi
 */
void efl_lld_start(EFlashDriver *eflp) {
 8000b60:	b430      	push	{r4, r5}

  stm32_flash_unlock(eflp);
  FLASH->CR = 0x00000000U;
 8000b62:	2400      	movs	r4, #0
  stm32_flash_unlock(eflp);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <efl_lld_start.constprop.0+0x20>)
  eflp->flash->KEYR |= FLASH_KEY1;
 8000b66:	4907      	ldr	r1, [pc, #28]	; (8000b84 <efl_lld_start.constprop.0+0x24>)
  stm32_flash_unlock(eflp);
 8000b68:	68db      	ldr	r3, [r3, #12]
  eflp->flash->KEYR |= FLASH_KEY2;
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <efl_lld_start.constprop.0+0x28>)
  eflp->flash->KEYR |= FLASH_KEY1;
 8000b6c:	685d      	ldr	r5, [r3, #4]
  FLASH->CR = 0x00000000U;
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <efl_lld_start.constprop.0+0x2c>)
  eflp->flash->KEYR |= FLASH_KEY1;
 8000b70:	4329      	orrs	r1, r5
 8000b72:	6059      	str	r1, [r3, #4]
  eflp->flash->KEYR |= FLASH_KEY2;
 8000b74:	6859      	ldr	r1, [r3, #4]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	605a      	str	r2, [r3, #4]
  FLASH->CR = 0x00000000U;
 8000b7a:	6104      	str	r4, [r0, #16]
}
 8000b7c:	bc30      	pop	{r4, r5}
 8000b7e:	4770      	bx	lr
 8000b80:	2000107c 	.word	0x2000107c
 8000b84:	45670123 	.word	0x45670123
 8000b88:	cdef89ab 	.word	0xcdef89ab
 8000b8c:	40022000 	.word	0x40022000

08000b90 <__idle_thread>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8000b90:	e7fe      	b.n	8000b90 <__idle_thread>
 8000b92:	bf00      	nop
	...

08000ba0 <chCoreAllocFromTop>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ba0:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000ba2:	b430      	push	{r4, r5}
 8000ba4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <chCoreAllocFromTop+0x38>)
 8000baa:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000bac:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000bb0:	1a28      	subs	r0, r5, r0
 8000bb2:	4008      	ands	r0, r1
  prev = p - offset;
 8000bb4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000bb6:	42a2      	cmp	r2, r4
 8000bb8:	d307      	bcc.n	8000bca <chCoreAllocFromTop+0x2a>
 8000bba:	4295      	cmp	r5, r2
 8000bbc:	d305      	bcc.n	8000bca <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000bc6:	bc30      	pop	{r4, r5}
 8000bc8:	4770      	bx	lr
    return NULL;
 8000bca:	2000      	movs	r0, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f383 8811 	msr	BASEPRI, r3
}
 8000bd2:	bc30      	pop	{r4, r5}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200017f8 	.word	0x200017f8
 8000bdc:	00000000 	.word	0x00000000

08000be0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000be0:	4a02      	ldr	r2, [pc, #8]	; (8000bec <notify1+0xc>)
 8000be2:	68d3      	ldr	r3, [r2, #12]
 8000be4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000be8:	60d3      	str	r3, [r2, #12]
}
 8000bea:	4770      	bx	lr
 8000bec:	40013800 	.word	0x40013800

08000bf0 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8000bf0:	2902      	cmp	r1, #2
 8000bf2:	d006      	beq.n	8000c02 <get_descriptor+0x12>
 8000bf4:	2903      	cmp	r1, #3
 8000bf6:	d006      	beq.n	8000c06 <get_descriptor+0x16>
 8000bf8:	2901      	cmp	r1, #1
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <get_descriptor+0x28>)
 8000bfc:	bf18      	it	ne
 8000bfe:	2000      	movne	r0, #0
 8000c00:	4770      	bx	lr
  switch (dtype) {
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <get_descriptor+0x2c>)
 8000c04:	4770      	bx	lr
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8000c06:	2a03      	cmp	r2, #3
 8000c08:	d803      	bhi.n	8000c12 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <get_descriptor+0x30>)
 8000c0c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000c10:	4770      	bx	lr
  }
  return NULL;
 8000c12:	2000      	movs	r0, #0
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	080037b0 	.word	0x080037b0
 8000c1c:	08003764 	.word	0x08003764
 8000c20:	08003838 	.word	0x08003838
	...

08000c30 <__port_irq_epilogue>:
 8000c30:	2320      	movs	r3, #32
 8000c32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <__port_irq_epilogue+0x3c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000c3e:	d102      	bne.n	8000c46 <__port_irq_epilogue+0x16>
 8000c40:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000c44:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000c46:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8000c4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8000c4e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000c50:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000c52:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8000c56:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <__port_irq_epilogue+0x40>)
 8000c58:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8000c5a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8000c5c:	6889      	ldr	r1, [r1, #8]
 8000c5e:	6892      	ldr	r2, [r2, #8]
 8000c60:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8000c62:	bf8c      	ite	hi
 8000c64:	4a03      	ldrhi	r2, [pc, #12]	; (8000c74 <__port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8000c66:	4a04      	ldrls	r2, [pc, #16]	; (8000c78 <__port_irq_epilogue+0x48>)
 8000c68:	619a      	str	r2, [r3, #24]
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	20001628 	.word	0x20001628
 8000c74:	08000263 	.word	0x08000263
 8000c78:	08000266 	.word	0x08000266
 8000c7c:	00000000 	.word	0x00000000

08000c80 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000c82:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000c84:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000c88:	4249      	negs	r1, r1
 8000c8a:	1a10      	subs	r0, r2, r0
 8000c8c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000c8e:	42a0      	cmp	r0, r4
 8000c90:	d304      	bcc.n	8000c9c <chCoreAllocAlignedI+0x1c>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	d302      	bcc.n	8000c9c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000c96:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000c98:	6058      	str	r0, [r3, #4]
 8000c9a:	4770      	bx	lr
    return NULL;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	bc10      	pop	{r4}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200017f8 	.word	0x200017f8
	...

08000cb0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <chTMStopMeasurementX+0x3c>)
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <chTMStopMeasurementX+0x40>)
 8000cb4:	6891      	ldr	r1, [r2, #8]
 8000cb6:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 8000cb8:	6882      	ldr	r2, [r0, #8]
 8000cba:	1a5b      	subs	r3, r3, r1
 8000cbc:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 8000cbe:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000cc0:	b430      	push	{r4, r5}
  tmp->cumulative += (rttime_t)tmp->last;
 8000cc2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000cc6:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000cc8:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 8000cca:	18e4      	adds	r4, r4, r3
  tmp->last = (now - tmp->last) - offset;
 8000ccc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (tmp->last < tmp->best) {
 8000cd0:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 8000cd2:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000cd6:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000cd8:	bf88      	it	hi
 8000cda:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000cdc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000cde:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8000ce2:	bc30      	pop	{r4, r5}
    tmp->best = tmp->last;
 8000ce4:	bf38      	it	cc
 8000ce6:	6003      	strcc	r3, [r0, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20001800 	.word	0x20001800
 8000cf0:	e0001000 	.word	0xe0001000
	...

08000d00 <chTMStartMeasurementX>:
 8000d00:	4b01      	ldr	r3, [pc, #4]	; (8000d08 <chTMStartMeasurementX+0x8>)
 8000d02:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000d04:	6083      	str	r3, [r0, #8]
}
 8000d06:	4770      	bx	lr
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	00000000 	.word	0x00000000

08000d10 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000d10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000d14:	68c3      	ldr	r3, [r0, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8000d16:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000d18:	695a      	ldr	r2, [r3, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8000d1a:	8a1b      	ldrh	r3, [r3, #16]
  n = isp->txsize;
 8000d1c:	6814      	ldr	r4, [r2, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <usb_lld_start_in+0x78>)
 8000d20:	42a3      	cmp	r3, r4
 8000d22:	bf28      	it	cs
 8000d24:	4623      	movcs	r3, r4
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8000d26:	60d3      	str	r3, [r2, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000d28:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000d2a:	010d      	lsls	r5, r1, #4
 8000d2c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000d30:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8000d34:	6890      	ldr	r0, [r2, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000d36:	592a      	ldr	r2, [r5, r4]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000d38:	eb04 1401 	add.w	r4, r4, r1, lsl #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8000d3c:	6063      	str	r3, [r4, #4]
  while (i > 0) {
 8000d3e:	b183      	cbz	r3, 8000d62 <usb_lld_start_in+0x52>
 8000d40:	1e5c      	subs	r4, r3, #1
 8000d42:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000d46:	f024 0401 	bic.w	r4, r4, #1
 8000d4a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8000d4e:	3402      	adds	r4, #2
 8000d50:	0052      	lsls	r2, r2, #1
 8000d52:	4404      	add	r4, r0
    w |= *buf++ << 8;
 8000d54:	f830 5b02 	ldrh.w	r5, [r0], #2
    *pmap++ = (stm32_usb_pma_t)w;
 8000d58:	3204      	adds	r2, #4
  while (i > 0) {
 8000d5a:	4284      	cmp	r4, r0
    *pmap++ = (stm32_usb_pma_t)w;
 8000d5c:	f842 5c04 	str.w	r5, [r2, #-4]
  while (i > 0) {
 8000d60:	d1f8      	bne.n	8000d54 <usb_lld_start_in+0x44>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
}
 8000d62:	bc30      	pop	{r4, r5}
 8000d64:	0089      	lsls	r1, r1, #2
 8000d66:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000d6a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d78:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8000d7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d84:	601a      	str	r2, [r3, #0]
}
 8000d86:	4770      	bx	lr
 8000d88:	40005c00 	.word	0x40005c00
 8000d8c:	00000000 	.word	0x00000000

08000d90 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000d90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000d94:	68c2      	ldr	r2, [r0, #12]
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8000d96:	b410      	push	{r4}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000d98:	6990      	ldr	r0, [r2, #24]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	b1cb      	cbz	r3, 8000dd2 <usb_lld_start_out+0x42>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8000d9e:	8a54      	ldrh	r4, [r2, #18]
 8000da0:	191a      	adds	r2, r3, r4
 8000da2:	3a01      	subs	r2, #1
 8000da4:	fbb2 f2f4 	udiv	r2, r2, r4
 8000da8:	b292      	uxth	r2, r2
 8000daa:	0089      	lsls	r1, r1, #2
 8000dac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000db0:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000db4:	680b      	ldr	r3, [r1, #0]
}
 8000db6:	bc10      	pop	{r4}
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000db8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	8182      	strh	r2, [r0, #12]
 8000dce:	600b      	str	r3, [r1, #0]
}
 8000dd0:	4770      	bx	lr
    osp->rxpkts = 1;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	e7e9      	b.n	8000daa <usb_lld_start_out+0x1a>
 8000dd6:	bf00      	nop
	...

08000de0 <usb_lld_init_endpoint>:
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8000de0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8000de4:	b4f0      	push	{r4, r5, r6, r7}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8000de6:	68de      	ldr	r6, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8000de8:	6833      	ldr	r3, [r6, #0]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d155      	bne.n	8000e9e <usb_lld_init_endpoint+0xbe>
 8000df2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  dp = USB_GET_DESCRIPTOR(ep);
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <usb_lld_init_endpoint+0xe0>)
  if (epcp->in_state != NULL) {
 8000df8:	6974      	ldr	r4, [r6, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 8000dfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dfc:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8000e00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000e04:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8000e08:	eb02 1501 	add.w	r5, r2, r1, lsl #4
  if (epcp->in_state != NULL) {
 8000e0c:	b174      	cbz	r4, 8000e2c <usb_lld_init_endpoint+0x4c>
    dp->TXCOUNT0 = 0;
 8000e0e:	2700      	movs	r7, #0
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8000e10:	8a34      	ldrh	r4, [r6, #16]
    dp->TXCOUNT0 = 0;
 8000e12:	606f      	str	r7, [r5, #4]
  next = usbp->pmnext;
 8000e14:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8000e18:	3401      	adds	r4, #1
 8000e1a:	f024 0401 	bic.w	r4, r4, #1
 8000e1e:	443c      	add	r4, r7
 8000e20:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_TX_NAK;
 8000e24:	f043 0320 	orr.w	r3, r3, #32
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8000e28:	f84c 7002 	str.w	r7, [ip, r2]
  if (epcp->out_state != NULL) {
 8000e2c:	69b2      	ldr	r2, [r6, #24]
 8000e2e:	b1aa      	cbz	r2, 8000e5c <usb_lld_init_endpoint+0x7c>
    if (epcp->out_maxsize > 62)
 8000e30:	8a72      	ldrh	r2, [r6, #18]
 8000e32:	2a3e      	cmp	r2, #62	; 0x3e
 8000e34:	d839      	bhi.n	8000eaa <usb_lld_init_endpoint+0xca>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8000e36:	1e54      	subs	r4, r2, #1
 8000e38:	f044 0401 	orr.w	r4, r4, #1
 8000e3c:	3401      	adds	r4, #1
 8000e3e:	0264      	lsls	r4, r4, #9
 8000e40:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
    dp->RXCOUNT0 = nblocks;
 8000e44:	60ec      	str	r4, [r5, #12]
  next = usbp->pmnext;
 8000e46:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	4422      	add	r2, r4
 8000e52:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    epr |= EPR_STAT_RX_NAK;
 8000e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8000e5a:	60ac      	str	r4, [r5, #8]
    epr |= EPR_DTOG_RX;
 8000e5c:	008a      	lsls	r2, r1, #2
 8000e5e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000e62:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 8000e66:	6810      	ldr	r0, [r2, #0]
 8000e68:	0444      	lsls	r4, r0, #17
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8000e6a:	6810      	ldr	r0, [r2, #0]
    epr |= EPR_DTOG_RX;
 8000e6c:	bf48      	it	mi
 8000e6e:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8000e72:	0640      	lsls	r0, r0, #25
  EPR_SET(ep, epr | ep);
 8000e74:	f248 0080 	movw	r0, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 8000e78:	f647 0470 	movw	r4, #30832	; 0x7870
    epr |= EPR_DTOG_TX;
 8000e7c:	bf48      	it	mi
 8000e7e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  EPR_SET(ep, epr | ep);
 8000e82:	4319      	orrs	r1, r3
 8000e84:	f421 4178 	bic.w	r1, r1, #63488	; 0xf800
 8000e88:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000e8c:	4301      	orrs	r1, r0
 8000e8e:	6011      	str	r1, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8000e90:	6811      	ldr	r1, [r2, #0]
 8000e92:	4023      	ands	r3, r4
 8000e94:	404b      	eors	r3, r1
 8000e96:	4303      	orrs	r3, r0
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e9c:	4770      	bx	lr
    epr = EPR_EP_TYPE_BULK;
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf0c      	ite	eq
 8000ea2:	f44f 7300 	moveq.w	r3, #512	; 0x200
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	e7a5      	b.n	8000df6 <usb_lld_init_endpoint+0x16>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8000eaa:	1e56      	subs	r6, r2, #1
 8000eac:	f046 061f 	orr.w	r6, r6, #31
 8000eb0:	4c04      	ldr	r4, [pc, #16]	; (8000ec4 <usb_lld_init_endpoint+0xe4>)
 8000eb2:	3601      	adds	r6, #1
 8000eb4:	1176      	asrs	r6, r6, #5
 8000eb6:	ea44 2486 	orr.w	r4, r4, r6, lsl #10
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	e7c2      	b.n	8000e44 <usb_lld_init_endpoint+0x64>
 8000ebe:	bf00      	nop
 8000ec0:	40005c00 	.word	0x40005c00
 8000ec4:	ffff8000 	.word	0xffff8000
	...

08000ed0 <usb_lld_reset>:
  STM32_USB->BTABLE = BTABLE_ADDR;
 8000ed0:	2100      	movs	r1, #0
  if (usbp->config->sof_cb != NULL)
 8000ed2:	6842      	ldr	r2, [r0, #4]
void usb_lld_reset(USBDriver *usbp) {
 8000ed4:	b4f0      	push	{r4, r5, r6, r7}
  if (usbp->config->sof_cb != NULL)
 8000ed6:	68d2      	ldr	r2, [r2, #12]
  STM32_USB->DADDR  = DADDR_EF;
 8000ed8:	2780      	movs	r7, #128	; 0x80
  if (usbp->config->sof_cb != NULL)
 8000eda:	428a      	cmp	r2, r1
    cntr |= CNTR_SOFM;
 8000edc:	bf0c      	ite	eq
 8000ede:	f44f 461c 	moveq.w	r6, #39936	; 0x9c00
 8000ee2:	f44f 461e 	movne.w	r6, #40448	; 0x9e00
  usbp->pmnext = 64;
 8000ee6:	2540      	movs	r5, #64	; 0x40
  STM32_USB->BTABLE = BTABLE_ADDR;
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <usb_lld_reset+0x30>)
  usbp->epc[0] = &ep0config;
 8000eea:	4c06      	ldr	r4, [pc, #24]	; (8000f04 <usb_lld_reset+0x34>)
  STM32_USB->BTABLE = BTABLE_ADDR;
 8000eec:	6511      	str	r1, [r2, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8000eee:	6451      	str	r1, [r2, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8000ef0:	64d7      	str	r7, [r2, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8000ef2:	6416      	str	r6, [r2, #64]	; 0x40
  usbp->pmnext = 64;
 8000ef4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 8000ef8:	60c4      	str	r4, [r0, #12]
}
 8000efa:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_init_endpoint(usbp, 0);
 8000efc:	f7ff bf70 	b.w	8000de0 <usb_lld_init_endpoint>
 8000f00:	40005c00 	.word	0x40005c00
 8000f04:	0800365c 	.word	0x0800365c
	...

08000f10 <efl_lld_query_erase>:
flash_error_t efl_lld_query_erase(void *instance, uint32_t *wait_time) {
  EFlashDriver *devp = (EFlashDriver *)instance;
  flash_error_t err;

  /* If there is an erase in progress then the device must be checked.*/
  if (devp->state == FLASH_ERASE) {
 8000f10:	7902      	ldrb	r2, [r0, #4]
 8000f12:	2a05      	cmp	r2, #5
 8000f14:	d001      	beq.n	8000f1a <efl_lld_query_erase+0xa>

      err = FLASH_BUSY_ERASING;
    }
  }
  else {
    err = FLASH_NO_ERROR;
 8000f16:	2000      	movs	r0, #0
 8000f18:	4770      	bx	lr
    if (stm32_flash_is_busy(devp) == 0U) {
 8000f1a:	68c2      	ldr	r2, [r0, #12]
 8000f1c:	4603      	mov	r3, r0
  return (eflp->flash->SR & FLASH_SR_BSY);
 8000f1e:	68d0      	ldr	r0, [r2, #12]
    if (stm32_flash_is_busy(devp) == 0U) {
 8000f20:	f010 0001 	ands.w	r0, r0, #1
 8000f24:	d003      	beq.n	8000f2e <efl_lld_query_erase+0x1e>
        *wait_time = (uint32_t)STM32_FLASH_WAIT_TIME_MS;
 8000f26:	2001      	movs	r0, #1
      if (wait_time != NULL) {
 8000f28:	b151      	cbz	r1, 8000f40 <efl_lld_query_erase+0x30>
        *wait_time = (uint32_t)STM32_FLASH_WAIT_TIME_MS;
 8000f2a:	6008      	str	r0, [r1, #0]
 8000f2c:	4770      	bx	lr
flash_error_t efl_lld_query_erase(void *instance, uint32_t *wait_time) {
 8000f2e:	b410      	push	{r4}
      devp->state = FLASH_READY;
 8000f30:	2402      	movs	r4, #2
      devp->flash->CR &= ~(FLASH_CR_OPTER | FLASH_CR_OPTPG |
 8000f32:	6911      	ldr	r1, [r2, #16]
 8000f34:	f021 0136 	bic.w	r1, r1, #54	; 0x36
 8000f38:	6111      	str	r1, [r2, #16]
      devp->state = FLASH_READY;
 8000f3a:	711c      	strb	r4, [r3, #4]
  }

  return err;
}
 8000f3c:	bc10      	pop	{r4}
 8000f3e:	4770      	bx	lr
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
	...

08000f50 <efl_lld_start_erase_all>:
}
 8000f50:	2007      	movs	r0, #7
 8000f52:	4770      	bx	lr
	...

08000f60 <efl_lld_program>:
                              size_t n, const uint8_t *pp) {
 8000f60:	4684      	mov	ip, r0
  if (devp->state == FLASH_ERASE) {
 8000f62:	7900      	ldrb	r0, [r0, #4]
 8000f64:	2805      	cmp	r0, #5
 8000f66:	d04c      	beq.n	8001002 <efl_lld_program+0xa2>
                              size_t n, const uint8_t *pp) {
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  eflp->flash->SR = 0x0000001FU;
 8000f6a:	201f      	movs	r0, #31
  devp->state = FLASH_PGM;
 8000f6c:	2404      	movs	r4, #4
  stm32_flash_clear_status(devp);
 8000f6e:	f8dc 600c 	ldr.w	r6, [ip, #12]
  devp->state = FLASH_PGM;
 8000f72:	f88c 4004 	strb.w	r4, [ip, #4]
  eflp->flash->SR = 0x0000001FU;
 8000f76:	60f0      	str	r0, [r6, #12]
  eflp->flash->CR |= FLASH_CR_PG;
 8000f78:	6930      	ldr	r0, [r6, #16]
                              size_t n, const uint8_t *pp) {
 8000f7a:	b083      	sub	sp, #12
  eflp->flash->CR |= FLASH_CR_PG;
 8000f7c:	f040 0001 	orr.w	r0, r0, #1
 8000f80:	6130      	str	r0, [r6, #16]
  while (n > 0U) {
 8000f82:	b382      	cbz	r2, 8000fe6 <efl_lld_program+0x86>
    line.hw[0] = 0xFFFFU;
 8000f84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f88:	461d      	mov	r5, r3
                                    (offset & ~STM32_FLASH_LINE_MASK));
 8000f8a:	f021 0701 	bic.w	r7, r1, #1
    line.hw[0] = 0xFFFFU;
 8000f8e:	f8ad 0004 	strh.w	r0, [sp, #4]
    address = (volatile uint16_t *)(efl_lld_descriptor.address +
 8000f92:	f107 6700 	add.w	r7, r7, #134217728	; 0x8000000
 8000f96:	f001 0401 	and.w	r4, r1, #1
      line.b[offset & STM32_FLASH_LINE_MASK] = *pp;
 8000f9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000f9e:	f10d 0e08 	add.w	lr, sp, #8
 8000fa2:	4474      	add	r4, lr
      offset++;
 8000fa4:	3101      	adds	r1, #1
    while ((n > 0U) & ((offset & STM32_FLASH_LINE_MASK) != 0U));
 8000fa6:	3a01      	subs	r2, #1
      line.b[offset & STM32_FLASH_LINE_MASK] = *pp;
 8000fa8:	f804 3c04 	strb.w	r3, [r4, #-4]
      pp++;
 8000fac:	462b      	mov	r3, r5
    while ((n > 0U) & ((offset & STM32_FLASH_LINE_MASK) != 0U));
 8000fae:	f001 0401 	and.w	r4, r1, #1
 8000fb2:	d002      	beq.n	8000fba <efl_lld_program+0x5a>
 8000fb4:	f011 0f01 	tst.w	r1, #1
 8000fb8:	d1ef      	bne.n	8000f9a <efl_lld_program+0x3a>
    address[0] = line.hw[0];
 8000fba:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8000fbe:	803d      	strh	r5, [r7, #0]
  return (eflp->flash->SR & FLASH_SR_BSY);
 8000fc0:	68f4      	ldr	r4, [r6, #12]
  while (stm32_flash_is_busy(eflp) != 0U) {
 8000fc2:	07e4      	lsls	r4, r4, #31
 8000fc4:	d4fc      	bmi.n	8000fc0 <efl_lld_program+0x60>
  uint32_t sr = eflp->flash->SR;
 8000fc6:	68f4      	ldr	r4, [r6, #12]
  eflp->flash->SR = sr & 0x0000001FU;
 8000fc8:	f004 0e1f 	and.w	lr, r4, #31
  if ((sr & FLASH_SR_WRPRTERR) != 0U) {
 8000fcc:	f014 0f10 	tst.w	r4, #16
  eflp->flash->SR = sr & 0x0000001FU;
 8000fd0:	f8c6 e00c 	str.w	lr, [r6, #12]
  if ((sr & FLASH_SR_WRPRTERR) != 0U) {
 8000fd4:	d109      	bne.n	8000fea <efl_lld_program+0x8a>
  if ((sr & FLASH_SR_PGERR) != 0U) {
 8000fd6:	0764      	lsls	r4, r4, #29
 8000fd8:	d411      	bmi.n	8000ffe <efl_lld_program+0x9e>
    if (address[0] != line.hw[0]) {
 8000fda:	883c      	ldrh	r4, [r7, #0]
 8000fdc:	b2a4      	uxth	r4, r4
 8000fde:	42a5      	cmp	r5, r4
 8000fe0:	d10d      	bne.n	8000ffe <efl_lld_program+0x9e>
  while (n > 0U) {
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d1d0      	bne.n	8000f88 <efl_lld_program+0x28>
    return FLASH_ERROR_PROGRAM; /* There is no error on erase.*/
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	e000      	b.n	8000fec <efl_lld_program+0x8c>
    return FLASH_ERROR_HW_FAILURE;
 8000fea:	2006      	movs	r0, #6
  devp->state = FLASH_READY;
 8000fec:	2202      	movs	r2, #2
  eflp->flash->CR &= ~FLASH_CR_PG;
 8000fee:	6933      	ldr	r3, [r6, #16]
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6133      	str	r3, [r6, #16]
  devp->state = FLASH_READY;
 8000ff6:	f88c 2004 	strb.w	r2, [ip, #4]
}
 8000ffa:	b003      	add	sp, #12
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return FLASH_ERROR_PROGRAM; /* There is no error on erase.*/
 8000ffe:	2003      	movs	r0, #3
 8001000:	e7f4      	b.n	8000fec <efl_lld_program+0x8c>
    return FLASH_BUSY_ERASING;
 8001002:	2001      	movs	r0, #1
}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
	...

08001010 <efl_lld_get_descriptor>:
}
 8001010:	4800      	ldr	r0, [pc, #0]	; (8001014 <efl_lld_get_descriptor+0x4>)
 8001012:	4770      	bx	lr
 8001014:	08003640 	.word	0x08003640
	...

08001020 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8001026:	4604      	mov	r4, r0
 8001028:	2b15      	cmp	r3, #21
 800102a:	d816      	bhi.n	800105a <_usb_ep0out+0x3a>
 800102c:	e8df f003 	tbb	[pc, r3]
 8001030:	15151516 	.word	0x15151516
 8001034:	15161515 	.word	0x15161515
 8001038:	16161615 	.word	0x16161615
 800103c:	15151515 	.word	0x15151515
 8001040:	15151515 	.word	0x15151515
 8001044:	350b      	.short	0x350b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001046:	68c3      	ldr	r3, [r0, #12]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	b92b      	cbnz	r3, 800105a <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800104e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001050:	b103      	cbz	r3, 8001054 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8001052:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001054:	2300      	movs	r3, #0
 8001056:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800105c:	f248 0080 	movw	r0, #32896	; 0x8080
 8001060:	4919      	ldr	r1, [pc, #100]	; (80010c8 <_usb_ep0out+0xa8>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001062:	6863      	ldr	r3, [r4, #4]
 8001064:	680a      	ldr	r2, [r1, #0]
 8001066:	681d      	ldr	r5, [r3, #0]
 8001068:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800106c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001070:	f082 0210 	eor.w	r2, r2, #16
 8001074:	4302      	orrs	r2, r0
 8001076:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001078:	680b      	ldr	r3, [r1, #0]
 800107a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800107e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001082:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001086:	4303      	orrs	r3, r0
 8001088:	600b      	str	r3, [r1, #0]
 800108a:	b115      	cbz	r5, 8001092 <_usb_ep0out+0x72>
 800108c:	2106      	movs	r1, #6
 800108e:	4620      	mov	r0, r4
 8001090:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001092:	2306      	movs	r3, #6
 8001094:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001098:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800109a:	220b      	movs	r2, #11
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800109c:	2320      	movs	r3, #32
 800109e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 80010a2:	f383 8811 	msr	BASEPRI, r3
  isp->txbuf  = buf;
 80010a6:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 80010a8:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80010aa:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80010ac:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80010b4:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 80010b6:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 80010ba:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 80010bc:	f7ff fe28 	bl	8000d10 <usb_lld_start_in>
 80010c0:	f385 8811 	msr	BASEPRI, r5
}
 80010c4:	bd38      	pop	{r3, r4, r5, pc}
 80010c6:	bf00      	nop
 80010c8:	40005c00 	.word	0x40005c00
 80010cc:	00000000 	.word	0x00000000

080010d0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80010d6:	4604      	mov	r4, r0
 80010d8:	2b15      	cmp	r3, #21
 80010da:	d82a      	bhi.n	8001132 <_usb_ep0in+0x62>
 80010dc:	e8df f003 	tbb	[pc, r3]
 80010e0:	2929290b 	.word	0x2929290b
 80010e4:	290b2929 	.word	0x290b2929
 80010e8:	513a2a29 	.word	0x513a2a29
 80010ec:	29292929 	.word	0x29292929
 80010f0:	29292929 	.word	0x29292929
 80010f4:	0b0b      	.short	0x0b0b
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80010f6:	f248 0080 	movw	r0, #32896	; 0x8080
 80010fa:	4930      	ldr	r1, [pc, #192]	; (80011bc <_usb_ep0in+0xec>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	680a      	ldr	r2, [r1, #0]
 8001100:	681d      	ldr	r5, [r3, #0]
 8001102:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110a:	f082 0210 	eor.w	r2, r2, #16
 800110e:	4302      	orrs	r2, r0
 8001110:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001112:	680b      	ldr	r3, [r1, #0]
 8001114:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800111c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001120:	4303      	orrs	r3, r0
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	b115      	cbz	r5, 800112c <_usb_ep0in+0x5c>
 8001126:	2106      	movs	r1, #6
 8001128:	4620      	mov	r0, r4
 800112a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 800112c:	2306      	movs	r3, #6
 800112e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001134:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8001138:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 800113c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 800113e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 8001142:	4299      	cmp	r1, r3
 8001144:	d206      	bcs.n	8001154 <_usb_ep0in+0x84>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001146:	68c3      	ldr	r3, [r0, #12]
 8001148:	8a1b      	ldrh	r3, [r3, #16]
 800114a:	fbb1 f5f3 	udiv	r5, r1, r3
 800114e:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 8001152:	b1ed      	cbz	r5, 8001190 <_usb_ep0in+0xc0>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001154:	2214      	movs	r2, #20
 8001156:	2320      	movs	r3, #32
 8001158:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800115c:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8001160:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8001162:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001164:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001166:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
  osp->rxcnt  = 0;
 8001172:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001176:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8001178:	f7ff fe0a 	bl	8000d90 <usb_lld_start_out>
 800117c:	f385 8811 	msr	BASEPRI, r5
}
 8001180:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001182:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001184:	b103      	cbz	r3, 8001188 <_usb_ep0in+0xb8>
      usbp->ep0endcb(usbp);
 8001186:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001188:	2300      	movs	r3, #0
 800118a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 800118e:	bd38      	pop	{r3, r4, r5, pc}
 8001190:	2320      	movs	r3, #32
 8001192:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001196:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001198:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 800119a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80011a2:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 80011a4:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 80011a8:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 80011aa:	f7ff fdb1 	bl	8000d10 <usb_lld_start_in>
 80011ae:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 80011b2:	230a      	movs	r3, #10
 80011b4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	40005c00 	.word	0x40005c00

080011c0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80011c0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80011c2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80011c6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80011c8:	b113      	cbz	r3, 80011d0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 80011d0:	4bb1      	ldr	r3, [pc, #708]	; (8001498 <_usb_ep0setup+0x2d8>)
  usbReadSetup(usbp, ep, usbp->setup);
 80011d2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80011d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80011e0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80011ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	f103 0210 	add.w	r2, r3, #16
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	3304      	adds	r3, #4
  for (n = 0; n < 4; n++) {
 80011f8:	4293      	cmp	r3, r2
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80011fa:	f820 1b02 	strh.w	r1, [r0], #2
  for (n = 0; n < 4; n++) {
 80011fe:	d1f9      	bne.n	80011f4 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	b36b      	cbz	r3, 8001262 <_usb_ep0setup+0xa2>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001206:	4620      	mov	r0, r4
 8001208:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800120a:	b350      	cbz	r0, 8001262 <_usb_ep0setup+0xa2>
 800120c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800120e:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
  hw |= (uint16_t)*p << 8U;
 8001212:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8001216:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 800121a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 800121e:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8001220:	bf3c      	itt	cc
 8001222:	4613      	movcc	r3, r2
 8001224:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001226:	0602      	lsls	r2, r0, #24
 8001228:	f100 80ec 	bmi.w	8001404 <_usb_ep0setup+0x244>
    if (usbp->ep0n != 0U) {
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 809a 	beq.w	8001366 <_usb_ep0setup+0x1a6>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001232:	2215      	movs	r2, #21
 8001234:	2320      	movs	r3, #32
 8001236:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800123a:	f383 8811 	msr	BASEPRI, r3
  osp->rxcnt  = 0;
 800123e:	2500      	movs	r5, #0
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001240:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  osp = usbp->epc[ep]->out_state;
 8001244:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001246:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001248:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001250:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001252:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff fd9a 	bl	8000d90 <usb_lld_start_out>
 800125c:	f385 8811 	msr	BASEPRI, r5
}
 8001260:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001262:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 8001266:	f010 0560 	ands.w	r5, r0, #96	; 0x60
 800126a:	d11c      	bne.n	80012a6 <_usb_ep0setup+0xe6>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800126c:	f240 3202 	movw	r2, #770	; 0x302
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001270:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001274:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001278:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800127c:	4293      	cmp	r3, r2
 800127e:	f000 8184 	beq.w	800158a <_usb_ep0setup+0x3ca>
 8001282:	d84f      	bhi.n	8001324 <_usb_ep0setup+0x164>
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	f000 813d 	beq.w	8001506 <_usb_ep0setup+0x346>
 800128c:	d92a      	bls.n	80012e4 <_usb_ep0setup+0x124>
 800128e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001292:	f000 8147 	beq.w	8001524 <_usb_ep0setup+0x364>
 8001296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800129a:	d104      	bne.n	80012a6 <_usb_ep0setup+0xe6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800129c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f000 80ef 	beq.w	8001484 <_usb_ep0setup+0x2c4>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80012a6:	f248 0080 	movw	r0, #32896	; 0x8080
 80012aa:	497b      	ldr	r1, [pc, #492]	; (8001498 <_usb_ep0setup+0x2d8>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	680a      	ldr	r2, [r1, #0]
 80012b0:	681d      	ldr	r5, [r3, #0]
 80012b2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80012b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ba:	f082 0210 	eor.w	r2, r2, #16
 80012be:	4302      	orrs	r2, r0
 80012c0:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80012c2:	680b      	ldr	r3, [r1, #0]
 80012c4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80012c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012d0:	4303      	orrs	r3, r0
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	b115      	cbz	r5, 80012dc <_usb_ep0setup+0x11c>
 80012d6:	2106      	movs	r1, #6
 80012d8:	4620      	mov	r0, r4
 80012da:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 80012dc:	2306      	movs	r3, #6
 80012de:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d064      	beq.n	80013b2 <_usb_ep0setup+0x1f2>
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d153      	bne.n	8001394 <_usb_ep0setup+0x1d4>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80012ec:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 80012f0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 80012f4:	2900      	cmp	r1, #0
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80012f6:	4968      	ldr	r1, [pc, #416]	; (8001498 <_usb_ep0setup+0x2d8>)
 80012f8:	f002 020f 	and.w	r2, r2, #15
 80012fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001300:	f2c0 80b0 	blt.w	8001464 <_usb_ep0setup+0x2a4>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8001304:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8001308:	d0cd      	beq.n	80012a6 <_usb_ep0setup+0xe6>
 800130a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800130e:	f04f 0502 	mov.w	r5, #2
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	f000 80b0 	beq.w	800147a <_usb_ep0setup+0x2ba>
 800131a:	4a60      	ldr	r2, [pc, #384]	; (800149c <_usb_ep0setup+0x2dc>)
 800131c:	e9c4 511b 	strd	r5, r1, [r4, #108]	; 0x6c
 8001320:	66a2      	str	r2, [r4, #104]	; 0x68
        return true;
 8001322:	e776      	b.n	8001212 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001328:	f000 8128 	beq.w	800157c <_usb_ep0setup+0x3bc>
 800132c:	d948      	bls.n	80013c0 <_usb_ep0setup+0x200>
 800132e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8001332:	d139      	bne.n	80013a8 <_usb_ep0setup+0x1e8>
      if (usbp->state == USB_ACTIVE) {
 8001334:	7823      	ldrb	r3, [r4, #0]
 8001336:	2b04      	cmp	r3, #4
 8001338:	f000 80b6 	beq.w	80014a8 <_usb_ep0setup+0x2e8>
      if (usbp->setup[2] != 0U) {
 800133c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001340:	b14b      	cbz	r3, 8001356 <_usb_ep0setup+0x196>
        usbp->state = USB_ACTIVE;
 8001342:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001344:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001346:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 800134a:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	b113      	cbz	r3, 8001356 <_usb_ep0setup+0x196>
 8001350:	2102      	movs	r1, #2
 8001352:	4620      	mov	r0, r4
 8001354:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001356:	2300      	movs	r3, #0
 8001358:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 800135c:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 8001360:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001362:	0603      	lsls	r3, r0, #24
 8001364:	d467      	bmi.n	8001436 <_usb_ep0setup+0x276>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001366:	220b      	movs	r2, #11
 8001368:	2320      	movs	r3, #32
 800136a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800136e:	f383 8811 	msr	BASEPRI, r3
  isp->txbuf  = buf;
 8001372:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 8001374:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001376:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001378:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001384:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001388:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 800138a:	f7ff fcc1 	bl	8000d10 <usb_lld_start_in>
 800138e:	f385 8811 	msr	BASEPRI, r5
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001394:	2b00      	cmp	r3, #0
 8001396:	d186      	bne.n	80012a6 <_usb_ep0setup+0xe6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001398:	2202      	movs	r2, #2
 800139a:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 800139e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
 80013a2:	66a1      	str	r1, [r4, #104]	; 0x68
 80013a4:	4613      	mov	r3, r2
 80013a6:	e734      	b.n	8001212 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80013a8:	f640 4202 	movw	r2, #3074	; 0xc02
 80013ac:	4293      	cmp	r3, r2
 80013ae:	f47f af7a 	bne.w	80012a6 <_usb_ep0setup+0xe6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80013b2:	2302      	movs	r3, #2
 80013b4:	2100      	movs	r1, #0
 80013b6:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <_usb_ep0setup+0x2e0>)
 80013b8:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80013bc:	66a2      	str	r2, [r4, #104]	; 0x68
    return true;
 80013be:	e728      	b.n	8001212 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80013c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013c4:	f000 80d5 	beq.w	8001572 <_usb_ep0setup+0x3b2>
 80013c8:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f63f af6a 	bhi.w	80012a6 <_usb_ep0setup+0xe6>
  hw |= (uint16_t)*p << 8U;
 80013d2:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80013d6:	6862      	ldr	r2, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 80013d8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80013dc:	6856      	ldr	r6, [r2, #4]
 80013de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013e2:	4620      	mov	r0, r4
 80013e4:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80013e8:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 80013ec:	47b0      	blx	r6
    if (dp == NULL) {
 80013ee:	2800      	cmp	r0, #0
 80013f0:	f43f af59 	beq.w	80012a6 <_usb_ep0setup+0xe6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80013f4:	e9d0 3200 	ldrd	r3, r2, [r0]
 80013f8:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 80013fc:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8001400:	6725      	str	r5, [r4, #112]	; 0x70
    return true;
 8001402:	e706      	b.n	8001212 <_usb_ep0setup+0x52>
    if (usbp->ep0n != 0U) {
 8001404:	b1bb      	cbz	r3, 8001436 <_usb_ep0setup+0x276>
      usbp->ep0state = USB_EP0_IN_TX;
 8001406:	2209      	movs	r2, #9
 8001408:	2320      	movs	r3, #32
 800140a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800140e:	f383 8811 	msr	BASEPRI, r3
  isp->txcnt  = 0;
 8001412:	2500      	movs	r5, #0
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001414:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  isp = usbp->epc[ep]->in_state;
 8001418:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800141a:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 800141c:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001424:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001426:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff fc70 	bl	8000d10 <usb_lld_start_in>
 8001430:	f385 8811 	msr	BASEPRI, r5
}
 8001434:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001436:	2214      	movs	r2, #20
 8001438:	2320      	movs	r3, #32
 800143a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800143e:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8001442:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8001444:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001446:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001448:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
  osp->rxcnt  = 0;
 8001454:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001458:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 800145a:	f7ff fc99 	bl	8000d90 <usb_lld_start_out>
 800145e:	f385 8811 	msr	BASEPRI, r5
}
 8001462:	bd70      	pop	{r4, r5, r6, pc}
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001464:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8001468:	f43f af1d 	beq.w	80012a6 <_usb_ep0setup+0xe6>
 800146c:	2a10      	cmp	r2, #16
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800146e:	f04f 0502 	mov.w	r5, #2
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	f47f af50 	bne.w	800131a <_usb_ep0setup+0x15a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <_usb_ep0setup+0x2e4>)
 800147c:	e9c4 511b 	strd	r5, r1, [r4, #108]	; 0x6c
 8001480:	66a2      	str	r2, [r4, #104]	; 0x68
        return true;
 8001482:	e6c6      	b.n	8001212 <_usb_ep0setup+0x52>
      usbp->status |= 2U;
 8001484:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001488:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 800148c:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001490:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8001492:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8001496:	e764      	b.n	8001362 <_usb_ep0setup+0x1a2>
 8001498:	40005c00 	.word	0x40005c00
 800149c:	08003610 	.word	0x08003610
 80014a0:	080038c8 	.word	0x080038c8
 80014a4:	080036c8 	.word	0x080036c8
 80014a8:	2320      	movs	r3, #32
 80014aa:	f383 8811 	msr	BASEPRI, r3
  usbp->pmnext = 64;
 80014ae:	2140      	movs	r1, #64	; 0x40
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80014b0:	2201      	movs	r2, #1
    EPR_TOGGLE(i, 0);
 80014b2:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 80014b6:	68a3      	ldr	r3, [r4, #8]
    usbp->epc[i] = NULL;
 80014b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80014bc:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80014c0:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  usbp->transmitting &= 1U;
 80014c4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    usbp->epc[i] = NULL;
 80014c8:	6125      	str	r5, [r4, #16]
  usbp->transmitting &= 1U;
 80014ca:	60a3      	str	r3, [r4, #8]
  usbp->pmnext = 64;
 80014cc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    EPR_TOGGLE(i, 0);
 80014d0:	0093      	lsls	r3, r2, #2
 80014d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80014da:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80014dc:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 80014de:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80014e0:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 80014e2:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 80014e4:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80014e6:	d1f3      	bne.n	80014d0 <_usb_ep0setup+0x310>
 80014e8:	2300      	movs	r3, #0
 80014ea:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 80014ee:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80014f0:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 80014f2:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 80014f6:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f43f af1e 	beq.w	800133c <_usb_ep0setup+0x17c>
 8001500:	4620      	mov	r0, r4
 8001502:	4798      	blx	r3
 8001504:	e71a      	b.n	800133c <_usb_ep0setup+0x17c>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001506:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800150a:	2b01      	cmp	r3, #1
 800150c:	f47f aecb 	bne.w	80012a6 <_usb_ep0setup+0xe6>
      usbp->status &= ~2U;
 8001510:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001514:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8001518:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800151c:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 800151e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8001522:	e71e      	b.n	8001362 <_usb_ep0setup+0x1a2>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001524:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f aebc 	bne.w	80012a6 <_usb_ep0setup+0xe6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800152e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001532:	f012 030f 	ands.w	r3, r2, #15
 8001536:	d017      	beq.n	8001568 <_usb_ep0setup+0x3a8>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800153e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001542:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	d13e      	bne.n	80015c8 <_usb_ep0setup+0x408>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 800154a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800154e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001552:	d009      	beq.n	8001568 <_usb_ep0setup+0x3a8>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800155a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800155e:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8001562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001566:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001568:	2300      	movs	r3, #0
 800156a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 800156e:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8001570:	e6f7      	b.n	8001362 <_usb_ep0setup+0x1a2>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8001572:	4b24      	ldr	r3, [pc, #144]	; (8001604 <_usb_ep0setup+0x444>)
 8001574:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8001578:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 800157a:	e6f2      	b.n	8001362 <_usb_ep0setup+0x1a2>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800157c:	2301      	movs	r3, #1
 800157e:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8001582:	e9c4 351b 	strd	r3, r5, [r4, #108]	; 0x6c
 8001586:	66a2      	str	r2, [r4, #104]	; 0x68
    return true;
 8001588:	e643      	b.n	8001212 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800158a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae89 	bne.w	80012a6 <_usb_ep0setup+0xe6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001594:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001598:	f012 030f 	ands.w	r3, r2, #15
 800159c:	d0e4      	beq.n	8001568 <_usb_ep0setup+0x3a8>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015a4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80015a8:	f012 0f80 	tst.w	r2, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	d11c      	bne.n	80015ea <_usb_ep0setup+0x42a>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80015b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015b8:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80015bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e7cf      	b.n	8001568 <_usb_ep0setup+0x3a8>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80015c8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80015cc:	2a30      	cmp	r2, #48	; 0x30
 80015ce:	d0cb      	beq.n	8001568 <_usb_ep0setup+0x3a8>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80015d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015da:	f082 0220 	eor.w	r2, r2, #32
 80015de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e7be      	b.n	8001568 <_usb_ep0setup+0x3a8>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80015ea:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80015ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f2:	f082 0210 	eor.w	r2, r2, #16
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e7b2      	b.n	8001568 <_usb_ep0setup+0x3a8>
 8001602:	bf00      	nop
 8001604:	08001641 	.word	0x08001641
	...

08001610 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001612:	2501      	movs	r5, #1
  isp->txcnt  = 0;
 8001614:	2700      	movs	r7, #0
  isp = usbp->epc[ep]->in_state;
 8001616:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800161a:	f8dc e00c 	ldr.w	lr, [ip, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800161e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001622:	f8de 6014 	ldr.w	r6, [lr, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001626:	408d      	lsls	r5, r1
 8001628:	ea45 050c 	orr.w	r5, r5, ip
 800162c:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 800162e:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 8001632:	60b2      	str	r2, [r6, #8]
}
 8001634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb_lld_start_in(usbp, ep);
 8001638:	f7ff bb6a 	b.w	8000d10 <usb_lld_start_in>
 800163c:	0000      	movs	r0, r0
	...

08001640 <set_address>:
  usbp->address = usbp->setup[2];
 8001640:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001644:	6842      	ldr	r2, [r0, #4]
  usbp->address = usbp->setup[2];
 8001646:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800164a:	4906      	ldr	r1, [pc, #24]	; (8001664 <set_address+0x24>)
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 8001652:	b510      	push	{r4, lr}
 8001654:	4604      	mov	r4, r0
 8001656:	64cb      	str	r3, [r1, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001658:	b10a      	cbz	r2, 800165e <set_address+0x1e>
 800165a:	2101      	movs	r1, #1
 800165c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800165e:	2303      	movs	r3, #3
 8001660:	7023      	strb	r3, [r4, #0]
}
 8001662:	bd10      	pop	{r4, pc}
 8001664:	40005c00 	.word	0x40005c00
	...

08001670 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
	...

08001680 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001680:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
bool sduRequestsHook(USBDriver *usbp) {
 8001684:	4603      	mov	r3, r0
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001686:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800168a:	2a20      	cmp	r2, #32
 800168c:	d001      	beq.n	8001692 <sduRequestsHook+0x12>
  return false;
 800168e:	2000      	movs	r0, #0
}
 8001690:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001692:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8001696:	2a21      	cmp	r2, #33	; 0x21
 8001698:	d809      	bhi.n	80016ae <sduRequestsHook+0x2e>
 800169a:	2a1f      	cmp	r2, #31
 800169c:	d9f7      	bls.n	800168e <sduRequestsHook+0xe>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800169e:	2007      	movs	r0, #7
 80016a0:	2100      	movs	r1, #0
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <sduRequestsHook+0x40>)
 80016a4:	e9c3 011b 	strd	r0, r1, [r3, #108]	; 0x6c
 80016a8:	669a      	str	r2, [r3, #104]	; 0x68
      return true;
 80016aa:	2001      	movs	r0, #1
 80016ac:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80016ae:	2a22      	cmp	r2, #34	; 0x22
 80016b0:	d1ed      	bne.n	800168e <sduRequestsHook+0xe>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80016b2:	2200      	movs	r2, #0
      return true;
 80016b4:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80016b6:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
 80016ba:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20001040 	.word	0x20001040
	...

080016d0 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr
	...

080016e0 <_ctl.lto_priv.1>:
 80016e0:	2000      	movs	r0, #0
 80016e2:	4770      	bx	lr
	...

080016f0 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80016f2:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 80016f6:	680a      	ldr	r2, [r1, #0]
 80016f8:	7813      	ldrb	r3, [r2, #0]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d102      	bne.n	8001704 <sdu_start_receive+0x14>
 80016fe:	7a03      	ldrb	r3, [r0, #8]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d001      	beq.n	8001708 <sdu_start_receive+0x18>
    return true;
 8001704:	2001      	movs	r0, #1
}
 8001706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001708:	2301      	movs	r3, #1
 800170a:	7949      	ldrb	r1, [r1, #5]
 800170c:	8955      	ldrh	r5, [r2, #10]
 800170e:	fa03 f401 	lsl.w	r4, r3, r1
 8001712:	422c      	tst	r4, r5
 8001714:	b2a7      	uxth	r7, r4
 8001716:	d1f5      	bne.n	8001704 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001718:	e9d0 6407 	ldrd	r6, r4, [r0, #28]
 800171c:	42a6      	cmp	r6, r4
 800171e:	d011      	beq.n	8001744 <sdu_start_receive+0x54>
  osp->rxsize = n;
 8001720:	f44f 7c80 	mov.w	ip, #256	; 0x100
  osp->rxcnt  = 0;
 8001724:	2400      	movs	r4, #0
  osp = usbp->epc[ep]->out_state;
 8001726:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800172a:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800172c:	433d      	orrs	r5, r7
  osp = usbp->epc[ep]->out_state;
 800172e:	699b      	ldr	r3, [r3, #24]
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8001730:	3604      	adds	r6, #4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001732:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8001734:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 8001736:	e9c3 c400 	strd	ip, r4, [r3]
  osp->rxbuf  = buf;
 800173a:	609e      	str	r6, [r3, #8]
  usb_lld_start_out(usbp, ep);
 800173c:	f7ff fb28 	bl	8000d90 <usb_lld_start_out>
  return false;
 8001740:	4620      	mov	r0, r4
}
 8001742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8001744:	6980      	ldr	r0, [r0, #24]
 8001746:	2800      	cmp	r0, #0
 8001748:	d0ea      	beq.n	8001720 <sdu_start_receive+0x30>
 800174a:	e7db      	b.n	8001704 <sdu_start_receive+0x14>
 800174c:	0000      	movs	r0, r0
	...

08001750 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001750:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001752:	f7ff bfcd 	b.w	80016f0 <sdu_start_receive>
 8001756:	bf00      	nop
	...

08001760 <flashGetSectorOffset>:
 * @return the offset of the sector
 */
flash_offset_t flashGetSectorOffset(BaseFlash *devp,
                                    flash_sector_t sector) {
  flash_offset_t offset;
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8001760:	6803      	ldr	r3, [r0, #0]
                                    flash_sector_t sector) {
 8001762:	b510      	push	{r4, lr}
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8001764:	685b      	ldr	r3, [r3, #4]
                                    flash_sector_t sector) {
 8001766:	460c      	mov	r4, r1
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8001768:	4798      	blx	r3

  osalDbgAssert(sector < descriptor->sectors_count, "invalid sector");

  if (descriptor->sectors != NULL) {
 800176a:	68c3      	ldr	r3, [r0, #12]
 800176c:	b113      	cbz	r3, 8001774 <flashGetSectorOffset+0x14>
    offset = descriptor->sectors[sector].offset;
 800176e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  else {
    offset = (flash_offset_t)sector * (flash_offset_t)descriptor->sectors_size;
  }

  return offset;
}
 8001772:	bd10      	pop	{r4, pc}
    offset = (flash_offset_t)sector * (flash_offset_t)descriptor->sectors_size;
 8001774:	6900      	ldr	r0, [r0, #16]
 8001776:	fb00 f004 	mul.w	r0, r0, r4
}
 800177a:	bd10      	pop	{r4, pc}
 800177c:	0000      	movs	r0, r0
	...

08001780 <efl_lld_verify_erase>:
  osalDbgCheck(sector < efl_lld_descriptor.sectors_count);
  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No verifying while erasing.*/
  if (devp->state == FLASH_ERASE) {
 8001780:	7903      	ldrb	r3, [r0, #4]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d013      	beq.n	80017ae <efl_lld_verify_erase+0x2e>
flash_error_t efl_lld_verify_erase(void *instance, flash_sector_t sector) {
 8001786:	b510      	push	{r4, lr}
 8001788:	4604      	mov	r4, r0
    return FLASH_BUSY_ERASING;
  }

  /* Address of the sector.*/
  address = (uint32_t *)(efl_lld_descriptor.address +
                         flashGetSectorOffset(getBaseFlash(devp), sector));
 800178a:	f7ff ffe9 	bl	8001760 <flashGetSectorOffset>
  address = (uint32_t *)(efl_lld_descriptor.address +
 800178e:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000

  /* FLASH_READY state while the operation is performed.*/
  devp->state = FLASH_READ;

  /* Scanning the sector space.*/
  for (i = 0U; i < STM32_FLASH_SECTOR_SIZE / sizeof(uint32_t); i++) {
 8001792:	1f0b      	subs	r3, r1, #4
 8001794:	f501 717f 	add.w	r1, r1, #1020	; 0x3fc
 8001798:	e001      	b.n	800179e <efl_lld_verify_erase+0x1e>
 800179a:	428b      	cmp	r3, r1
 800179c:	d009      	beq.n	80017b2 <efl_lld_verify_erase+0x32>
    if (*address != 0xFFFFFFFFU) {
 800179e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80017a2:	3201      	adds	r2, #1
 80017a4:	d0f9      	beq.n	800179a <efl_lld_verify_erase+0x1a>
    }
    address++;
  }

  /* Ready state again.*/
  devp->state = FLASH_READY;
 80017a6:	2302      	movs	r3, #2
 80017a8:	7123      	strb	r3, [r4, #4]
      err = FLASH_ERROR_VERIFY;
 80017aa:	2005      	movs	r0, #5

  return err;
}
 80017ac:	bd10      	pop	{r4, pc}
    return FLASH_BUSY_ERASING;
 80017ae:	2001      	movs	r0, #1
}
 80017b0:	4770      	bx	lr
  devp->state = FLASH_READY;
 80017b2:	2302      	movs	r3, #2
 80017b4:	7123      	strb	r3, [r4, #4]
  flash_error_t err = FLASH_NO_ERROR;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	bd10      	pop	{r4, pc}
 80017ba:	bf00      	nop
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <efl_lld_start_erase_sector>:
                                         flash_sector_t sector) {
 80017c0:	b538      	push	{r3, r4, r5, lr}
  if (devp->state == FLASH_ERASE) {
 80017c2:	7903      	ldrb	r3, [r0, #4]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d015      	beq.n	80017f4 <efl_lld_start_erase_sector+0x34>
  devp->state = FLASH_ERASE;
 80017c8:	2505      	movs	r5, #5
  eflp->flash->SR = 0x0000001FU;
 80017ca:	221f      	movs	r2, #31
  stm32_flash_clear_status(devp);
 80017cc:	68c3      	ldr	r3, [r0, #12]
  devp->state = FLASH_ERASE;
 80017ce:	7105      	strb	r5, [r0, #4]
  eflp->flash->SR = 0x0000001FU;
 80017d0:	60da      	str	r2, [r3, #12]
  devp->flash->CR |= FLASH_CR_PER;
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	4604      	mov	r4, r0
 80017d6:	f042 0202 	orr.w	r2, r2, #2
 80017da:	611a      	str	r2, [r3, #16]
                         flashGetSectorOffset(getBaseFlash(devp), sector));
 80017dc:	f7ff ffc0 	bl	8001760 <flashGetSectorOffset>
  devp->flash->AR = (uint32_t)(efl_lld_descriptor.address +
 80017e0:	68e3      	ldr	r3, [r4, #12]
 80017e2:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 80017e6:	6158      	str	r0, [r3, #20]
  devp->flash->CR |= FLASH_CR_STRT;
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	2000      	movs	r0, #0
 80017ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bd38      	pop	{r3, r4, r5, pc}
    return FLASH_BUSY_ERASING;
 80017f4:	2001      	movs	r0, #1
}
 80017f6:	bd38      	pop	{r3, r4, r5, pc}
	...

08001800 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001800:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001802:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8001806:	4282      	cmp	r2, r0
 8001808:	d003      	beq.n	8001812 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800180a:	f850 3b04 	ldr.w	r3, [r0], #4
 800180e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001810:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f8      	beq.n	800180a <obqGetFullBufferI+0xa>
    return NULL;
 8001818:	2000      	movs	r0, #0
 800181a:	4770      	bx	lr
 800181c:	0000      	movs	r0, r0
	...

08001820 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8001820:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001822:	6b44      	ldr	r4, [r0, #52]	; 0x34
static void obnotify(io_buffers_queue_t *bqp) {
 8001824:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001826:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	7819      	ldrb	r1, [r3, #0]
 800182e:	2904      	cmp	r1, #4
 8001830:	d102      	bne.n	8001838 <obnotify+0x18>
 8001832:	7a21      	ldrb	r1, [r4, #8]
 8001834:	2902      	cmp	r1, #2
 8001836:	d001      	beq.n	800183c <obnotify+0x1c>
}
 8001838:	b002      	add	sp, #8
 800183a:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800183c:	2101      	movs	r1, #1
 800183e:	7910      	ldrb	r0, [r2, #4]
 8001840:	891a      	ldrh	r2, [r3, #8]
 8001842:	fa01 f300 	lsl.w	r3, r1, r0
 8001846:	4213      	tst	r3, r2
 8001848:	d1f6      	bne.n	8001838 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800184a:	a901      	add	r1, sp, #4
 800184c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001850:	f7ff ffd6 	bl	8001800 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001854:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001858:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800185a:	7919      	ldrb	r1, [r3, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	9b01      	ldr	r3, [sp, #4]
 8001860:	f7ff fed6 	bl	8001610 <usbStartTransmitI>
 8001864:	e7e8      	b.n	8001838 <obnotify+0x18>
 8001866:	bf00      	nop
	...

08001870 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001870:	b510      	push	{r4, lr}
 8001872:	2320      	movs	r3, #32
 8001874:	b082      	sub	sp, #8
 8001876:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800187a:	4c1f      	ldr	r4, [pc, #124]	; (80018f8 <sof_handler+0x88>)
 800187c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	2904      	cmp	r1, #4
 8001886:	d102      	bne.n	800188e <sof_handler+0x1e>
 8001888:	7a21      	ldrb	r1, [r4, #8]
 800188a:	2902      	cmp	r1, #2
 800188c:	d004      	beq.n	8001898 <sof_handler+0x28>
 800188e:	2300      	movs	r3, #0
 8001890:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 8001894:	b002      	add	sp, #8
 8001896:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001898:	2101      	movs	r1, #1
 800189a:	7910      	ldrb	r0, [r2, #4]
 800189c:	891a      	ldrh	r2, [r3, #8]
 800189e:	fa01 f300 	lsl.w	r3, r1, r0
 80018a2:	4213      	tst	r3, r2
 80018a4:	d1f3      	bne.n	800188e <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80018a6:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d1ef      	bne.n	800188e <sof_handler+0x1e>
 80018ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d0ec      	beq.n	800188e <sof_handler+0x1e>
 80018b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d0e9      	beq.n	800188e <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80018ba:	3a04      	subs	r2, #4

    if (size > 0U) {
 80018bc:	1ad2      	subs	r2, r2, r3
 80018be:	d0e6      	beq.n	800188e <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80018c0:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 80018c2:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 80018c6:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 80018c8:	428b      	cmp	r3, r1
      obqp->bwrptr += obqp->bsize;
 80018ca:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 80018cc:	bf28      	it	cs
 80018ce:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
      obqp->bcounter--;
 80018d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
        obqp->bwrptr = obqp->buffers;
 80018d2:	bf28      	it	cs
 80018d4:	6563      	strcs	r3, [r4, #84]	; 0x54
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80018d6:	2300      	movs	r3, #0
      obqp->bcounter--;
 80018d8:	3a01      	subs	r2, #1
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80018da:	a901      	add	r1, sp, #4
 80018dc:	4807      	ldr	r0, [pc, #28]	; (80018fc <sof_handler+0x8c>)
 80018de:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 80018e0:	66e3      	str	r3, [r4, #108]	; 0x6c
 80018e2:	f7ff ff8d 	bl	8001800 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80018e6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80018ea:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80018ec:	7919      	ldrb	r1, [r3, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	9b01      	ldr	r3, [sp, #4]
 80018f2:	f7ff fe8d 	bl	8001610 <usbStartTransmitI>
 80018f6:	e7ca      	b.n	800188e <sof_handler+0x1e>
 80018f8:	2000110c 	.word	0x2000110c
 80018fc:	20001150 	.word	0x20001150

08001900 <__sch_wakeup>:
 8001900:	2320      	movs	r3, #32
 8001902:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001906:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 800190a:	2b07      	cmp	r3, #7
 800190c:	d80d      	bhi.n	800192a <__sch_wakeup+0x2a>
 800190e:	e8df f003 	tbb	[pc, r3]
 8001912:	0c27      	.short	0x0c27
 8001914:	0408230c 	.word	0x0408230c
 8001918:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800191a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800191c:	6893      	ldr	r3, [r2, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8001922:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001926:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8001928:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800192a:	2200      	movs	r2, #0
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 800192c:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
 800192e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001932:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8001934:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 8001936:	628c      	str	r4, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8001938:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    pqp = pqp->next;
 800193c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4282      	cmp	r2, r0
 8001942:	d2fb      	bcs.n	800193c <__sch_wakeup+0x3c>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2000      	movs	r0, #0
 8001948:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800194c:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800194e:	6059      	str	r1, [r3, #4]
 8001950:	f380 8811 	msr	BASEPRI, r0
}
 8001954:	bc10      	pop	{r4}
 8001956:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001958:	2200      	movs	r2, #0
 800195a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800195c:	601a      	str	r2, [r3, #0]
    break;
 800195e:	e7e4      	b.n	800192a <__sch_wakeup+0x2a>
 8001960:	2300      	movs	r3, #0
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	4770      	bx	lr
	...

08001970 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001970:	2200      	movs	r2, #0
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001972:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001974:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8001976:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 800197a:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	428a      	cmp	r2, r1
 8001980:	d2fb      	bcs.n	800197a <chSchReadyI+0xa>
  p->prev       = pqp->prev;
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001988:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800198a:	6058      	str	r0, [r3, #4]
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001990:	b538      	push	{r3, r4, r5, lr}
 8001992:	4604      	mov	r4, r0
  return (bool)(qp->next != qp);
 8001994:	6800      	ldr	r0, [r0, #0]

  while (ch_queue_notempty(&tqp->queue)) {
 8001996:	4284      	cmp	r4, r0
 8001998:	d00a      	beq.n	80019b0 <chThdDequeueAllI.constprop.0+0x20>

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800199a:	f06f 0501 	mvn.w	r5, #1
  qp->next       = p->next;
 800199e:	6803      	ldr	r3, [r0, #0]
 80019a0:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 80019a2:	605c      	str	r4, [r3, #4]
 80019a4:	6285      	str	r5, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 80019a6:	f7ff ffe3 	bl	8001970 <chSchReadyI>
  return (bool)(qp->next != qp);
 80019aa:	6820      	ldr	r0, [r4, #0]
 80019ac:	42a0      	cmp	r0, r4
 80019ae:	d1f6      	bne.n	800199e <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80019b0:	bd38      	pop	{r3, r4, r5, pc}
 80019b2:	bf00      	nop
	...

080019c0 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80019c0:	4603      	mov	r3, r0
 80019c2:	6800      	ldr	r0, [r0, #0]
  if (ch_queue_notempty(&tqp->queue)) {
 80019c4:	4283      	cmp	r3, r0
 80019c6:	d006      	beq.n	80019d6 <chThdDequeueNextI.constprop.0+0x16>
  tp->u.rdymsg = msg;
 80019c8:	2100      	movs	r1, #0
  qp->next       = p->next;
 80019ca:	6802      	ldr	r2, [r0, #0]
 80019cc:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 80019ce:	6053      	str	r3, [r2, #4]
 80019d0:	6281      	str	r1, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 80019d2:	f7ff bfcd 	b.w	8001970 <chSchReadyI>
}
 80019d6:	4770      	bx	lr
	...

080019e0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80019e2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80019e4:	42a0      	cmp	r0, r4
 80019e6:	d021      	beq.n	8001a2c <chEvtBroadcastFlagsI+0x4c>
 80019e8:	4607      	mov	r7, r0
 80019ea:	460d      	mov	r5, r1
    tp->u.rdymsg = MSG_OK;
 80019ec:	2600      	movs	r6, #0
 80019ee:	e004      	b.n	80019fa <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80019f0:	2a0b      	cmp	r2, #11
 80019f2:	d01c      	beq.n	8001a2e <chEvtBroadcastFlagsI+0x4e>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80019f4:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80019f6:	42a7      	cmp	r7, r4
 80019f8:	d018      	beq.n	8001a2c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 80019fa:	68e3      	ldr	r3, [r4, #12]
 80019fc:	432b      	orrs	r3, r5
 80019fe:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001a00:	b115      	cbz	r5, 8001a08 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001a02:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001a04:	421d      	tst	r5, r3
 8001a06:	d0f5      	beq.n	80019f4 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8001a08:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8001a0c:	6b81      	ldr	r1, [r0, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001a0e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
  tp->epending |= events;
 8001a12:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001a14:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001a16:	6383      	str	r3, [r0, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001a18:	d1ea      	bne.n	80019f0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001a1a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001a1c:	4213      	tst	r3, r2
 8001a1e:	d0e9      	beq.n	80019f4 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001a20:	6286      	str	r6, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 8001a22:	f7ff ffa5 	bl	8001970 <chSchReadyI>
    elp = elp->next;
 8001a26:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001a28:	42a7      	cmp	r7, r4
 8001a2a:	d1e6      	bne.n	80019fa <chEvtBroadcastFlagsI+0x1a>
  }
}
 8001a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001a2e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001a30:	ea32 0303 	bics.w	r3, r2, r3
 8001a34:	d1de      	bne.n	80019f4 <chEvtBroadcastFlagsI+0x14>
 8001a36:	e7f3      	b.n	8001a20 <chEvtBroadcastFlagsI+0x40>
	...

08001a40 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001a40:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001a42:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001a44:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001a48:	b194      	cbz	r4, 8001a70 <sduDataReceived+0x30>
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001a50:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	7952      	ldrb	r2, [r2, #5]
 8001a58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8001a62:	b935      	cbnz	r5, 8001a72 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff fe43 	bl	80016f0 <sdu_start_receive>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f383 8811 	msr	BASEPRI, r3
}
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001a72:	2104      	movs	r1, #4
 8001a74:	1860      	adds	r0, r4, r1
 8001a76:	f7ff ffb3 	bl	80019e0 <chEvtBroadcastFlagsI>
  *((size_t *)ibqp->bwrptr) = size;
 8001a7a:	69e3      	ldr	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 8001a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 8001a7e:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8001a80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8001a82:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001a84:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 8001a86:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8001a88:	61e3      	str	r3, [r4, #28]
    ibqp->bwrptr = ibqp->buffers;
 8001a8a:	bf28      	it	cs
 8001a8c:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8001a8e:	f102 0201 	add.w	r2, r2, #1
 8001a92:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001a94:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 8001a98:	bf28      	it	cs
 8001a9a:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 8001a9c:	f7ff ff90 	bl	80019c0 <chThdDequeueNextI.constprop.0>
 8001aa0:	e7e0      	b.n	8001a64 <sduDataReceived+0x24>
 8001aa2:	bf00      	nop
	...

08001ab0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001ab4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001ab8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001aba:	b082      	sub	sp, #8
  if (sdup == NULL) {
 8001abc:	b1f6      	cbz	r6, 8001afc <sduDataTransmitted+0x4c>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001ac8:	2108      	movs	r1, #8
 8001aca:	1d30      	adds	r0, r6, #4
 8001acc:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 8001ad0:	f7ff ff86 	bl	80019e0 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b993      	cbnz	r3, 8001b02 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001adc:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8001ae0:	4640      	mov	r0, r8
 8001ae2:	a901      	add	r1, sp, #4
 8001ae4:	f7ff fe8c 	bl	8001800 <obqGetFullBufferI>
  if (buf != NULL) {
 8001ae8:	4602      	mov	r2, r0
 8001aea:	b320      	cbz	r0, 8001b36 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 8001aec:	4629      	mov	r1, r5
 8001aee:	4620      	mov	r0, r4
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	f7ff fd8d 	bl	8001610 <usbStartTransmitI>
 8001af6:	2300      	movs	r3, #0
 8001af8:	f383 8811 	msr	BASEPRI, r3
}
 8001afc:	b002      	add	sp, #8
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  obqp->brdptr += obqp->bsize;
 8001b02:	6db3      	ldr	r3, [r6, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8001b04:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001b08:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 8001b0a:	4293      	cmp	r3, r2
  obqp->bcounter++;
 8001b0c:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001b0e:	65b3      	str	r3, [r6, #88]	; 0x58
    obqp->brdptr = obqp->buffers;
 8001b10:	bf28      	it	cs
 8001b12:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8001b14:	f101 0101 	add.w	r1, r1, #1
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001b18:	f106 0844 	add.w	r8, r6, #68	; 0x44
  chThdDequeueNextI(tqp, msg);
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	6531      	str	r1, [r6, #80]	; 0x50
    obqp->brdptr = obqp->buffers;
 8001b20:	bf28      	it	cs
 8001b22:	65b3      	strcs	r3, [r6, #88]	; 0x58
 8001b24:	f7ff ff4c 	bl	80019c0 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001b28:	4640      	mov	r0, r8
 8001b2a:	a901      	add	r1, sp, #4
 8001b2c:	f7ff fe68 	bl	8001800 <obqGetFullBufferI>
  if (buf != NULL) {
 8001b30:	4602      	mov	r2, r0
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d1da      	bne.n	8001aec <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	2a00      	cmp	r2, #0
 8001b3e:	d0da      	beq.n	8001af6 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001b40:	8a1b      	ldrh	r3, [r3, #16]
 8001b42:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1d6      	bne.n	8001af6 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8001b50:	f7ff fd5e 	bl	8001610 <usbStartTransmitI>
 8001b54:	e7cf      	b.n	8001af6 <sduDataTransmitted+0x46>
 8001b56:	bf00      	nop
	...

08001b60 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001b60:	b430      	push	{r4, r5}
  ntp->state = CH_STATE_CURRENT;
 8001b62:	2501      	movs	r5, #1
  thread_t *otp = __instance_get_currthread(oip);
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <chSchGoSleepS+0x24>)
 8001b66:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001b68:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 8001b6a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8001b6e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(ntp, otp);
 8001b70:	4610      	mov	r0, r2
  pqp->next->prev = pqp;
 8001b72:	6063      	str	r3, [r4, #4]
  ntp->state = CH_STATE_CURRENT;
 8001b74:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
  pqp->next       = p->next;
 8001b78:	601c      	str	r4, [r3, #0]
}
 8001b7a:	bc30      	pop	{r4, r5}
  __instance_set_currthread(oip, ntp);
 8001b7c:	60da      	str	r2, [r3, #12]
  chSysSwitch(ntp, otp);
 8001b7e:	f7fe bb5f 	b.w	8000240 <__port_switch>
 8001b82:	bf00      	nop
 8001b84:	20001628 	.word	0x20001628
	...

08001b90 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp = __instance_get_currthread(currcore);
 8001b94:	4c4e      	ldr	r4, [pc, #312]	; (8001cd0 <chSchGoSleepTimeoutS+0x140>)
  if (TIME_INFINITE != timeout) {
 8001b96:	1c4b      	adds	r3, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 8001b98:	68e7      	ldr	r7, [r4, #12]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001b9a:	b086      	sub	sp, #24
  if (TIME_INFINITE != timeout) {
 8001b9c:	d051      	beq.n	8001c42 <chSchGoSleepTimeoutS+0xb2>
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
 8001b9e:	4626      	mov	r6, r4
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
  vtp->func    = vtfunc;
  vtp->reload  = (sysinterval_t)0;
 8001ba0:	f04f 0e00 	mov.w	lr, #0
 8001ba4:	4684      	mov	ip, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001ba6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001baa:	f856 2f10 	ldr.w	r2, [r6, #16]!
 8001bae:	f8cd e014 	str.w	lr, [sp, #20]
 8001bb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  vtp->func    = vtfunc;
 8001bb4:	4d47      	ldr	r5, [pc, #284]	; (8001cd4 <chSchGoSleepTimeoutS+0x144>)
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8001bb6:	42b2      	cmp	r2, r6
  vtp->par     = par;
 8001bb8:	9704      	str	r7, [sp, #16]
 8001bba:	b29b      	uxth	r3, r3
  vtp->func    = vtfunc;
 8001bbc:	9503      	str	r5, [sp, #12]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8001bbe:	d067      	beq.n	8001c90 <chSchGoSleepTimeoutS+0x100>
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001bc0:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    if (delta < vtlp->dlist.next->delta) {
 8001bc4:	6895      	ldr	r5, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001bc6:	eba3 030e 	sub.w	r3, r3, lr
 8001bca:	b29b      	uxth	r3, r3
    if (delta < nowdelta) {
 8001bcc:	18cb      	adds	r3, r1, r3
 8001bce:	bf38      	it	cc
 8001bd0:	4619      	movcc	r1, r3
    if (delta < vtlp->dlist.next->delta) {
 8001bd2:	428d      	cmp	r5, r1
 8001bd4:	d910      	bls.n	8001bf8 <chSchGoSleepTimeoutS+0x68>
  return systime + (systime_t)interval;
 8001bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bda:	428b      	cmp	r3, r1
 8001bdc:	bf28      	it	cs
 8001bde:	460b      	movcs	r3, r1
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	bf2c      	ite	cs
 8001be4:	4473      	addcs	r3, lr
 8001be6:	f10e 0302 	addcc.w	r3, lr, #2
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
 8001bea:	428d      	cmp	r5, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	6343      	str	r3, [r0, #52]	; 0x34
 8001bf0:	d204      	bcs.n	8001bfc <chSchGoSleepTimeoutS+0x6c>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 8001bf2:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8001bf4:	1b49      	subs	r1, r1, r5
  while (likely(dlp->delta < delta)) {
 8001bf6:	6895      	ldr	r5, [r2, #8]
 8001bf8:	428d      	cmp	r5, r1
 8001bfa:	d3fa      	bcc.n	8001bf2 <chSchGoSleepTimeoutS+0x62>
  dlp->delta      = delta;
 8001bfc:	9102      	str	r1, [sp, #8]
  dlp->prev       = dlp->next->prev;
 8001bfe:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  dlp->delta -= delta;
 8001c06:	1a69      	subs	r1, r5, r1
  dlp->prev->next = dlp;
 8001c08:	466d      	mov	r5, sp
  dlp->prev       = dlp->next->prev;
 8001c0a:	e9cd 2300 	strd	r2, r3, [sp]
  dlp->prev->next = dlp;
 8001c0e:	601d      	str	r5, [r3, #0]
  dlhp->prev      = dlp;
 8001c10:	e9c2 5101 	strd	r5, r1, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 8001c14:	61a0      	str	r0, [r4, #24]
    chSchGoSleepS(newstate);
 8001c16:	4660      	mov	r0, ip
 8001c18:	f7ff ffa2 	bl	8001b60 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001c1c:	9b00      	ldr	r3, [sp, #0]
 8001c1e:	b163      	cbz	r3, 8001c3a <chSchGoSleepTimeoutS+0xaa>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8001c20:	6922      	ldr	r2, [r4, #16]
 8001c22:	42aa      	cmp	r2, r5
 8001c24:	d013      	beq.n	8001c4e <chSchGoSleepTimeoutS+0xbe>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 8001c26:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8001c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    vtp->dlist.next->delta += vtp->dlist.delta;
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	600b      	str	r3, [r1, #0]
 8001c32:	442a      	add	r2, r5
  dlp->next->prev = dlp->prev;
 8001c34:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8001c38:	61a0      	str	r0, [r4, #24]
}
 8001c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c3c:	b006      	add	sp, #24
 8001c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 8001c42:	f7ff ff8d 	bl	8001b60 <chSchGoSleepS>
}
 8001c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c48:	b006      	add	sp, #24
 8001c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 8001c4e:	2100      	movs	r1, #0
  dlhp->next       = dlp->next;
 8001c50:	6123      	str	r3, [r4, #16]
  dlhp->next->prev = dlhp;
 8001c52:	605e      	str	r6, [r3, #4]
  return (bool)(dlhp == dlhp->next);
 8001c54:	6922      	ldr	r2, [r4, #16]
 8001c56:	9100      	str	r1, [sp, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8001c58:	42b2      	cmp	r2, r6
 8001c5a:	d034      	beq.n	8001cc6 <chSchGoSleepTimeoutS+0x136>
  return (systime_t)STM32_ST_TIM->CNT;
 8001c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8001c60:	6893      	ldr	r3, [r2, #8]
 8001c62:	9d02      	ldr	r5, [sp, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 8001c64:	8ba1      	ldrh	r1, [r4, #28]
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8001c66:	442b      	add	r3, r5
 8001c68:	6093      	str	r3, [r2, #8]
 8001c6a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001c6c:	1a52      	subs	r2, r2, r1
 8001c6e:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d9e2      	bls.n	8001c3a <chSchGoSleepTimeoutS+0xaa>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 8001c74:	1a98      	subs	r0, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001c76:	2801      	cmp	r0, #1
 8001c78:	d923      	bls.n	8001cc2 <chSchGoSleepTimeoutS+0x132>
  }
  else {
    delta = nowdelta + delta;
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
    /* The delta could be too large for the physical timer to handle.*/
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8001c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	bf28      	it	cs
 8001c82:	4613      	movcs	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001c88:	440b      	add	r3, r1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c8e:	e7d4      	b.n	8001c3a <chSchGoSleepTimeoutS+0xaa>
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	428a      	cmp	r2, r1
 8001c96:	bf28      	it	cs
 8001c98:	460a      	movcs	r2, r1
 8001c9a:	2a02      	cmp	r2, #2
 8001c9c:	bf2c      	ite	cs
 8001c9e:	189a      	addcs	r2, r3, r2
 8001ca0:	1c9a      	addcc	r2, r3, #2
  dlp->next->prev = dlp;
 8001ca2:	466d      	mov	r5, sp
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001ca4:	f04f 0802 	mov.w	r8, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001ca8:	b292      	uxth	r2, r2
  dlp->next       = dlp->prev->next;
 8001caa:	e9cd 6600 	strd	r6, r6, [sp]
  dlp->delta      = delta;
 8001cae:	9102      	str	r1, [sp, #8]
  vtlp->lasttime = now;
 8001cb0:	83a3      	strh	r3, [r4, #28]
 8001cb2:	6342      	str	r2, [r0, #52]	; 0x34
  dlp->next->prev = dlp;
 8001cb4:	6165      	str	r5, [r4, #20]
  STM32_ST_TIM->SR     = 0;
 8001cb6:	f8c0 e010 	str.w	lr, [r0, #16]
  dlhp->next      = dlp;
 8001cba:	6125      	str	r5, [r4, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001cbc:	f8c0 800c 	str.w	r8, [r0, #12]
 8001cc0:	e7a9      	b.n	8001c16 <chSchGoSleepTimeoutS+0x86>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001cc2:	1c93      	adds	r3, r2, #2
 8001cc4:	e7de      	b.n	8001c84 <chSchGoSleepTimeoutS+0xf4>
  STM32_ST_TIM->DIER = 0U;
 8001cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cca:	60d9      	str	r1, [r3, #12]
 8001ccc:	e7b5      	b.n	8001c3a <chSchGoSleepTimeoutS+0xaa>
 8001cce:	bf00      	nop
 8001cd0:	20001628 	.word	0x20001628
 8001cd4:	08001901 	.word	0x08001901
	...

08001ce0 <chThdEnqueueTimeoutS>:
  return __sch_get_currthread();
 8001ce0:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <chThdEnqueueTimeoutS+0x24>)
 8001ce2:	68d2      	ldr	r2, [r2, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8001ce4:	b151      	cbz	r1, 8001cfc <chThdEnqueueTimeoutS+0x1c>
 8001ce6:	4603      	mov	r3, r0
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001ce8:	b410      	push	{r4}
  p->prev       = qp->prev;
 8001cea:	6844      	ldr	r4, [r0, #4]
 8001cec:	e9c2 0400 	strd	r0, r4, [r2]
  p->prev->next = p;
 8001cf0:	6022      	str	r2, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001cf2:	2004      	movs	r0, #4
}
 8001cf4:	bc10      	pop	{r4}
  qp->prev      = p;
 8001cf6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001cf8:	f7ff bf4a 	b.w	8001b90 <chSchGoSleepTimeoutS>
}
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20001628 	.word	0x20001628
	...

08001d10 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460f      	mov	r7, r1
 8001d16:	4616      	mov	r6, r2
 8001d18:	2320      	movs	r3, #32
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8001d1e:	e005      	b.n	8001d2c <oqPutTimeout+0x1c>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001d20:	4631      	mov	r1, r6
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff ffdc 	bl	8001ce0 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	db17      	blt.n	8001d5c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 8001d2c:	68a5      	ldr	r5, [r4, #8]
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d0f6      	beq.n	8001d20 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001d32:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001d34:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001d36:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001d38:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001d3a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001d3c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001d3e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001d40:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001d44:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001d46:	bf24      	itt	cs
 8001d48:	68e3      	ldrcs	r3, [r4, #12]
 8001d4a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001d4c:	69e3      	ldr	r3, [r4, #28]
 8001d4e:	b10b      	cbz	r3, 8001d54 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001d50:	4620      	mov	r0, r4
 8001d52:	4798      	blx	r3
 8001d54:	2000      	movs	r0, #0
 8001d56:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d5c:	f385 8811 	msr	BASEPRI, r5
 8001d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d62:	bf00      	nop
	...

08001d70 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001d70:	3030      	adds	r0, #48	; 0x30
 8001d72:	f7ff bfcd 	b.w	8001d10 <oqPutTimeout>
 8001d76:	bf00      	nop
	...

08001d80 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d84:	3030      	adds	r0, #48	; 0x30
 8001d86:	f7ff bfc3 	b.w	8001d10 <oqPutTimeout>
 8001d8a:	bf00      	nop
 8001d8c:	0000      	movs	r0, r0
	...

08001d90 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2320      	movs	r3, #32
 8001d94:	4605      	mov	r5, r0
 8001d96:	460e      	mov	r6, r1
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	e005      	b.n	8001daa <iqGetTimeout+0x1a>
 8001d9e:	4631      	mov	r1, r6
 8001da0:	4628      	mov	r0, r5
 8001da2:	f7ff ff9d 	bl	8001ce0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001da6:	2800      	cmp	r0, #0
 8001da8:	db18      	blt.n	8001ddc <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001daa:	68ac      	ldr	r4, [r5, #8]
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	d0f6      	beq.n	8001d9e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001db0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001db2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001db4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8001db6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001db8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001dba:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001dbc:	60ab      	str	r3, [r5, #8]
    iqp->q_rdptr = iqp->q_buffer;
 8001dbe:	bf28      	it	cs
 8001dc0:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001dc2:	61aa      	str	r2, [r5, #24]
 8001dc4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001dc6:	bf28      	it	cs
 8001dc8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001dca:	69eb      	ldr	r3, [r5, #28]
 8001dcc:	b10b      	cbz	r3, 8001dd2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001dce:	4628      	mov	r0, r5
 8001dd0:	4798      	blx	r3
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001dd8:	4620      	mov	r0, r4
}
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	f384 8811 	msr	BASEPRI, r4
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
 8001de2:	bf00      	nop
	...

08001df0 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001df0:	300c      	adds	r0, #12
 8001df2:	f7ff bfcd 	b.w	8001d90 <iqGetTimeout>
 8001df6:	bf00      	nop
	...

08001e00 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e04:	300c      	adds	r0, #12
 8001e06:	f7ff bfc3 	b.w	8001d90 <iqGetTimeout>
 8001e0a:	bf00      	nop
 8001e0c:	0000      	movs	r0, r0
	...

08001e10 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4604      	mov	r4, r0
 8001e14:	460d      	mov	r5, r1
 8001e16:	e007      	b.n	8001e28 <obqGetEmptyBufferTimeoutS+0x18>
    if (obqp->suspended) {
 8001e18:	7a23      	ldrb	r3, [r4, #8]
 8001e1a:	b983      	cbnz	r3, 8001e3e <obqGetEmptyBufferTimeoutS+0x2e>
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff ff5e 	bl	8001ce0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001e24:	2800      	cmp	r0, #0
 8001e26:	db09      	blt.n	8001e3c <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8001e28:	68e3      	ldr	r3, [r4, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f4      	beq.n	8001e18 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001e2e:	2000      	movs	r0, #0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001e30:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001e32:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001e34:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001e36:	440b      	add	r3, r1
 8001e38:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
}
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001e3e:	f06f 0001 	mvn.w	r0, #1
}
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e50 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	2320      	movs	r3, #32
 8001e54:	460d      	mov	r5, r1
 8001e56:	4604      	mov	r4, r0
 8001e58:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8001e5c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001e5e:	b306      	cbz	r6, 8001ea2 <obqPutTimeout+0x52>
  *obqp->ptr = b;
 8001e60:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8001e62:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001e66:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001e68:	4293      	cmp	r3, r2
  obqp->ptr++;
 8001e6a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8001e6c:	d315      	bcc.n	8001e9a <obqPutTimeout+0x4a>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001e6e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001e70:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001e72:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001e74:	601a      	str	r2, [r3, #0]
  obqp->bcounter--;
 8001e76:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8001e78:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8001e7e:	2200      	movs	r2, #0
  if (obqp->bwrptr >= obqp->btop) {
 8001e80:	69a1      	ldr	r1, [r4, #24]
  obqp->bwrptr += obqp->bsize;
 8001e82:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8001e84:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001e86:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001e88:	bf28      	it	cs
 8001e8a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->ptr = NULL;
 8001e8c:	62a2      	str	r2, [r4, #40]	; 0x28
    obqp->bwrptr = obqp->buffers;
 8001e8e:	bf28      	it	cs
 8001e90:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8001e92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e94:	b10b      	cbz	r3, 8001e9a <obqPutTimeout+0x4a>
    obqp->notify(obqp);
 8001e96:	4620      	mov	r0, r4
 8001e98:	4798      	blx	r3
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f380 8811 	msr	BASEPRI, r0
}
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	f7ff ffb4 	bl	8001e10 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001ea8:	b908      	cbnz	r0, 8001eae <obqPutTimeout+0x5e>
 8001eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eac:	e7d8      	b.n	8001e60 <obqPutTimeout+0x10>
 8001eae:	f386 8811 	msr	BASEPRI, r6
}
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ec0 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001ec0:	3044      	adds	r0, #68	; 0x44
 8001ec2:	f7ff bfc5 	b.w	8001e50 <obqPutTimeout>
 8001ec6:	bf00      	nop
	...

08001ed0 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed4:	3044      	adds	r0, #68	; 0x44
 8001ed6:	f7ff bfbb 	b.w	8001e50 <obqPutTimeout>
 8001eda:	bf00      	nop
 8001edc:	0000      	movs	r0, r0
	...

08001ee0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	460d      	mov	r5, r1
 8001ee6:	e007      	b.n	8001ef8 <ibqGetFullBufferTimeoutS+0x18>
    if (ibqp->suspended) {
 8001ee8:	7a23      	ldrb	r3, [r4, #8]
 8001eea:	b983      	cbnz	r3, 8001f0e <ibqGetFullBufferTimeoutS+0x2e>
 8001eec:	4629      	mov	r1, r5
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff fef6 	bl	8001ce0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	db09      	blt.n	8001f0c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8001ef8:	68e3      	ldr	r3, [r4, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f4      	beq.n	8001ee8 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001efe:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001f00:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001f02:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001f04:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001f06:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001f08:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
}
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001f0e:	f06f 0001 	mvn.w	r0, #1
}
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
	...

08001f20 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	2320      	movs	r3, #32
 8001f24:	4604      	mov	r4, r0
 8001f26:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8001f2a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001f2c:	b1ed      	cbz	r5, 8001f6a <ibqGetTimeout+0x4a>
  msg = (msg_t)*ibqp->ptr;
 8001f2e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8001f32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8001f34:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8001f36:	4295      	cmp	r5, r2
 8001f38:	d312      	bcc.n	8001f60 <ibqGetTimeout+0x40>
  if (ibqp->brdptr >= ibqp->btop) {
 8001f3a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->bcounter--;
 8001f3e:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001f40:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001f42:	3a01      	subs	r2, #1
 8001f44:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001f46:	2200      	movs	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8001f48:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001f4a:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001f4c:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001f4e:	bf28      	it	cs
 8001f50:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  ibqp->ptr = NULL;
 8001f52:	62a2      	str	r2, [r4, #40]	; 0x28
    ibqp->brdptr = ibqp->buffers;
 8001f54:	bf28      	it	cs
 8001f56:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8001f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f5a:	b10b      	cbz	r3, 8001f60 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4798      	blx	r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	f383 8811 	msr	BASEPRI, r3
}
 8001f66:	4630      	mov	r0, r6
 8001f68:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001f6a:	f7ff ffb9 	bl	8001ee0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001f6e:	4606      	mov	r6, r0
 8001f70:	b908      	cbnz	r0, 8001f76 <ibqGetTimeout+0x56>
 8001f72:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001f74:	e7db      	b.n	8001f2e <ibqGetTimeout+0xe>
 8001f76:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8001f7a:	e7f4      	b.n	8001f66 <ibqGetTimeout+0x46>
 8001f7c:	0000      	movs	r0, r0
	...

08001f80 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001f80:	300c      	adds	r0, #12
 8001f82:	f7ff bfcd 	b.w	8001f20 <ibqGetTimeout>
 8001f86:	bf00      	nop
	...

08001f90 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f94:	300c      	adds	r0, #12
 8001f96:	f7ff bfc3 	b.w	8001f20 <ibqGetTimeout>
 8001f9a:	bf00      	nop
 8001f9c:	0000      	movs	r0, r0
	...

08001fa0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001fa0:	b508      	push	{r3, lr}
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001faa:	2008      	movs	r0, #8
 8001fac:	f7ff fdf0 	bl	8001b90 <chSchGoSleepTimeoutS>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f383 8811 	msr	BASEPRI, r3
}
 8001fb6:	bd08      	pop	{r3, pc}
	...

08001fc0 <ThreadBlink>:
static __attribute__((noreturn)) THD_FUNCTION(ThreadBlink, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOC, 13);
 8001fc0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8001fc4:	462e      	mov	r6, r5
static __attribute__((noreturn)) THD_FUNCTION(ThreadBlink, arg) {
 8001fc6:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <ThreadBlink+0x28>)
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <ThreadBlink+0x2c>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
    palClearPad(GPIOC, 13);
 8001fce:	4c08      	ldr	r4, [pc, #32]	; (8001ff0 <ThreadBlink+0x30>)
 8001fd0:	61da      	str	r2, [r3, #28]
    chThdSleepMilliseconds(1000);
 8001fd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    palClearPad(GPIOC, 13);
 8001fd6:	6166      	str	r6, [r4, #20]
    chThdSleepMilliseconds(1000);
 8001fd8:	f7ff ffe2 	bl	8001fa0 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(1000);
 8001fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    palSetPad(GPIOC, 13);
 8001fe0:	6125      	str	r5, [r4, #16]
    chThdSleepMilliseconds(1000);
 8001fe2:	f7ff ffdd 	bl	8001fa0 <chThdSleep>
  while (true) {
 8001fe6:	e7f4      	b.n	8001fd2 <ThreadBlink+0x12>
 8001fe8:	20001628 	.word	0x20001628
 8001fec:	080035f4 	.word	0x080035f4
 8001ff0:	40011000 	.word	0x40011000
	...

08002000 <usbInitEndpointI>:
  if (epcp->in_state != NULL) {
 8002000:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
 8002002:	b410      	push	{r4}
  usbp->epc[ep] = epcp;
 8002004:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8002008:	60e2      	str	r2, [r4, #12]
  if (epcp->in_state != NULL) {
 800200a:	b123      	cbz	r3, 8002016 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800200c:	2400      	movs	r4, #0
 800200e:	601c      	str	r4, [r3, #0]
 8002010:	605c      	str	r4, [r3, #4]
 8002012:	609c      	str	r4, [r3, #8]
 8002014:	60dc      	str	r4, [r3, #12]
  if (epcp->out_state != NULL) {
 8002016:	6993      	ldr	r3, [r2, #24]
 8002018:	b123      	cbz	r3, 8002024 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
}
 8002024:	bc10      	pop	{r4}
  usb_lld_init_endpoint(usbp, ep);
 8002026:	f7fe bedb 	b.w	8000de0 <usb_lld_init_endpoint>
 800202a:	bf00      	nop
 800202c:	0000      	movs	r0, r0
	...

08002030 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	2905      	cmp	r1, #5
 8002034:	d81e      	bhi.n	8002074 <usb_event+0x44>
 8002036:	e8df f001 	tbb	[pc, r1]
 800203a:	1d03      	.short	0x1d03
 800203c:	1e03032d 	.word	0x1e03032d
 8002040:	2320      	movs	r3, #32
 8002042:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8002046:	4c2c      	ldr	r4, [pc, #176]	; (80020f8 <usb_event+0xc8>)
 8002048:	7d23      	ldrb	r3, [r4, #20]
 800204a:	b113      	cbz	r3, 8002052 <usb_event+0x22>
 800204c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002050:	b96b      	cbnz	r3, 800206e <usb_event+0x3e>
  bqSuspendI(&sdup->ibqueue);
 8002052:	2501      	movs	r5, #1
  chEvtBroadcastFlagsI(esp, flags);
 8002054:	2102      	movs	r1, #2
 8002056:	4829      	ldr	r0, [pc, #164]	; (80020fc <usb_event+0xcc>)
 8002058:	f7ff fcc2 	bl	80019e0 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 800205c:	4828      	ldr	r0, [pc, #160]	; (8002100 <usb_event+0xd0>)
 800205e:	7525      	strb	r5, [r4, #20]
 8002060:	f7ff fc96 	bl	8001990 <chThdDequeueAllI.constprop.0>
 8002064:	4827      	ldr	r0, [pc, #156]	; (8002104 <usb_event+0xd4>)
  bqSuspendI(&sdup->obqueue);
 8002066:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800206a:	f7ff fc91 	bl	8001990 <chThdDequeueAllI.constprop.0>
 800206e:	2300      	movs	r3, #0
 8002070:	f383 8811 	msr	BASEPRI, r3
}
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	2320      	movs	r3, #32
 8002078:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 800207c:	4c1e      	ldr	r4, [pc, #120]	; (80020f8 <usb_event+0xc8>)
 800207e:	2101      	movs	r1, #1
 8002080:	1d20      	adds	r0, r4, #4
 8002082:	f7ff fcad 	bl	80019e0 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 8002086:	2300      	movs	r3, #0
 8002088:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 800208a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	bd70      	pop	{r4, r5, r6, pc}
 8002094:	4605      	mov	r5, r0
 8002096:	2320      	movs	r3, #32
 8002098:	f383 8811 	msr	BASEPRI, r3
  ibqp->bcounter  = 0;
 800209c:	2600      	movs	r6, #0
 800209e:	4c16      	ldr	r4, [pc, #88]	; (80020f8 <usb_event+0xc8>)
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 80020a0:	2101      	movs	r1, #1
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <usb_event+0xd8>)
 80020a4:	f7ff ffac 	bl	8002000 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 80020a8:	2102      	movs	r1, #2
 80020aa:	4628      	mov	r0, r5
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <usb_event+0xdc>)
 80020ae:	f7ff ffa7 	bl	8002000 <usbInitEndpointI>
  ibqp->brdptr    = ibqp->buffers;
 80020b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  chThdDequeueAllI(tqp, msg);
 80020b4:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 80020b8:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->top       = NULL;
 80020bc:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 80020c0:	61a6      	str	r6, [r4, #24]
 80020c2:	f7ff fc65 	bl	8001990 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 80020c6:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 80020ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 80020ce:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 80020d2:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 80020d4:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 80020d8:	7526      	strb	r6, [r4, #20]
 80020da:	f7ff fc59 	bl	8001990 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 80020de:	2101      	movs	r1, #1
 80020e0:	1d20      	adds	r0, r4, #4
  bqResumeX(&sdup->obqueue);
 80020e2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
 80020e6:	f7ff fc7b 	bl	80019e0 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff fb00 	bl	80016f0 <sdu_start_receive>
 80020f0:	f386 8811 	msr	BASEPRI, r6
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
 80020f6:	bf00      	nop
 80020f8:	2000110c 	.word	0x2000110c
 80020fc:	20001110 	.word	0x20001110
 8002100:	20001118 	.word	0x20001118
 8002104:	20001150 	.word	0x20001150
 8002108:	08003680 	.word	0x08003680
 800210c:	080036a4 	.word	0x080036a4

08002110 <efl_lld_read>:
                           size_t n, uint8_t *rp) {
 8002110:	b570      	push	{r4, r5, r6, lr}
  if (devp->state == FLASH_ERASE) {
 8002112:	7905      	ldrb	r5, [r0, #4]
 8002114:	2d05      	cmp	r5, #5
 8002116:	d00e      	beq.n	8002136 <efl_lld_read+0x26>
 8002118:	4604      	mov	r4, r0
  devp->state = FLASH_READ;
 800211a:	2603      	movs	r6, #3
  eflp->flash->SR = 0x0000001FU;
 800211c:	251f      	movs	r5, #31
 800211e:	4618      	mov	r0, r3
  stm32_flash_clear_status(devp);
 8002120:	68e3      	ldr	r3, [r4, #12]
  devp->state = FLASH_READ;
 8002122:	7126      	strb	r6, [r4, #4]
  memcpy((void *)rp, (const void *)efl_lld_descriptor.address + offset, n);
 8002124:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
  eflp->flash->SR = 0x0000001FU;
 8002128:	60dd      	str	r5, [r3, #12]
  memcpy((void *)rp, (const void *)efl_lld_descriptor.address + offset, n);
 800212a:	f7fe fb53 	bl	80007d4 <memcpy>
  devp->state = FLASH_READY;
 800212e:	2302      	movs	r3, #2
 8002130:	7123      	strb	r3, [r4, #4]
 8002132:	2000      	movs	r0, #0
}
 8002134:	bd70      	pop	{r4, r5, r6, pc}
    return FLASH_BUSY_ERASING;
 8002136:	2001      	movs	r0, #1
}
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	bf00      	nop
 800213c:	0000      	movs	r0, r0
	...

08002140 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002144:	b085      	sub	sp, #20
 8002146:	f04f 0920 	mov.w	r9, #32
 800214a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800214e:	69c7      	ldr	r7, [r0, #28]
 8002150:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002154:	b3aa      	cbz	r2, 80021c2 <oqWriteTimeout+0x82>
 8002156:	4604      	mov	r4, r0
 8002158:	460e      	mov	r6, r1
 800215a:	f04f 0a00 	mov.w	sl, #0
 800215e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 8002162:	68a2      	ldr	r2, [r4, #8]
 8002164:	4593      	cmp	fp, r2
 8002166:	bf98      	it	ls
 8002168:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800216a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800216e:	bf88      	it	hi
 8002170:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002172:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002176:	45a8      	cmp	r8, r5
 8002178:	d844      	bhi.n	8002204 <oqWriteTimeout+0xc4>
  else if (n > s1) {
 800217a:	d229      	bcs.n	80021d0 <oqWriteTimeout+0x90>
    s2 = n - s1;
 800217c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002180:	4642      	mov	r2, r8
 8002182:	4631      	mov	r1, r6
    s2 = n - s1;
 8002184:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002186:	f7fe fb25 	bl	80007d4 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800218a:	eb06 0108 	add.w	r1, r6, r8
 800218e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002192:	68e0      	ldr	r0, [r4, #12]
 8002194:	4642      	mov	r2, r8
 8002196:	f7fe fb1d 	bl	80007d4 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800219a:	4643      	mov	r3, r8
  oqp->q_counter -= n;
 800219c:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800219e:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 80021a0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80021a2:	18cb      	adds	r3, r1, r3
 80021a4:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80021a6:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80021a8:	b10f      	cbz	r7, 80021ae <oqWriteTimeout+0x6e>
        nfy(oqp);
 80021aa:	4620      	mov	r0, r4
 80021ac:	47b8      	blx	r7
 80021ae:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80021b2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80021b6:	442e      	add	r6, r5
 80021b8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80021bc:	f1bb 0f00 	cmp.w	fp, #0
 80021c0:	d1cf      	bne.n	8002162 <oqWriteTimeout+0x22>
 80021c2:	2300      	movs	r3, #0
  if (n > oqGetEmptyI(oqp)) {
 80021c4:	9803      	ldr	r0, [sp, #12]
 80021c6:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80021ca:	b005      	add	sp, #20
 80021cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80021d0:	462a      	mov	r2, r5
 80021d2:	4631      	mov	r1, r6
 80021d4:	f7fe fafe 	bl	80007d4 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80021d8:	68e2      	ldr	r2, [r4, #12]
 80021da:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80021dc:	68a2      	ldr	r2, [r4, #8]
 80021de:	1b52      	subs	r2, r2, r5
 80021e0:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d1e0      	bne.n	80021a8 <oqWriteTimeout+0x68>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80021e6:	4620      	mov	r0, r4
 80021e8:	9902      	ldr	r1, [sp, #8]
 80021ea:	f7ff fd79 	bl	8001ce0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d0b7      	beq.n	8002162 <oqWriteTimeout+0x22>
 80021f2:	9b03      	ldr	r3, [sp, #12]
 80021f4:	eba3 000b 	sub.w	r0, r3, fp
 80021f8:	2300      	movs	r3, #0
 80021fa:	f383 8811 	msr	BASEPRI, r3
}
 80021fe:	b005      	add	sp, #20
 8002200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002204:	462a      	mov	r2, r5
 8002206:	4631      	mov	r1, r6
 8002208:	f7fe fae4 	bl	80007d4 <memcpy>
    oqp->q_wrptr += n;
 800220c:	6962      	ldr	r2, [r4, #20]
 800220e:	442a      	add	r2, r5
 8002210:	6162      	str	r2, [r4, #20]
 8002212:	e7e3      	b.n	80021dc <oqWriteTimeout+0x9c>
	...

08002220 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002220:	3030      	adds	r0, #48	; 0x30
 8002222:	f7ff bf8d 	b.w	8002140 <oqWriteTimeout>
 8002226:	bf00      	nop
	...

08002230 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002234:	3030      	adds	r0, #48	; 0x30
 8002236:	f7ff bf83 	b.w	8002140 <oqWriteTimeout>
 800223a:	bf00      	nop
 800223c:	0000      	movs	r0, r0
	...

08002240 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002244:	b085      	sub	sp, #20
 8002246:	f04f 0920 	mov.w	r9, #32
 800224a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800224e:	69c7      	ldr	r7, [r0, #28]
 8002250:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002254:	2a00      	cmp	r2, #0
 8002256:	d035      	beq.n	80022c4 <iqReadTimeout+0x84>
 8002258:	4604      	mov	r4, r0
 800225a:	460e      	mov	r6, r1
 800225c:	f04f 0a00 	mov.w	sl, #0
 8002260:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 8002264:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002266:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002268:	4593      	cmp	fp, r2
 800226a:	bf98      	it	ls
 800226c:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800226e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002270:	bf88      	it	hi
 8002272:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002274:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002278:	45a8      	cmp	r8, r5
 800227a:	d844      	bhi.n	8002306 <iqReadTimeout+0xc6>
  else if (n > s1) {
 800227c:	d229      	bcs.n	80022d2 <iqReadTimeout+0x92>
    s2 = n - s1;
 800227e:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002282:	4642      	mov	r2, r8
 8002284:	4630      	mov	r0, r6
    s2 = n - s1;
 8002286:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002288:	f7fe faa4 	bl	80007d4 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800228c:	eb06 0008 	add.w	r0, r6, r8
 8002290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002294:	68e1      	ldr	r1, [r4, #12]
 8002296:	4642      	mov	r2, r8
 8002298:	f7fe fa9c 	bl	80007d4 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800229c:	4643      	mov	r3, r8
  iqp->q_counter -= n;
 800229e:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80022a0:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 80022a2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 80022a4:	18cb      	adds	r3, r1, r3
 80022a6:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80022a8:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80022aa:	b10f      	cbz	r7, 80022b0 <iqReadTimeout+0x70>
        nfy(iqp);
 80022ac:	4620      	mov	r0, r4
 80022ae:	47b8      	blx	r7
 80022b0:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 80022b4:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80022b8:	442e      	add	r6, r5
 80022ba:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80022be:	f1bb 0f00 	cmp.w	fp, #0
 80022c2:	d1cf      	bne.n	8002264 <iqReadTimeout+0x24>
 80022c4:	2300      	movs	r3, #0
  if (n > iqGetFullI(iqp)) {
 80022c6:	9803      	ldr	r0, [sp, #12]
 80022c8:	f383 8811 	msr	BASEPRI, r3
}
 80022cc:	b005      	add	sp, #20
 80022ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80022d2:	462a      	mov	r2, r5
 80022d4:	4630      	mov	r0, r6
 80022d6:	f7fe fa7d 	bl	80007d4 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80022da:	68e2      	ldr	r2, [r4, #12]
 80022dc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80022de:	68a2      	ldr	r2, [r4, #8]
 80022e0:	1b52      	subs	r2, r2, r5
 80022e2:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	d1e0      	bne.n	80022aa <iqReadTimeout+0x6a>
 80022e8:	4620      	mov	r0, r4
 80022ea:	9902      	ldr	r1, [sp, #8]
 80022ec:	f7ff fcf8 	bl	8001ce0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d0b7      	beq.n	8002264 <iqReadTimeout+0x24>
 80022f4:	9b03      	ldr	r3, [sp, #12]
 80022f6:	eba3 000b 	sub.w	r0, r3, fp
 80022fa:	2300      	movs	r3, #0
 80022fc:	f383 8811 	msr	BASEPRI, r3
}
 8002300:	b005      	add	sp, #20
 8002302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002306:	462a      	mov	r2, r5
 8002308:	4630      	mov	r0, r6
 800230a:	f7fe fa63 	bl	80007d4 <memcpy>
    iqp->q_rdptr += n;
 800230e:	69a2      	ldr	r2, [r4, #24]
 8002310:	442a      	add	r2, r5
 8002312:	61a2      	str	r2, [r4, #24]
 8002314:	e7e3      	b.n	80022de <iqReadTimeout+0x9e>
 8002316:	bf00      	nop
	...

08002320 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002320:	300c      	adds	r0, #12
 8002322:	f7ff bf8d 	b.w	8002240 <iqReadTimeout>
 8002326:	bf00      	nop
	...

08002330 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002334:	300c      	adds	r0, #12
 8002336:	f7ff bf83 	b.w	8002240 <iqReadTimeout>
 800233a:	bf00      	nop
 800233c:	0000      	movs	r0, r0
	...

08002340 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	4605      	mov	r5, r0
 8002346:	460c      	mov	r4, r1
 8002348:	4692      	mov	sl, r2
 800234a:	4699      	mov	r9, r3
 800234c:	f04f 0820 	mov.w	r8, #32
 8002350:	b083      	sub	sp, #12
 8002352:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8002356:	2600      	movs	r6, #0
    if (obqp->ptr == NULL) {
 8002358:	6aab      	ldr	r3, [r5, #40]	; 0x28
  obqp->ptr = NULL;
 800235a:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 800235c:	2b00      	cmp	r3, #0
 800235e:	d042      	beq.n	80023e6 <obqWriteTimeout+0xa6>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8002360:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 8002362:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8002366:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 8002368:	4593      	cmp	fp, r2
 800236a:	bf28      	it	cs
 800236c:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800236e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8002372:	d941      	bls.n	80023f8 <obqWriteTimeout+0xb8>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8002374:	4621      	mov	r1, r4
 8002376:	4618      	mov	r0, r3
 8002378:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800237c:	f8d1 c000 	ldr.w	ip, [r1]
 8002380:	684c      	ldr	r4, [r1, #4]
 8002382:	688a      	ldr	r2, [r1, #8]
 8002384:	68cb      	ldr	r3, [r1, #12]
 8002386:	3110      	adds	r1, #16
 8002388:	4571      	cmp	r1, lr
 800238a:	f8c0 c000 	str.w	ip, [r0]
 800238e:	6044      	str	r4, [r0, #4]
 8002390:	6082      	str	r2, [r0, #8]
 8002392:	60c3      	str	r3, [r0, #12]
 8002394:	f100 0010 	add.w	r0, r0, #16
 8002398:	d1f0      	bne.n	800237c <obqWriteTimeout+0x3c>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800239a:	460c      	mov	r4, r1
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800239c:	6aab      	ldr	r3, [r5, #40]	; 0x28
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 800239e:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80023a0:	3340      	adds	r3, #64	; 0x40
 80023a2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80023a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d814      	bhi.n	80023d4 <obqWriteTimeout+0x94>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80023aa:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 80023ac:	692b      	ldr	r3, [r5, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80023ae:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80023b0:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80023b2:	69e8      	ldr	r0, [r5, #28]
  if (obqp->bwrptr >= obqp->btop) {
 80023b4:	69aa      	ldr	r2, [r5, #24]
  obqp->bwrptr += obqp->bsize;
 80023b6:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 80023b8:	4293      	cmp	r3, r2
  obqp->bwrptr += obqp->bsize;
 80023ba:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 80023bc:	bf28      	it	cs
 80023be:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
  obqp->bcounter--;
 80023c0:	68e9      	ldr	r1, [r5, #12]
    obqp->bwrptr = obqp->buffers;
 80023c2:	bf28      	it	cs
 80023c4:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 80023c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 80023c8:	3901      	subs	r1, #1
 80023ca:	60e9      	str	r1, [r5, #12]
  obqp->ptr = NULL;
 80023cc:	62af      	str	r7, [r5, #40]	; 0x28
  if (obqp->notify != NULL) {
 80023ce:	b10b      	cbz	r3, 80023d4 <obqWriteTimeout+0x94>
    obqp->notify(obqp);
 80023d0:	4628      	mov	r0, r5
 80023d2:	4798      	blx	r3
 80023d4:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 80023d8:	4556      	cmp	r6, sl
 80023da:	d21a      	bcs.n	8002412 <obqWriteTimeout+0xd2>
 80023dc:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 80023e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1bc      	bne.n	8002360 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80023e6:	4649      	mov	r1, r9
 80023e8:	4628      	mov	r0, r5
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	f7ff fd10 	bl	8001e10 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 80023f0:	9b01      	ldr	r3, [sp, #4]
 80023f2:	b960      	cbnz	r0, 800240e <obqWriteTimeout+0xce>
 80023f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023f6:	e7b3      	b.n	8002360 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 80023f8:	4618      	mov	r0, r3
 80023fa:	4621      	mov	r1, r4
 80023fc:	465a      	mov	r2, fp
 80023fe:	f7fe f9e9 	bl	80007d4 <memcpy>
      obqp->ptr += size;
 8002402:	6aab      	ldr	r3, [r5, #40]	; 0x28
      w         += size;
 8002404:	445e      	add	r6, fp
      obqp->ptr += size;
 8002406:	445b      	add	r3, fp
      bp        += size;
 8002408:	445c      	add	r4, fp
      obqp->ptr += size;
 800240a:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 800240c:	e7ca      	b.n	80023a4 <obqWriteTimeout+0x64>
 800240e:	f383 8811 	msr	BASEPRI, r3
}
 8002412:	4630      	mov	r0, r6
 8002414:	b003      	add	sp, #12
 8002416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241a:	bf00      	nop
 800241c:	0000      	movs	r0, r0
	...

08002420 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8002420:	3044      	adds	r0, #68	; 0x44
 8002422:	f7ff bf8d 	b.w	8002340 <obqWriteTimeout>
 8002426:	bf00      	nop
	...

08002430 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8002430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002434:	3044      	adds	r0, #68	; 0x44
 8002436:	f7ff bf83 	b.w	8002340 <obqWriteTimeout>
 800243a:	bf00      	nop
 800243c:	0000      	movs	r0, r0
	...

08002440 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8002440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002444:	b083      	sub	sp, #12
 8002446:	4605      	mov	r5, r0
 8002448:	460f      	mov	r7, r1
 800244a:	4693      	mov	fp, r2
 800244c:	f04f 0920 	mov.w	r9, #32
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	f389 8811 	msr	BASEPRI, r9
  size_t r = 0;
 8002456:	2600      	movs	r6, #0
    if (ibqp->ptr == NULL) {
 8002458:	6aac      	ldr	r4, [r5, #40]	; 0x28
  ibqp->ptr = NULL;
 800245a:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 800245c:	2c00      	cmp	r4, #0
 800245e:	d041      	beq.n	80024e4 <ibqReadTimeout+0xa4>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002460:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 8002462:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002466:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 8002468:	429a      	cmp	r2, r3
 800246a:	bf28      	it	cs
 800246c:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800246e:	2a40      	cmp	r2, #64	; 0x40
 8002470:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8002472:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002474:	d93d      	bls.n	80024f2 <ibqReadTimeout+0xb2>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8002476:	463b      	mov	r3, r7
 8002478:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800247c:	f8d1 c000 	ldr.w	ip, [r1]
 8002480:	684c      	ldr	r4, [r1, #4]
 8002482:	6888      	ldr	r0, [r1, #8]
 8002484:	68ca      	ldr	r2, [r1, #12]
 8002486:	3110      	adds	r1, #16
 8002488:	4571      	cmp	r1, lr
 800248a:	f8c3 c000 	str.w	ip, [r3]
 800248e:	605c      	str	r4, [r3, #4]
 8002490:	6098      	str	r0, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	f103 0310 	add.w	r3, r3, #16
 8002498:	d1f0      	bne.n	800247c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800249a:	6aab      	ldr	r3, [r5, #40]	; 0x28
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800249c:	3740      	adds	r7, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800249e:	3340      	adds	r3, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80024a0:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80024a2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 80024a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d813      	bhi.n	80024d2 <ibqReadTimeout+0x92>
  if (ibqp->brdptr >= ibqp->btop) {
 80024aa:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 80024ae:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 80024b0:	68e8      	ldr	r0, [r5, #12]
  ibqp->brdptr += ibqp->bsize;
 80024b2:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 80024b4:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 80024b6:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 80024b8:	bf28      	it	cs
 80024ba:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
  ibqp->bcounter--;
 80024bc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    ibqp->brdptr = ibqp->buffers;
 80024c0:	bf28      	it	cs
 80024c2:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 80024c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 80024c6:	60e8      	str	r0, [r5, #12]
  ibqp->ptr = NULL;
 80024c8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  if (ibqp->notify != NULL) {
 80024cc:	b10b      	cbz	r3, 80024d2 <ibqReadTimeout+0x92>
    ibqp->notify(ibqp);
 80024ce:	4628      	mov	r0, r5
 80024d0:	4798      	blx	r3
 80024d2:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 80024d6:	455e      	cmp	r6, fp
 80024d8:	d216      	bcs.n	8002508 <ibqReadTimeout+0xc8>
 80024da:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 80024de:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	d1bd      	bne.n	8002460 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80024e4:	4628      	mov	r0, r5
 80024e6:	9901      	ldr	r1, [sp, #4]
 80024e8:	f7ff fcfa 	bl	8001ee0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 80024ec:	b950      	cbnz	r0, 8002504 <ibqReadTimeout+0xc4>
 80024ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80024f0:	e7b6      	b.n	8002460 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 80024f2:	4638      	mov	r0, r7
 80024f4:	f7fe f96e 	bl	80007d4 <memcpy>
      ibqp->ptr += size;
 80024f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
      r         += size;
 80024fa:	4456      	add	r6, sl
      ibqp->ptr += size;
 80024fc:	4453      	add	r3, sl
      bp        += size;
 80024fe:	4457      	add	r7, sl
      ibqp->ptr += size;
 8002500:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 8002502:	e7cf      	b.n	80024a4 <ibqReadTimeout+0x64>
 8002504:	f384 8811 	msr	BASEPRI, r4
}
 8002508:	4630      	mov	r0, r6
 800250a:	b003      	add	sp, #12
 800250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002510 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8002510:	300c      	adds	r0, #12
 8002512:	f7ff bf95 	b.w	8002440 <ibqReadTimeout>
 8002516:	bf00      	nop
	...

08002520 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8002520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002524:	300c      	adds	r0, #12
 8002526:	f7ff bf8b 	b.w	8002440 <ibqReadTimeout>
 800252a:	bf00      	nop
 800252c:	0000      	movs	r0, r0
	...

08002530 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002534:	4ac3      	ldr	r2, [pc, #780]	; (8002844 <main+0x314>)
}

/*
 * Application entry point.
 */
int main(void) {
 8002536:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800253a:	6913      	ldr	r3, [r2, #16]
 800253c:	6110      	str	r0, [r2, #16]
 800253e:	6913      	ldr	r3, [r2, #16]
 8002540:	2300      	movs	r3, #0
    usbp->in_params[i]  = NULL;
 8002542:	2100      	movs	r1, #0
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002544:	f44f 7c80 	mov.w	ip, #256	; 0x100
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002548:	2460      	movs	r4, #96	; 0x60
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800254a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800254e:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8002552:	f04f 0880 	mov.w	r8, #128	; 0x80
 8002556:	6113      	str	r3, [r2, #16]
 8002558:	6913      	ldr	r3, [r2, #16]
  rccResetAPB2(0xFFFFFFFF);
 800255a:	68d3      	ldr	r3, [r2, #12]
 800255c:	60d0      	str	r0, [r2, #12]
 800255e:	68d3      	ldr	r3, [r2, #12]
 8002560:	60d1      	str	r1, [r2, #12]
 8002562:	68d3      	ldr	r3, [r2, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 8002564:	69d3      	ldr	r3, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8002566:	f8df b348 	ldr.w	fp, [pc, #840]	; 80028b0 <main+0x380>
  rccEnablePWRInterface(true);
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256e:	61d3      	str	r3, [r2, #28]
 8002570:	69d3      	ldr	r3, [r2, #28]
  rccEnableBKPInterface(true);
 8002572:	69d3      	ldr	r3, [r2, #28]
 * @init
 */
void eflObjectInit(EFlashDriver *eflp) {

  eflp->vmt = &vmt;
  eflp->state = FLASH_STOP;
 8002574:	f04f 0e01 	mov.w	lr, #1
 8002578:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	69d3      	ldr	r3, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8002580:	f8db 3000 	ldr.w	r3, [fp]
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8002584:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
 8002588:	ea43 030c 	orr.w	r3, r3, ip
 800258c:	f8cb 3000 	str.w	r3, [fp]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002590:	4bad      	ldr	r3, [pc, #692]	; (8002848 <main+0x318>)
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8002592:	4dae      	ldr	r5, [pc, #696]	; (800284c <main+0x31c>)
 8002594:	f883 4306 	strb.w	r4, [r3, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002598:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800259c:	f8c3 a000 	str.w	sl, [r3]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80025a0:	f883 4307 	strb.w	r4, [r3, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025a4:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025a8:	f8c3 8000 	str.w	r8, [r3]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80025ac:	f883 4308 	strb.w	r4, [r3, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025b0:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025b4:	f8c3 c000 	str.w	ip, [r3]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80025b8:	f883 4309 	strb.w	r4, [r3, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025bc:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025c0:	601e      	str	r6, [r3, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025c2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80025c6:	f883 430a 	strb.w	r4, [r3, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025ca:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025ce:	601e      	str	r6, [r3, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025d0:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80025d4:	46a9      	mov	r9, r5
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80025d6:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025da:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025de:	601e      	str	r6, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80025e0:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025e4:	f8c3 c184 	str.w	ip, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025e8:	f8c3 c004 	str.w	ip, [r3, #4]
  rccEnableAPB2(APB2_EN_MASK, true);
 80025ec:	6994      	ldr	r4, [r2, #24]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80025ee:	f885 e008 	strb.w	lr, [r5, #8]
 80025f2:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 80025f6:	6194      	str	r4, [r2, #24]
 80025f8:	6992      	ldr	r2, [r2, #24]
  GPIOA->ODR = config->PAData.odr;
 80025fa:	4c95      	ldr	r4, [pc, #596]	; (8002850 <main+0x320>)
  GPIOA->CRH = config->PAData.crh;
 80025fc:	4a95      	ldr	r2, [pc, #596]	; (8002854 <main+0x324>)
  GPIOA->ODR = config->PAData.odr;
 80025fe:	60e0      	str	r0, [r4, #12]
  GPIOA->CRH = config->PAData.crh;
 8002600:	6062      	str	r2, [r4, #4]
  GPIOA->CRL = config->PAData.crl;
 8002602:	6027      	str	r7, [r4, #0]
  GPIOB->ODR = config->PBData.odr;
 8002604:	4a94      	ldr	r2, [pc, #592]	; (8002858 <main+0x328>)
  GPIOB->CRH = config->PBData.crh;
 8002606:	4c95      	ldr	r4, [pc, #596]	; (800285c <main+0x32c>)
  GPIOB->ODR = config->PBData.odr;
 8002608:	60d0      	str	r0, [r2, #12]
  GPIOB->CRH = config->PBData.crh;
 800260a:	6054      	str	r4, [r2, #4]
  GPIOB->CRL = config->PBData.crl;
 800260c:	6017      	str	r7, [r2, #0]
  GPIOC->ODR = config->PCData.odr;
 800260e:	4c94      	ldr	r4, [pc, #592]	; (8002860 <main+0x330>)
  GPIOC->CRH = config->PCData.crh;
 8002610:	4a94      	ldr	r2, [pc, #592]	; (8002864 <main+0x334>)
  GPIOC->ODR = config->PCData.odr;
 8002612:	60e0      	str	r0, [r4, #12]
  GPIOC->CRH = config->PCData.crh;
 8002614:	6062      	str	r2, [r4, #4]
  GPIOC->CRL = config->PCData.crl;
 8002616:	6027      	str	r7, [r4, #0]
  GPIOD->ODR = config->PDData.odr;
 8002618:	4a93      	ldr	r2, [pc, #588]	; (8002868 <main+0x338>)
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800261a:	4c94      	ldr	r4, [pc, #592]	; (800286c <main+0x33c>)
  GPIOD->ODR = config->PDData.odr;
 800261c:	60d0      	str	r0, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 800261e:	6057      	str	r7, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 8002620:	6014      	str	r4, [r2, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002622:	f8c2 040c 	str.w	r0, [r2, #1036]	; 0x40c
  GPIOE->CRH = config->PEData.crh;
 8002626:	f8c2 7404 	str.w	r7, [r2, #1028]	; 0x404
  GPIOE->CRL = config->PEData.crl;
 800262a:	f8c2 7400 	str.w	r7, [r2, #1024]	; 0x400
  sdp->vmt = &vmt;
 800262e:	4a90      	ldr	r2, [pc, #576]	; (8002870 <main+0x340>)
 8002630:	4890      	ldr	r0, [pc, #576]	; (8002874 <main+0x344>)
 8002632:	f849 2b04 	str.w	r2, [r9], #4
  eflp->vmt = &vmt;
 8002636:	4a90      	ldr	r2, [pc, #576]	; (8002878 <main+0x348>)
  eflp->state = FLASH_STOP;
 8002638:	f880 e004 	strb.w	lr, [r0, #4]
  eflp->vmt = &vmt;
 800263c:	6002      	str	r2, [r0, #0]
  EFLD1.flash = FLASH;
 800263e:	4a8f      	ldr	r2, [pc, #572]	; (800287c <main+0x34c>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002640:	f8c5 9004 	str.w	r9, [r5, #4]
 8002644:	60c2      	str	r2, [r0, #12]
  qp->next = qp;
 8002646:	f105 020c 	add.w	r2, r5, #12
  qp->prev = qp;
 800264a:	e9c5 2203 	strd	r2, r2, [r5, #12]
  oqp->q_counter = size;
 800264e:	2210      	movs	r2, #16
  iqp->q_counter = 0;
 8002650:	6169      	str	r1, [r5, #20]
  oqp->q_counter = size;
 8002652:	63aa      	str	r2, [r5, #56]	; 0x38
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002654:	f06f 023f 	mvn.w	r2, #63	; 0x3f
  iqp->q_link    = link;
 8002658:	e9c5 150a 	strd	r1, r5, [r5, #40]	; 0x28
  oqp->q_link    = link;
 800265c:	652d      	str	r5, [r5, #80]	; 0x50
 800265e:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
  oqp->q_top     = bp + size;
 8002662:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8002666:	642a      	str	r2, [r5, #64]	; 0x40
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002668:	4a85      	ldr	r2, [pc, #532]	; (8002880 <main+0x350>)
  oqp->q_notify  = onfy;
 800266a:	4886      	ldr	r0, [pc, #536]	; (8002884 <main+0x354>)
 800266c:	676a      	str	r2, [r5, #116]	; 0x74
  SD1.clock = STM32_PCLK2;
 800266e:	4a86      	ldr	r2, [pc, #536]	; (8002888 <main+0x358>)
 8002670:	64e8      	str	r0, [r5, #76]	; 0x4c
 8002672:	67aa      	str	r2, [r5, #120]	; 0x78
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002674:	2020      	movs	r0, #32
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002676:	2220      	movs	r2, #32
  usbp->state        = USB_STOP;
 8002678:	4f84      	ldr	r7, [pc, #528]	; (800288c <main+0x35c>)
 800267a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  usbp->config       = NULL;
 800267e:	6079      	str	r1, [r7, #4]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002680:	6058      	str	r0, [r3, #4]
  qp->next = qp;
 8002682:	f105 0030 	add.w	r0, r5, #48	; 0x30
  qp->prev = qp;
 8002686:	e9c5 000c 	strd	r0, r0, [r5, #48]	; 0x30
  iqp->q_top     = bp + size;
 800268a:	f105 0364 	add.w	r3, r5, #100	; 0x64
  iqp->q_buffer  = bp;
 800268e:	f105 0254 	add.w	r2, r5, #84	; 0x54
  iqp->q_wrptr   = bp;
 8002692:	e9c5 2208 	strd	r2, r2, [r5, #32]
  oqp->q_wrptr   = bp;
 8002696:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  iqp->q_buffer  = bp;
 800269a:	61aa      	str	r2, [r5, #24]
  iqp->q_top     = bp + size;
 800269c:	61eb      	str	r3, [r5, #28]
  oqp->q_buffer  = bp;
 800269e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80026a0:	b087      	sub	sp, #28
  usbp->state        = USB_STOP;
 80026a2:	f887 e000 	strb.w	lr, [r7]
 80026a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
    usbp->in_params[i]  = NULL;
 80026ae:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80026b2:	429a      	cmp	r2, r3
    usbp->out_params[i] = NULL;
 80026b4:	6199      	str	r1, [r3, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80026b6:	d1fa      	bne.n	80026ae <main+0x17e>
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80026b8:	2201      	movs	r2, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80026ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026be:	f648 4b9f 	movw	fp, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80026c2:	f64f 7aff 	movw	sl, #65535	; 0xffff
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80026c6:	f04f 0980 	mov.w	r9, #128	; 0x80
  ST_ENABLE_CLOCK();
 80026ca:	485e      	ldr	r0, [pc, #376]	; (8002844 <main+0x314>)
  usbp->transmitting = 0;
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	f8d0 c01c 	ldr.w	ip, [r0, #28]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026d2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80026d6:	ea4c 0c02 	orr.w	ip, ip, r2
 80026da:	f8c0 c01c 	str.w	ip, [r0, #28]
  ST_ENABLE_STOP();
 80026de:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80028b4 <main+0x384>
  ST_ENABLE_CLOCK();
 80026e2:	69c0      	ldr	r0, [r0, #28]
  ST_ENABLE_STOP();
 80026e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
  tmp->cumulative = (rttime_t)0;
 80026e8:	f04f 0800 	mov.w	r8, #0
 80026ec:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80026f0:	f8cc 0004 	str.w	r0, [ip, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80026f4:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80026f8:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80026fc:	6199      	str	r1, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80026fe:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002700:	60d9      	str	r1, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002702:	6059      	str	r1, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002704:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002706:	601a      	str	r2, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002708:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <main+0x318>)
  tmp->best       = (rtcnt_t)-1;
 800270a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800270e:	f883 931c 	strb.w	r9, [r3, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 8002712:	f04f 0900 	mov.w	r9, #0
 8002716:	2604      	movs	r6, #4
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002718:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800271c:	601c      	str	r4, [r3, #0]
 */
void chSysInit(void) {
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <main+0x360>)
 8002720:	e9cd 8904 	strd	r8, r9, [sp, #16]
  tmp->last       = (rtcnt_t)0;
 8002724:	e9cd 1101 	strd	r1, r1, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8002728:	e9c3 1101 	strd	r1, r1, [r3, #4]
  tmp->n          = (ucnt_t)0;
 800272c:	9103      	str	r1, [sp, #12]
 800272e:	701a      	strb	r2, [r3, #0]
  tmp->best       = (rtcnt_t)-1;
 8002730:	f8cd e000 	str.w	lr, [sp]
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 8002734:	4668      	mov	r0, sp
 8002736:	f7fe fae3 	bl	8000d00 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800273a:	4668      	mov	r0, sp
 800273c:	f7fe fab8 	bl	8000cb0 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8002740:	3e01      	subs	r6, #1
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <main+0x360>)
 8002744:	d1f6      	bne.n	8002734 <main+0x204>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8002746:	211c      	movs	r1, #28
 8002748:	2414      	movs	r4, #20
  mp->align = align;
 800274a:	f04f 0e04 	mov.w	lr, #4
  qp->next = qp;
 800274e:	4a51      	ldr	r2, [pc, #324]	; (8002894 <main+0x364>)
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002750:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80028b8 <main+0x388>
 8002754:	f8df a164 	ldr.w	sl, [pc, #356]	; 80028bc <main+0x38c>
  mp->object_size = size;
 8002758:	6311      	str	r1, [r2, #48]	; 0x30
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800275a:	f102 013c 	add.w	r1, r2, #60	; 0x3c
  mp->provider = provider;
 800275e:	f8df c160 	ldr.w	ip, [pc, #352]	; 80028c0 <main+0x390>
 8002762:	f8c9 a000 	str.w	sl, [r9]
  mp->object_size = size;
 8002766:	6194      	str	r4, [r2, #24]
 8002768:	f109 0a0c 	add.w	sl, r9, #12
 800276c:	f102 0424 	add.w	r4, r2, #36	; 0x24
 8002770:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002772:	f102 0140 	add.w	r1, r2, #64	; 0x40
  qp->prev = qp;
 8002776:	e9c9 aa03 	strd	sl, sl, [r9, #12]
 800277a:	6254      	str	r4, [r2, #36]	; 0x24
 800277c:	6411      	str	r1, [r2, #64]	; 0x40
 800277e:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8002782:	f102 0144 	add.w	r1, r2, #68	; 0x44
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8002786:	e9c9 6601 	strd	r6, r6, [r9, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 800278a:	f8c9 6014 	str.w	r6, [r9, #20]
 800278e:	f102 0910 	add.w	r9, r2, #16
 8002792:	f8c2 9010 	str.w	r9, [r2, #16]
 8002796:	6294      	str	r4, [r2, #40]	; 0x28
 8002798:	6451      	str	r1, [r2, #68]	; 0x44
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800279a:	4c3f      	ldr	r4, [pc, #252]	; (8002898 <main+0x368>)
 800279c:	e9c2 2200 	strd	r2, r2, [r2]
  ch_memcore.basemem = __heap_base__;
 80027a0:	483e      	ldr	r0, [pc, #248]	; (800289c <main+0x36c>)
 80027a2:	f8df a120 	ldr.w	sl, [pc, #288]	; 80028c4 <main+0x394>
  ch_memcore.topmem  = __heap_end__;
 80027a6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80028c8 <main+0x398>

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 80027aa:	493d      	ldr	r1, [pc, #244]	; (80028a0 <main+0x370>)
 80027ac:	6096      	str	r6, [r2, #8]
  mp->next = NULL;
 80027ae:	6156      	str	r6, [r2, #20]
 80027b0:	62d6      	str	r6, [r2, #44]	; 0x2c
  mp->align = align;
 80027b2:	f8c2 e01c 	str.w	lr, [r2, #28]
 80027b6:	f8c2 e034 	str.w	lr, [r2, #52]	; 0x34
  mp->provider = provider;
 80027ba:	f8c2 c020 	str.w	ip, [r2, #32]
 80027be:	f8c2 c038 	str.w	ip, [r2, #56]	; 0x38
  tcp->offset = tm.best;
 80027c2:	9a00      	ldr	r2, [sp, #0]
 80027c4:	e9c0 a900 	strd	sl, r9, [r0]
 80027c8:	609a      	str	r2, [r3, #8]
  ch_system.instances[core_id] = oip;
 80027ca:	605c      	str	r4, [r3, #4]
 80027cc:	2220      	movs	r2, #32
  oip->core_id = core_id;
 80027ce:	6326      	str	r6, [r4, #48]	; 0x30
  oip->config = oicp;
 80027d0:	63a1      	str	r1, [r4, #56]	; 0x38
 80027d2:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 80027d6:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d8:	f64f 0aff 	movw	sl, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	f04f 0910 	mov.w	r9, #16
  return (systime_t)STM32_ST_TIM->CNT;
 80027e0:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	492f      	ldr	r1, [pc, #188]	; (80028a4 <main+0x374>)
  reg_value  =  (reg_value                                   |
 80027e6:	4830      	ldr	r0, [pc, #192]	; (80028a8 <main+0x378>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  pqp->prev = pqp;
 80027ec:	6064      	str	r4, [r4, #4]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	ea0c 0c0a 	and.w	ip, ip, sl
  reg_value  =  (reg_value                                   |
 80027f2:	ea4c 0000 	orr.w	r0, ip, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027f6:	f10a 4a60 	add.w	sl, sl, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 80027fa:	60c8      	str	r0, [r1, #12]
 80027fc:	f6aa 3a0f 	subw	sl, sl, #2831	; 0xb0f
 8002800:	f8da 000c 	ldr.w	r0, [sl, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002804:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80028cc <main+0x39c>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002808:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800280c:	f8ca 000c 	str.w	r0, [sl, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002810:	f8dc 0000 	ldr.w	r0, [ip]
  dlhp->delta = (sysinterval_t)-1;
 8002814:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002818:	f040 0001 	orr.w	r0, r0, #1
 800281c:	f8cc 0000 	str.w	r0, [ip]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	f881 901f 	strb.w	r9, [r1, #31]
 8002824:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8002828:	2100      	movs	r1, #0
 800282a:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 800282e:	f04f 0901 	mov.w	r9, #1
  tp->hdr.pqueue.prio   = prio;
 8002832:	f04f 0e80 	mov.w	lr, #128	; 0x80
  tp->state             = CH_STATE_WTSTART;
 8002836:	f04f 0a02 	mov.w	sl, #2
 800283a:	b280      	uxth	r0, r0
 800283c:	e9c4 0108 	strd	r0, r1, [r4, #32]
  tp->name              = name;
 8002840:	481a      	ldr	r0, [pc, #104]	; (80028ac <main+0x37c>)
 8002842:	e045      	b.n	80028d0 <main+0x3a0>
 8002844:	40021000 	.word	0x40021000
 8002848:	e000e100 	.word	0xe000e100
 800284c:	2000108c 	.word	0x2000108c
 8002850:	40010800 	.word	0x40010800
 8002854:	8bb888b4 	.word	0x8bb888b4
 8002858:	40010c00 	.word	0x40010c00
 800285c:	88888858 	.word	0x88888858
 8002860:	40011000 	.word	0x40011000
 8002864:	88588888 	.word	0x88588888
 8002868:	40011400 	.word	0x40011400
 800286c:	88888844 	.word	0x88888844
 8002870:	08003878 	.word	0x08003878
 8002874:	2000107c 	.word	0x2000107c
 8002878:	08003858 	.word	0x08003858
 800287c:	40022000 	.word	0x40022000
 8002880:	40013800 	.word	0x40013800
 8002884:	08000be1 	.word	0x08000be1
 8002888:	02255100 	.word	0x02255100
 800288c:	2000159c 	.word	0x2000159c
 8002890:	20001800 	.word	0x20001800
 8002894:	200017b0 	.word	0x200017b0
 8002898:	20001628 	.word	0x20001628
 800289c:	200017f8 	.word	0x200017f8
 80028a0:	08003614 	.word	0x08003614
 80028a4:	e000ed00 	.word	0xe000ed00
 80028a8:	05fa0300 	.word	0x05fa0300
 80028ac:	08003628 	.word	0x08003628
 80028b0:	40007000 	.word	0x40007000
 80028b4:	e0042000 	.word	0xe0042000
 80028b8:	2000180c 	.word	0x2000180c
 80028bc:	08000ba1 	.word	0x08000ba1
 80028c0:	08000c81 	.word	0x08000c81
 80028c4:	200019e8 	.word	0x200019e8
 80028c8:	20005000 	.word	0x20005000
 80028cc:	e0001000 	.word	0xe0001000
  tp->wabase = tdp->wbase;
 80028d0:	f8df c3b4 	ldr.w	ip, [pc, #948]	; 8002c88 <main+0x758>
  lp->next = lp;
 80028d4:	f104 0168 	add.w	r1, r4, #104	; 0x68
  tp->name              = name;
 80028d8:	65a0      	str	r0, [r4, #88]	; 0x58
  dlhp->next  = dlhp;
 80028da:	f104 0010 	add.w	r0, r4, #16
  p->prev       = qp->prev;
 80028de:	f104 0328 	add.w	r3, r4, #40	; 0x28
  dlhp->prev  = dlhp;
 80028e2:	e9c4 0004 	strd	r0, r0, [r4, #16]
  dlhp->delta = (sysinterval_t)-1;
 80028e6:	f8c4 b018 	str.w	fp, [r4, #24]
  lp->next = lp;
 80028ea:	66a1      	str	r1, [r4, #104]	; 0x68
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 80028ec:	f104 0b3c 	add.w	fp, r4, #60	; 0x3c
  p->prev->next = p;
 80028f0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  qp->next = qp;
 80028f4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
  qp->prev = qp;
 80028f8:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
 80028fc:	f8c4 b00c 	str.w	fp, [r4, #12]
  p->prev       = qp->prev;
 8002900:	6523      	str	r3, [r4, #80]	; 0x50
  p->prev->next = p;
 8002902:	62a1      	str	r1, [r4, #40]	; 0x28
  tp->hdr.pqueue.prio   = prio;
 8002904:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
  tp->realprio          = prio;
 8002908:	f8c4 e07c 	str.w	lr, [r4, #124]	; 0x7c
  tp->epending          = (eventmask_t)0;
 800290c:	e9c4 661d 	strd	r6, r6, [r4, #116]	; 0x74
  pqp->next = pqp;
 8002910:	6024      	str	r4, [r4, #0]
  pqp->prio = (tprio_t)0;
 8002912:	60a6      	str	r6, [r4, #8]
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 8002914:	6366      	str	r6, [r4, #52]	; 0x34
  vtlp->lasttime = (systime_t)0;
 8002916:	83a6      	strh	r6, [r4, #28]
  tp->owner             = oip;
 8002918:	6564      	str	r4, [r4, #84]	; 0x54
  oip->rlist.current->wabase = oicp->mainthread_base;
 800291a:	65e6      	str	r6, [r4, #92]	; 0x5c
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 800291c:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  oip->rlist.current->state = CH_STATE_CURRENT;
 8002920:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
  p->next       = qp;
 8002924:	f8cc 30c8 	str.w	r3, [ip, #200]	; 0xc8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002928:	4bc3      	ldr	r3, [pc, #780]	; (8002c38 <main+0x708>)
  p->prev       = qp->prev;
 800292a:	f8cc 10cc 	str.w	r1, [ip, #204]	; 0xcc
 800292e:	f10c 0194 	add.w	r1, ip, #148	; 0x94
 8002932:	f8cc 10c4 	str.w	r1, [ip, #196]	; 0xc4
 8002936:	f8cc 3094 	str.w	r3, [ip, #148]	; 0x94
  lp->next = lp;
 800293a:	f10c 01e4 	add.w	r1, ip, #228	; 0xe4
  tp->name              = name;
 800293e:	4bbf      	ldr	r3, [pc, #764]	; (8002c3c <main+0x70c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002940:	f8df b348 	ldr.w	fp, [pc, #840]	; 8002c8c <main+0x75c>
  p->prev->next = p;
 8002944:	f10c 00c8 	add.w	r0, ip, #200	; 0xc8
  lp->next = lp;
 8002948:	f8cc 10e4 	str.w	r1, [ip, #228]	; 0xe4
  qp->next = qp;
 800294c:	f10c 01e8 	add.w	r1, ip, #232	; 0xe8
  tp->name              = name;
 8002950:	f8cc 30d4 	str.w	r3, [ip, #212]	; 0xd4
  p->prev->next = p;
 8002954:	64e0      	str	r0, [r4, #76]	; 0x4c
  qp->prev      = p;
 8002956:	62e0      	str	r0, [r4, #44]	; 0x2c
  tp->epending          = (eventmask_t)0;
 8002958:	e9cc 663c 	strd	r6, r6, [ip, #240]	; 0xf0
  qp->prev = qp;
 800295c:	e9cc 113a 	strd	r1, r1, [ip, #232]	; 0xe8
  tp->refs              = (trefs_t)1;
 8002960:	f884 9062 	strb.w	r9, [r4, #98]	; 0x62
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002964:	f8cc 6098 	str.w	r6, [ip, #152]	; 0x98
  tp->owner             = oip;
 8002968:	f8cc 40d0 	str.w	r4, [ip, #208]	; 0xd0
  tp->wabase = tdp->wbase;
 800296c:	f8cc c0d8 	str.w	ip, [ip, #216]	; 0xd8
  tp->hdr.pqueue.prio   = prio;
 8002970:	f8cc 90c0 	str.w	r9, [ip, #192]	; 0xc0
  tp->realprio          = prio;
 8002974:	f8cc 90f8 	str.w	r9, [ip, #248]	; 0xf8
  tp->refs              = (trefs_t)1;
 8002978:	f88c 90de 	strb.w	r9, [ip, #222]	; 0xde
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800297c:	f10c 00b8 	add.w	r0, ip, #184	; 0xb8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002980:	f8cc b0b4 	str.w	fp, [ip, #180]	; 0xb4
  tp->state             = CH_STATE_WTSTART;
 8002984:	f8ac a0dc 	strh.w	sl, [ip, #220]	; 0xdc
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8002988:	f7fe fff2 	bl	8001970 <chSchReadyI>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 800298c:	4bac      	ldr	r3, [pc, #688]	; (8002c40 <main+0x710>)
 800298e:	f883 a000 	strb.w	sl, [r3]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002992:	f386 8811 	msr	BASEPRI, r6
  sdup->vmt = &vmt;
 8002996:	4bab      	ldr	r3, [pc, #684]	; (8002c44 <main+0x714>)
  ibqp->bsize     = size + sizeof (size_t);
 8002998:	f44f 7082 	mov.w	r0, #260	; 0x104
 800299c:	4619      	mov	r1, r3
 800299e:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 8002c90 <main+0x760>
  obqp->notify    = onfy;
 80029a2:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 8002c94 <main+0x764>
 80029a6:	f841 cb04 	str.w	ip, [r1], #4
  ibqp->notify    = infy;
 80029aa:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8002c98 <main+0x768>
  obqp->notify    = onfy;
 80029ae:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
  ibqp->notify    = infy;
 80029b2:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80029b6:	f203 4c8c 	addw	ip, r3, #1164	; 0x48c
 80029ba:	f8c3 c05c 	str.w	ip, [r3, #92]	; 0x5c
  qp->next = qp;
 80029be:	f103 0c0c 	add.w	ip, r3, #12
  ibqp->brdptr    = bp;
 80029c2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  qp->prev = qp;
 80029c6:	e9c3 cc03 	strd	ip, ip, [r3, #12]
 80029ca:	6059      	str	r1, [r3, #4]
  qp->next = qp;
 80029cc:	f103 0c44 	add.w	ip, r3, #68	; 0x44
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80029d0:	f503 7121 	add.w	r1, r3, #644	; 0x284
  ibqp->bcounter  = 0;
 80029d4:	619e      	str	r6, [r3, #24]
 80029d6:	2220      	movs	r2, #32
  ibqp->top       = NULL;
 80029d8:	e9c3 660d 	strd	r6, r6, [r3, #52]	; 0x34
  obqp->top       = NULL;
 80029dc:	e9c3 661b 	strd	r6, r6, [r3, #108]	; 0x6c
  ibqp->bwrptr    = bp;
 80029e0:	e9c3 ee07 	strd	lr, lr, [r3, #28]
  obqp->bwrptr    = bp;
 80029e4:	e9c3 1115 	strd	r1, r1, [r3, #84]	; 0x54
  qp->prev = qp;
 80029e8:	e9c3 cc11 	strd	ip, ip, [r3, #68]	; 0x44
  sdup->state = SDU_STOP;
 80029ec:	f883 9008 	strb.w	r9, [r3, #8]
  ibqp->suspended = suspended;
 80029f0:	f883 9014 	strb.w	r9, [r3, #20]
  ibqp->bn        = n;
 80029f4:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
  obqp->suspended = suspended;
 80029f8:	f883 904c 	strb.w	r9, [r3, #76]	; 0x4c
  obqp->bcounter  = n;
 80029fc:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
  obqp->bn        = n;
 8002a00:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
  ibqp->link      = link;
 8002a04:	641b      	str	r3, [r3, #64]	; 0x40
  obqp->link      = link;
 8002a06:	679b      	str	r3, [r3, #120]	; 0x78
  ibqp->buffers   = bp;
 8002a08:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8002a0c:	6259      	str	r1, [r3, #36]	; 0x24
  obqp->buffers   = bp;
 8002a0e:	6699      	str	r1, [r3, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 8002a10:	6298      	str	r0, [r3, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 8002a12:	6618      	str	r0, [r3, #96]	; 0x60
 8002a14:	f382 8811 	msr	BASEPRI, r2
  sdup->config = config;
 8002a18:	498b      	ldr	r1, [pc, #556]	; (8002c48 <main+0x718>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
  sdup->state = SDU_READY;
 8002a20:	f883 a008 	strb.w	sl, [r3, #8]
  sdup->config = config;
 8002a24:	f8c3 148c 	str.w	r1, [r3, #1164]	; 0x48c
 8002a28:	f386 8811 	msr	BASEPRI, r6
 8002a2c:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002a30:	7a2b      	ldrb	r3, [r5, #8]
 8002a32:	454b      	cmp	r3, r9
 8002a34:	d105      	bne.n	8002a42 <main+0x512>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8002a36:	4b85      	ldr	r3, [pc, #532]	; (8002c4c <main+0x71c>)
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	699b      	ldr	r3, [r3, #24]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002a42:	f04f 0e40 	mov.w	lr, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002a46:	f04f 0c01 	mov.w	ip, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002a4a:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8002a4e:	2600      	movs	r6, #0
    sdp->rxmask = 0xFF;
 8002a50:	21ff      	movs	r1, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8002a52:	2202      	movs	r2, #2
  brr = (uint32_t)(sdp->clock / config->speed);
 8002a54:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002a56:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8002c9c <main+0x76c>
 8002a5a:	fba9 3903 	umull	r3, r9, r9, r3
  USART_TypeDef *u = sdp->usart;
 8002a5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  brr = (uint32_t)(sdp->clock / config->speed);
 8002a60:	ea4f 2919 	mov.w	r9, r9, lsr #8
  u->BRR = brr;
 8002a64:	f8c3 9008 	str.w	r9, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002a68:	f8c3 e010 	str.w	lr, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002a6c:	f8c3 c014 	str.w	ip, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002a70:	60d8      	str	r0, [r3, #12]
  u->SR = 0;
 8002a72:	601e      	str	r6, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002a74:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002a76:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8002a78:	f885 107c 	strb.w	r1, [r5, #124]	; 0x7c
 8002a7c:	722a      	strb	r2, [r5, #8]
 8002a7e:	f386 8811 	msr	BASEPRI, r6
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 8002a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a86:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <main+0x720>)
  chThdSleepMilliseconds(1500);
 8002a88:	f640 30b8 	movw	r0, #3000	; 0xbb8
  usbDisconnectBus(serusbcfg.usbp);
 8002a8c:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8002a8e:	f7ff fa87 	bl	8001fa0 <chThdSleep>
 8002a92:	2320      	movs	r3, #32
 8002a94:	f383 8811 	msr	BASEPRI, r3
  if (usbp->state == USB_STOP) {
 8002a98:	f897 e000 	ldrb.w	lr, [r7]
  usbp->config = config;
 8002a9c:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <main+0x724>)
 8002a9e:	f1be 0f01 	cmp.w	lr, #1
    usbp->epc[i] = NULL;
 8002aa2:	e9c7 6603 	strd	r6, r6, [r7, #12]
 8002aa6:	e9c7 6605 	strd	r6, r6, [r7, #20]
 8002aaa:	e9c7 6607 	strd	r6, r6, [r7, #28]
 8002aae:	e9c7 6609 	strd	r6, r6, [r7, #36]	; 0x24
  usbp->config = config;
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	d11e      	bne.n	8002af4 <main+0x5c4>
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002ab6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002aba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002abe:	f04f 0cd0 	mov.w	ip, #208	; 0xd0
 8002ac2:	25e0      	movs	r5, #224	; 0xe0
      rccEnableUSB(true);
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <main+0x71c>)
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002acc:	61da      	str	r2, [r3, #28]
 8002ace:	69db      	ldr	r3, [r3, #28]
      STM32_USB->CNTR = CNTR_FRES;
 8002ad0:	4a61      	ldr	r2, [pc, #388]	; (8002c58 <main+0x728>)
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <main+0x72c>)
 8002ad4:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
 8002ad8:	f883 c313 	strb.w	ip, [r3, #787]	; 0x313
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002adc:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002ae0:	6018      	str	r0, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002ae2:	f883 5314 	strb.w	r5, [r3, #788]	; 0x314
    usb_lld_reset(usbp);
 8002ae6:	485e      	ldr	r0, [pc, #376]	; (8002c60 <main+0x730>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002ae8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002aec:	6019      	str	r1, [r3, #0]
      STM32_USB->CNTR = 0;
 8002aee:	6416      	str	r6, [r2, #64]	; 0x40
    usb_lld_reset(usbp);
 8002af0:	f7fe f9ee 	bl	8000ed0 <usb_lld_reset>
  usbp->state = USB_READY;
 8002af4:	2102      	movs	r1, #2
 8002af6:	2200      	movs	r2, #0
 8002af8:	7039      	strb	r1, [r7, #0]
 8002afa:	f382 8811 	msr	BASEPRI, r2
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8002afe:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002b02:	4853      	ldr	r0, [pc, #332]	; (8002c50 <main+0x720>)
 8002b04:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <main+0x734>)
 8002b06:	6145      	str	r5, [r0, #20]
 8002b08:	2020      	movs	r0, #32
 8002b0a:	601b      	str	r3, [r3, #0]
 8002b0c:	f380 8811 	msr	BASEPRI, r0
  tp->hdr.pqueue.prio   = prio;
 8002b10:	2080      	movs	r0, #128	; 0x80
  tp->refs              = (trefs_t)1;
 8002b12:	2701      	movs	r7, #1
  tp->wabase = (stkalign_t *)wsp;
 8002b14:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <main+0x738>)
  p->next       = qp;
 8002b16:	4e55      	ldr	r6, [pc, #340]	; (8002c6c <main+0x73c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002b18:	4d55      	ldr	r5, [pc, #340]	; (8002c70 <main+0x740>)
 8002b1a:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
 8002b1e:	f503 7682 	add.w	r6, r3, #260	; 0x104
  tp->state             = CH_STATE_WTSTART;
 8002b22:	f8a3 114c 	strh.w	r1, [r3, #332]	; 0x14c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002b26:	f8c3 6134 	str.w	r6, [r3, #308]	; 0x134
  tp->name              = name;
 8002b2a:	4952      	ldr	r1, [pc, #328]	; (8002c74 <main+0x744>)
  p->prev       = qp->prev;
 8002b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  tp->hdr.pqueue.prio   = prio;
 8002b2e:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
  tp->refs              = (trefs_t)1;
 8002b32:	f883 714e 	strb.w	r7, [r3, #334]	; 0x14e
  tp->realprio          = prio;
 8002b36:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002b3a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
  qp->next = qp;
 8002b3e:	f503 70ac 	add.w	r0, r3, #344	; 0x158
  p->prev->next = p;
 8002b42:	f503 759c 	add.w	r5, r3, #312	; 0x138
  lp->next = lp;
 8002b46:	f503 77aa 	add.w	r7, r3, #340	; 0x154
  tp->name              = name;
 8002b4a:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
  tp->epending          = (eventmask_t)0;
 8002b4e:	e9c3 2258 	strd	r2, r2, [r3, #352]	; 0x160
  thread_t *otp = __instance_get_currthread(oip);
 8002b52:	68e1      	ldr	r1, [r4, #12]
  tp->owner             = oip;
 8002b54:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
  tp->wabase = (stkalign_t *)wsp;
 8002b58:	f8c3 3148 	str.w	r3, [r3, #328]	; 0x148
  p->prev       = qp->prev;
 8002b5c:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002b60:	f8c3 b124 	str.w	fp, [r3, #292]	; 0x124
 8002b64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  p->prev->next = p;
 8002b68:	6035      	str	r5, [r6, #0]
  qp->next = qp;
 8002b6a:	e9c3 7055 	strd	r7, r0, [r3, #340]	; 0x154
  qp->prev      = p;
 8002b6e:	62e5      	str	r5, [r4, #44]	; 0x2c
  qp->prev = qp;
 8002b70:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002b74:	6888      	ldr	r0, [r1, #8]
 8002b76:	f8d3 5130 	ldr.w	r5, [r3, #304]	; 0x130
  ntp->u.rdymsg = msg;
 8002b7a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002b7e:	4285      	cmp	r5, r0
 8002b80:	f240 80fd 	bls.w	8002d7e <main+0x84e>
  return (thread_t *)ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8002b84:	698d      	ldr	r5, [r1, #24]
  tp->state = CH_STATE_READY;
 8002b86:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    pqp = pqp->next;
 8002b8a:	682d      	ldr	r5, [r5, #0]
  } while (unlikely(pqp->prio > p->prio));
 8002b8c:	68aa      	ldr	r2, [r5, #8]
 8002b8e:	4290      	cmp	r0, r2
 8002b90:	d3fb      	bcc.n	8002b8a <main+0x65a>
    ntp->state = CH_STATE_CURRENT;
 8002b92:	2601      	movs	r6, #1
  p->prev       = pqp->prev;
 8002b94:	686a      	ldr	r2, [r5, #4]
    __instance_set_currthread(oip, ntp);
 8002b96:	4838      	ldr	r0, [pc, #224]	; (8002c78 <main+0x748>)
 8002b98:	e9c1 5200 	strd	r5, r2, [r1]
  p->prev->next = p;
 8002b9c:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002b9e:	6069      	str	r1, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 8002ba0:	f883 614c 	strb.w	r6, [r3, #332]	; 0x14c
    __instance_set_currthread(oip, ntp);
 8002ba4:	60e0      	str	r0, [r4, #12]
    chSysSwitch(ntp, otp);
 8002ba6:	f7fd fb4b 	bl	8000240 <__port_switch>
 8002baa:	2300      	movs	r3, #0
 8002bac:	f383 8811 	msr	BASEPRI, r3

  uint8_t start_page = PAGE_START;
  uint8_t end_page = PAGE_END;

  // Perform Unlock Sequence
  efl_lld_start(&EFLD1);
 8002bb0:	f7fd ffd6 	bl	8000b60 <efl_lld_start.constprop.0>
  
  // Erase the pages
  for(uint8_t start = start_page; start <= end_page; start++){
 8002bb4:	227f      	movs	r2, #127	; 0x7f
  eflp->flash->SR = 0x0000001FU;
 8002bb6:	201f      	movs	r0, #31
  if (devp->state == FLASH_ERASE) {
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <main+0x74c>)
  devp->flash->AR = (uint32_t)(efl_lld_descriptor.address + offset);
 8002bba:	4931      	ldr	r1, [pc, #196]	; (8002c80 <main+0x750>)
  if (devp->state == FLASH_ERASE) {
 8002bbc:	791c      	ldrb	r4, [r3, #4]
  stm32_flash_clear_status(devp);
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0612      	lsls	r2, r2, #24
 8002bc2:	f140 80c8 	bpl.w	8002d56 <main+0x826>
  }

  // Perform Lock 
  efl_lld_stop(&EFLD1);

  uint16_t current_position_flash = 0;
 8002bc6:	2500      	movs	r5, #0
  eflp->flash->CR |= FLASH_CR_LOCK;
 8002bc8:	691a      	ldr	r2, [r3, #16]

  while (true) {

    uint8_t received_char = sdGet(&SD1);
 8002bca:	4c2e      	ldr	r4, [pc, #184]	; (8002c84 <main+0x754>)
 8002bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        }
      }
      else if(received_char == 0xFF){
        uint8_t *data_outgoing = (uint8_t *)malloc(sizeof(uint8_t));
        for(uint16_t byte_no=0; byte_no<current_position_flash; byte_no++){
          efl_lld_read(&EFLD1, 0x400*start_page+byte_no, 1, data_outgoing);
 8002bd0:	4f2a      	ldr	r7, [pc, #168]	; (8002c7c <main+0x74c>)
 8002bd2:	611a      	str	r2, [r3, #16]
          sdPut(&SD1, *data_outgoing);
 8002bd4:	f104 0624 	add.w	r6, r4, #36	; 0x24
    uint8_t received_char = sdGet(&SD1);
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff f8d7 	bl	8001d90 <iqGetTimeout>
    if(received_char!=0){
 8002be2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8002be6:	d0f7      	beq.n	8002bd8 <main+0x6a8>
      if(received_char == START_BYTE){
 8002be8:	288d      	cmp	r0, #141	; 0x8d
 8002bea:	d059      	beq.n	8002ca0 <main+0x770>
      else if(received_char == 0xFF){
 8002bec:	28ff      	cmp	r0, #255	; 0xff
 8002bee:	d1f3      	bne.n	8002bd8 <main+0x6a8>
        uint8_t *data_outgoing = (uint8_t *)malloc(sizeof(uint8_t));
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fd fb3b 	bl	800026c <malloc>
 8002bf6:	4681      	mov	r9, r0
        for(uint16_t byte_no=0; byte_no<current_position_flash; byte_no++){
 8002bf8:	b1cd      	cbz	r5, 8002c2e <main+0x6fe>
 8002bfa:	f44f 38fe 	mov.w	r8, #130048	; 0x1fc00
 8002bfe:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8002c02:	fa1f fa8a 	uxth.w	sl, sl
 8002c06:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8002c0a:	f50a 4a7c 	add.w	sl, sl, #64512	; 0xfc00
          efl_lld_read(&EFLD1, 0x400*start_page+byte_no, 1, data_outgoing);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4641      	mov	r1, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	4638      	mov	r0, r7
 8002c16:	4490      	add	r8, r2
 8002c18:	f7ff fa7a 	bl	8002110 <efl_lld_read>
          sdPut(&SD1, *data_outgoing);
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c20:	4630      	mov	r0, r6
 8002c22:	f899 1000 	ldrb.w	r1, [r9]
 8002c26:	f7ff f873 	bl	8001d10 <oqPutTimeout>
        for(uint16_t byte_no=0; byte_no<current_position_flash; byte_no++){
 8002c2a:	45d0      	cmp	r8, sl
 8002c2c:	d1ef      	bne.n	8002c0e <main+0x6de>
        }
        free(data_outgoing);
 8002c2e:	4648      	mov	r0, r9
 8002c30:	f7fd fb24 	bl	800027c <free>
 8002c34:	e7d0      	b.n	8002bd8 <main+0x6a8>
 8002c36:	bf00      	nop
 8002c38:	08000b91 	.word	0x08000b91
 8002c3c:	080035fc 	.word	0x080035fc
 8002c40:	20001800 	.word	0x20001800
 8002c44:	2000110c 	.word	0x2000110c
 8002c48:	0800374c 	.word	0x0800374c
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010c00 	.word	0x40010c00
 8002c54:	08003754 	.word	0x08003754
 8002c58:	40005c00 	.word	0x40005c00
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	2000159c 	.word	0x2000159c
 8002c64:	20001870 	.word	0x20001870
 8002c68:	20001878 	.word	0x20001878
 8002c6c:	20001650 	.word	0x20001650
 8002c70:	08001fc1 	.word	0x08001fc1
 8002c74:	08003604 	.word	0x08003604
 8002c78:	200019a0 	.word	0x200019a0
 8002c7c:	2000107c 	.word	0x2000107c
 8002c80:	0801fc00 	.word	0x0801fc00
 8002c84:	20001098 	.word	0x20001098
 8002c88:	200016b0 	.word	0x200016b0
 8002c8c:	08000251 	.word	0x08000251
 8002c90:	080038a0 	.word	0x080038a0
 8002c94:	08001821 	.word	0x08001821
 8002c98:	08001751 	.word	0x08001751
 8002c9c:	1b4e81b5 	.word	0x1b4e81b5
        uint8_t data_len = sdGet(&SD1);
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff f873 	bl	8001d90 <iqGetTimeout>
        if(data_len != 0){
 8002caa:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 8002cae:	d093      	beq.n	8002bd8 <main+0x6a8>
          uint8_t *data_incoming = (uint8_t *)malloc(sizeof(uint8_t)*(data_len+1));
 8002cb0:	f108 0001 	add.w	r0, r8, #1
 8002cb4:	f7fd fada 	bl	800026c <malloc>
 8002cb8:	f04f 0a00 	mov.w	sl, #0
 8002cbc:	4681      	mov	r9, r0
          for(uint8_t start=0; start<=data_len; start++){
 8002cbe:	46d3      	mov	fp, sl
            data_incoming[start] = sdGet(&SD1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7ff f863 	bl	8001d90 <iqGetTimeout>
 8002cca:	f10a 0a01 	add.w	sl, sl, #1
 8002cce:	f809 000b 	strb.w	r0, [r9, fp]
          for(uint8_t start=0; start<=data_len; start++){
 8002cd2:	fa5f fb8a 	uxtb.w	fp, sl
 8002cd6:	45d8      	cmp	r8, fp
 8002cd8:	d2f2      	bcs.n	8002cc0 <main+0x790>
          if(sdGet(&SD1)==END_BYTE){
 8002cda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7ff f856 	bl	8001d90 <iqGetTimeout>
 8002ce4:	288f      	cmp	r0, #143	; 0x8f
 8002ce6:	d1a2      	bne.n	8002c2e <main+0x6fe>
    uint8_t crc = 0x00;
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8002cee:	eb09 0c08 	add.w	ip, r9, r8
        crc ^= data[i];
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002cf8:	405a      	eors	r2, r3
                crc = (uint8_t)((crc << 1) ^ generator);
 8002cfa:	0053      	lsls	r3, r2, #1
            if ((crc & 0x80) != 0)
 8002cfc:	f012 0f80 	tst.w	r2, #128	; 0x80
                crc = (uint8_t)((crc << 1) ^ generator);
 8002d00:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002d04:	bf14      	ite	ne
 8002d06:	b2da      	uxtbne	r2, r3
                crc <<= 1;
 8002d08:	0052      	lsleq	r2, r2, #1
 8002d0a:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 8002d0e:	bf08      	it	eq
 8002d10:	b2d2      	uxtbeq	r2, r2
        for (j = 0; j < 8; j++) {
 8002d12:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8002d16:	d1f0      	bne.n	8002cfa <main+0x7ca>
    for (i = 0; i < len; i++) {
 8002d18:	4560      	cmp	r0, ip
 8002d1a:	d1ea      	bne.n	8002cf2 <main+0x7c2>
            if(!gencrc(data_incoming, data_len+1, 0x31)){
 8002d1c:	2a00      	cmp	r2, #0
 8002d1e:	d186      	bne.n	8002c2e <main+0x6fe>
              efl_lld_start(&EFLD1);
 8002d20:	f7fd ff1e 	bl	8000b60 <efl_lld_start.constprop.0>
              efl_lld_program(&EFLD1, 0x400*start_page + current_position_flash, data_len, data_incoming);
 8002d24:	464b      	mov	r3, r9
 8002d26:	4642      	mov	r2, r8
 8002d28:	f505 31fe 	add.w	r1, r5, #130048	; 0x1fc00
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f7fe f917 	bl	8000f60 <efl_lld_program>
  stm32_flash_lock(eflp);
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <main+0x870>)
              sdPut(&SD1, ACK_BYTE);
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d38:	68d9      	ldr	r1, [r3, #12]
 8002d3a:	4630      	mov	r0, r6
  eflp->flash->CR |= FLASH_CR_LOCK;
 8002d3c:	690b      	ldr	r3, [r1, #16]
              current_position_flash += data_len;
 8002d3e:	4445      	add	r5, r8
 8002d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d44:	610b      	str	r3, [r1, #16]
              sdPut(&SD1, ACK_BYTE);
 8002d46:	2190      	movs	r1, #144	; 0x90
 8002d48:	f7fe ffe2 	bl	8001d10 <oqPutTimeout>
        free(data_outgoing);
 8002d4c:	4648      	mov	r0, r9
              current_position_flash += data_len;
 8002d4e:	b2ad      	uxth	r5, r5
        free(data_outgoing);
 8002d50:	f7fd fa94 	bl	800027c <free>
 8002d54:	e740      	b.n	8002bd8 <main+0x6a8>
  if (devp->state == FLASH_ERASE) {
 8002d56:	2c05      	cmp	r4, #5
  for(uint8_t start = start_page; start <= end_page; start++){
 8002d58:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002d5c:	f43f af30 	beq.w	8002bc0 <main+0x690>
  eflp->flash->SR = 0x0000001FU;
 8002d60:	60d8      	str	r0, [r3, #12]
  devp->flash->CR |= FLASH_CR_PER;
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	f042 0202 	orr.w	r2, r2, #2
 8002d68:	611a      	str	r2, [r3, #16]
  devp->flash->AR = (uint32_t)(efl_lld_descriptor.address + offset);
 8002d6a:	6159      	str	r1, [r3, #20]
  devp->flash->CR |= FLASH_CR_STRT;
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	611a      	str	r2, [r3, #16]
  while((devp->flash->SR & FLASH_SR_BSY) == 1);
 8002d74:	68dd      	ldr	r5, [r3, #12]
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	07ed      	lsls	r5, r5, #31
 8002d7a:	d4fb      	bmi.n	8002d74 <main+0x844>
 8002d7c:	e720      	b.n	8002bc0 <main+0x690>
  tp->state = CH_STATE_READY;
 8002d7e:	4909      	ldr	r1, [pc, #36]	; (8002da4 <main+0x874>)
 8002d80:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    pqp = pqp->next;
 8002d84:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002d86:	688a      	ldr	r2, [r1, #8]
 8002d88:	4295      	cmp	r5, r2
 8002d8a:	d9fb      	bls.n	8002d84 <main+0x854>
  p->next       = pqp;
 8002d8c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
  p->prev       = pqp->prev;
 8002d90:	6848      	ldr	r0, [r1, #4]
  p->prev->next = p;
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <main+0x878>)
  p->prev       = pqp->prev;
 8002d94:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
  p->prev->next = p;
 8002d98:	6002      	str	r2, [r0, #0]
  pqp->prev     = p;
 8002d9a:	604a      	str	r2, [r1, #4]
 8002d9c:	e705      	b.n	8002baa <main+0x67a>
 8002d9e:	bf00      	nop
 8002da0:	2000107c 	.word	0x2000107c
 8002da4:	20001628 	.word	0x20001628
 8002da8:	200019a0 	.word	0x200019a0
 8002dac:	00000000 	.word	0x00000000

08002db0 <_sbrk_r>:
}

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr) {
 8002db0:	4602      	mov	r2, r0
 8002db2:	2320      	movs	r3, #32
 8002db4:	b410      	push	{r4}
 8002db6:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <_sbrk_r+0x3c>)
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 8002dbc:	e9d3 0400 	ldrd	r0, r4, [r3]
  next = p + size;
 8002dc0:	4401      	add	r1, r0
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 8002dc2:	42a1      	cmp	r1, r4
 8002dc4:	d808      	bhi.n	8002dd8 <_sbrk_r+0x28>
 8002dc6:	4288      	cmp	r0, r1
 8002dc8:	d806      	bhi.n	8002dd8 <_sbrk_r+0x28>
  ch_memcore.basemem = next;
 8002dca:	6019      	str	r1, [r3, #0]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheck(incr >= 0);

  p = chCoreAllocFromBase((size_t)incr, 1U, 0U);
  if (p == NULL) {
 8002dd2:	b120      	cbz	r0, 8002dde <_sbrk_r+0x2e>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8002dd4:	bc10      	pop	{r4}
 8002dd6:	4770      	bx	lr
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f383 8811 	msr	BASEPRI, r3
    __errno_r(r)  = ENOMEM;
 8002dde:	230c      	movs	r3, #12
    return (caddr_t)-1;
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002de4:	bc10      	pop	{r4}
    __errno_r(r)  = ENOMEM;
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	200017f8 	.word	0x200017f8

08002df0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002df0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8002df4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002df6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f383 8811 	msr	BASEPRI, r3
}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
	...

08002e10 <chThdExit>:
void chThdExit(msg_t msg) {
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	2320      	movs	r3, #32
 8002e14:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <chThdExit+0x54>)
 8002e1a:	68dc      	ldr	r4, [r3, #12]
  return (bool)(lp->next != lp);
 8002e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8002e1e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8002e22:	429d      	cmp	r5, r3
  currtp->u.exitcode = msg;
 8002e24:	62a0      	str	r0, [r4, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8002e26:	d107      	bne.n	8002e38 <chThdExit+0x28>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8002e28:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8002e2c:	b183      	cbz	r3, 8002e50 <chThdExit+0x40>
}
 8002e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002e32:	200f      	movs	r0, #15
 8002e34:	f7fe be94 	b.w	8001b60 <chSchGoSleepS>
  lp->next = p->next;
 8002e38:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI((thread_t *)ch_list_unlink(&currtp->waiting));
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002e3e:	f7fe fd97 	bl	8001970 <chSchReadyI>
  return (bool)(lp->next != lp);
 8002e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8002e44:	42ab      	cmp	r3, r5
 8002e46:	d1f7      	bne.n	8002e38 <chThdExit+0x28>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8002e48:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <chThdExit+0x1e>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8002e50:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002e54:	079b      	lsls	r3, r3, #30
 8002e56:	d1ea      	bne.n	8002e2e <chThdExit+0x1e>
  p->prev->next = p->next;
 8002e58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002e5c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8002e5e:	605a      	str	r2, [r3, #4]
  return p;
 8002e60:	e7e5      	b.n	8002e2e <chThdExit+0x1e>
 8002e62:	bf00      	nop
 8002e64:	20001628 	.word	0x20001628
	...

08002e70 <chSchDoPreemption>:
  thread_t *otp = __instance_get_currthread(oip);
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = (thread_t *)ch_pqueue_remove_highest(&oip->rlist.pqueue);
  ntp->state = CH_STATE_CURRENT;
 8002e70:	2301      	movs	r3, #1
void chSchDoPreemption(void) {
 8002e72:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 8002e74:	2500      	movs	r5, #0
  thread_t *otp = __instance_get_currthread(oip);
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <chSchDoPreemption+0x38>)
  ch_priority_queue_t *p = pqp->next;
 8002e78:	6810      	ldr	r0, [r2, #0]
 8002e7a:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8002e7c:	6804      	ldr	r4, [r0, #0]
  pqp->next->prev = pqp;
 8002e7e:	6062      	str	r2, [r4, #4]
  ntp->state = CH_STATE_CURRENT;
 8002e80:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return (thread_t *)ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8002e84:	698b      	ldr	r3, [r1, #24]
  pqp->next       = p->next;
 8002e86:	6014      	str	r4, [r2, #0]
  tp->state = CH_STATE_READY;
 8002e88:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  } while (unlikely(pqp->prio > p->prio));
 8002e8c:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 8002e8e:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 8002e90:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	42a2      	cmp	r2, r4
 8002e96:	d8fb      	bhi.n	8002e90 <chSchDoPreemption+0x20>
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
}
 8002e98:	bc30      	pop	{r4, r5}
  p->prev       = pqp->prev;
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8002ea0:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002ea2:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8002ea4:	f7fd b9cc 	b.w	8000240 <__port_switch>
 8002ea8:	20001628 	.word	0x20001628
 8002eac:	00000000 	.word	0x00000000

08002eb0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002eb2:	4613      	mov	r3, r2
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002eb4:	6811      	ldr	r1, [r2, #0]
 8002eb6:	f041 0101 	orr.w	r1, r1, #1
 8002eba:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	0791      	lsls	r1, r2, #30
 8002ec0:	d5fc      	bpl.n	8002ebc <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002ec2:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002ec4:	6819      	ldr	r1, [r3, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002ec8:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8002ecc:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002ece:	6058      	str	r0, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002ed0:	6853      	ldr	r3, [r2, #4]
 8002ed2:	f013 0f0c 	tst.w	r3, #12
 8002ed6:	d1fb      	bne.n	8002ed0 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002ed8:	6811      	ldr	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 8002edc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002ee0:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	0392      	lsls	r2, r2, #14
 8002ee6:	d5fc      	bpl.n	8002ee2 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002ee8:	6859      	ldr	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002eea:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002eec:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8002ef0:	6059      	str	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002ef8:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	d5fc      	bpl.n	8002efa <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002f00:	2112      	movs	r1, #18
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002f04:	4808      	ldr	r0, [pc, #32]	; (8002f28 <__early_init+0x78>)
 8002f06:	6050      	str	r0, [r2, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8002f08:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002f0a:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002f14:	684b      	ldr	r3, [r1, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d1fa      	bne.n	8002f14 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40022000 	.word	0x40022000
 8002f28:	001d6400 	.word	0x001d6400
 8002f2c:	00000000 	.word	0x00000000

08002f30 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8002f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 8002f34:	4bc3      	ldr	r3, [pc, #780]	; (8003244 <Vector90+0x314>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8002f36:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 8002f38:	6c5d      	ldr	r5, [r3, #68]	; 0x44
  if (istr & ISTR_RESET) {
 8002f3a:	056f      	lsls	r7, r5, #21
 8002f3c:	f100 8147 	bmi.w	80031ce <Vector90+0x29e>
  if (istr & ISTR_SUSP) {
 8002f40:	052e      	lsls	r6, r5, #20
 8002f42:	f100 8128 	bmi.w	8003196 <Vector90+0x266>
  if (istr & ISTR_WKUP) {
 8002f46:	04ec      	lsls	r4, r5, #19
 8002f48:	d508      	bpl.n	8002f5c <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 8002f4a:	4bbe      	ldr	r3, [pc, #760]	; (8003244 <Vector90+0x314>)
 8002f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8002f4e:	0410      	lsls	r0, r2, #16
 8002f50:	f140 8161 	bpl.w	8003216 <Vector90+0x2e6>
    STM32_USB->ISTR = ~ISTR_WKUP;
 8002f54:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8002f58:	4bba      	ldr	r3, [pc, #744]	; (8003244 <Vector90+0x314>)
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 8002f5c:	05a9      	lsls	r1, r5, #22
 8002f5e:	d50b      	bpl.n	8002f78 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8002f60:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8003248 <Vector90+0x318>
 8002f64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	b10b      	cbz	r3, 8002f70 <Vector90+0x40>
 8002f6c:	4648      	mov	r0, r9
 8002f6e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8002f70:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f74:	4bb3      	ldr	r3, [pc, #716]	; (8003244 <Vector90+0x314>)
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8002f78:	042a      	lsls	r2, r5, #16
 8002f7a:	d57c      	bpl.n	8003076 <Vector90+0x146>
 8002f7c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003248 <Vector90+0x318>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002f80:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8003244 <Vector90+0x314>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002f84:	46cb      	mov	fp, r9
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8002f86:	f005 050f 	and.w	r5, r5, #15
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
 8002f8a:	00ac      	lsls	r4, r5, #2
 8002f8c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002f90:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 8002f94:	f8d4 8000 	ldr.w	r8, [r4]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002f98:	1cae      	adds	r6, r5, #2
 8002f9a:	eb09 0386 	add.w	r3, r9, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 8002f9e:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002fa2:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 8002fa4:	d04e      	beq.n	8003044 <Vector90+0x114>
    USBInEndpointState *isp = epcp->in_state;
 8002fa6:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 8002faa:	6822      	ldr	r2, [r4, #0]
    isp->txcnt += isp->txlast;
 8002fac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002fb0:	f8dc 100c 	ldr.w	r1, [ip, #12]
    n = isp->txsize - isp->txcnt;
 8002fb4:	f8dc 0000 	ldr.w	r0, [ip]
    EPR_CLEAR_CTR_TX(ep);
 8002fb8:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
    isp->txcnt += isp->txlast;
 8002fbc:	440b      	add	r3, r1
    EPR_CLEAR_CTR_TX(ep);
 8002fbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    if (n > 0) {
 8002fc6:	1ac0      	subs	r0, r0, r3
    EPR_CLEAR_CTR_TX(ep);
 8002fc8:	6022      	str	r2, [r4, #0]
    isp->txcnt += isp->txlast;
 8002fca:	f8cc 3004 	str.w	r3, [ip, #4]
    if (n > 0) {
 8002fce:	d057      	beq.n	8003080 <Vector90+0x150>
      if (n > epcp->in_maxsize)
 8002fd0:	8a3a      	ldrh	r2, [r7, #16]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002fd2:	012b      	lsls	r3, r5, #4
 8002fd4:	4290      	cmp	r0, r2
 8002fd6:	bf28      	it	cs
 8002fd8:	4610      	movcs	r0, r2
      isp->txlast = n;
 8002fda:	f8cc 000c 	str.w	r0, [ip, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002fde:	f8da 2050 	ldr.w	r2, [sl, #80]	; 0x50
 8002fe2:	f102 4e80 	add.w	lr, r2, #1073741824	; 0x40000000
 8002fe6:	f50e 4ec0 	add.w	lr, lr, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002fea:	f85e 3003 	ldr.w	r3, [lr, r3]
      isp->txbuf += isp->txlast;
 8002fee:	f8dc 2008 	ldr.w	r2, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002ff2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
      isp->txbuf += isp->txlast;
 8002ff6:	440a      	add	r2, r1
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002ff8:	eb0e 1e05 	add.w	lr, lr, r5, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002ffc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      isp->txbuf += isp->txlast;
 8003000:	f8cc 2008 	str.w	r2, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003004:	0059      	lsls	r1, r3, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8003006:	f8ce 0004 	str.w	r0, [lr, #4]
  while (i > 0) {
 800300a:	b178      	cbz	r0, 800302c <Vector90+0xfc>
 800300c:	3801      	subs	r0, #1
 800300e:	0840      	lsrs	r0, r0, #1
 8003010:	1d0b      	adds	r3, r1, #4
 8003012:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003016:	4686      	mov	lr, r0
 8003018:	e000      	b.n	800301c <Vector90+0xec>
 800301a:	3304      	adds	r3, #4
 800301c:	468c      	mov	ip, r1
    w |= *buf++ << 8;
 800301e:	f832 0b02 	ldrh.w	r0, [r2], #2
  while (i > 0) {
 8003022:	4573      	cmp	r3, lr
    *pmap++ = (stm32_usb_pma_t)w;
 8003024:	4619      	mov	r1, r3
 8003026:	f8cc 0000 	str.w	r0, [ip]
  while (i > 0) {
 800302a:	d1f6      	bne.n	800301a <Vector90+0xea>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003036:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800303a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003042:	6023      	str	r3, [r4, #0]
  if (epr & EPR_CTR_RX) {
 8003044:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8003048:	d011      	beq.n	800306e <Vector90+0x13e>
    EPR_CLEAR_CTR_RX(ep);
 800304a:	6823      	ldr	r3, [r4, #0]
    if (epr & EPR_SETUP) {
 800304c:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 8003050:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8003054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	6023      	str	r3, [r4, #0]
    if (epr & EPR_SETUP) {
 800305e:	d01e      	beq.n	800309e <Vector90+0x16e>
      _usb_isr_invoke_setup_cb(usbp, ep);
 8003060:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003064:	6873      	ldr	r3, [r6, #4]
 8003066:	4629      	mov	r1, r5
 8003068:	4658      	mov	r0, fp
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 800306e:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8003072:	042b      	lsls	r3, r5, #16
 8003074:	d487      	bmi.n	8002f86 <Vector90+0x56>
}
 8003076:	b005      	add	sp, #20
 8003078:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800307c:	f7fd bdd8 	b.w	8000c30 <__port_irq_epilogue>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003080:	2101      	movs	r1, #1
 8003082:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	40a9      	lsls	r1, r5
 800308a:	ea23 0301 	bic.w	r3, r3, r1
 800308e:	f8a9 3008 	strh.w	r3, [r9, #8]
 8003092:	2a00      	cmp	r2, #0
 8003094:	d0d6      	beq.n	8003044 <Vector90+0x114>
 8003096:	4629      	mov	r1, r5
 8003098:	4658      	mov	r0, fp
 800309a:	4790      	blx	r2
 800309c:	e7d2      	b.n	8003044 <Vector90+0x114>
  while (i >= 2) {
 800309e:	f240 32fe 	movw	r2, #1022	; 0x3fe
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80030a2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 80030a6:	f8d7 c018 	ldr.w	ip, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80030aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80030b2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80030b6:	6899      	ldr	r1, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80030b8:	68d8      	ldr	r0, [r3, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80030ba:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 80030be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80030c2:	f8dc 1008 	ldr.w	r1, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80030c6:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 80030c8:	4210      	tst	r0, r2
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80030ca:	9002      	str	r0, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80030cc:	9300      	str	r3, [sp, #0]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80030ce:	f3c0 0809 	ubfx	r8, r0, #0, #10
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80030d2:	9101      	str	r1, [sp, #4]
  while (i >= 2) {
 80030d4:	f000 80b3 	beq.w	800323e <Vector90+0x30e>
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80030d8:	f8dd e000 	ldr.w	lr, [sp]
 80030dc:	f1a8 0302 	sub.w	r3, r8, #2
 80030e0:	0858      	lsrs	r0, r3, #1
 80030e2:	4672      	mov	r2, lr
 80030e4:	f10e 0e04 	add.w	lr, lr, #4
 80030e8:	9003      	str	r0, [sp, #12]
 80030ea:	eb0e 0e80 	add.w	lr, lr, r0, lsl #2
 80030ee:	1c8b      	adds	r3, r1, #2
    uint32_t w = *pmap++;
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	3204      	adds	r2, #4
    *buf++ = (uint8_t)(w >> 8);
 80030f4:	0a08      	lsrs	r0, r1, #8
  while (i >= 2) {
 80030f6:	4572      	cmp	r2, lr
    *buf++ = (uint8_t)w;
 80030f8:	f803 1c02 	strb.w	r1, [r3, #-2]
    *buf++ = (uint8_t)(w >> 8);
 80030fc:	f803 0c01 	strb.w	r0, [r3, #-1]
  while (i >= 2) {
 8003100:	f103 0302 	add.w	r3, r3, #2
 8003104:	d1f4      	bne.n	80030f0 <Vector90+0x1c0>
 8003106:	9b03      	ldr	r3, [sp, #12]
 8003108:	9a00      	ldr	r2, [sp, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	9a01      	ldr	r2, [sp, #4]
 8003114:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	9b02      	ldr	r3, [sp, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 8003120:	b11b      	cbz	r3, 800312a <Vector90+0x1fa>
    *buf = (uint8_t)*pmap;
 8003122:	9b00      	ldr	r3, [sp, #0]
 8003124:	9a01      	ldr	r2, [sp, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	7013      	strb	r3, [r2, #0]
      osp->rxpkts -= 1;
 800312a:	f8bc 000c 	ldrh.w	r0, [ip, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800312e:	8a7f      	ldrh	r7, [r7, #18]
      osp->rxsize -= n;
 8003130:	f8dc 2000 	ldr.w	r2, [ip]
      osp->rxpkts -= 1;
 8003134:	3801      	subs	r0, #1
      osp->rxcnt  += n;
 8003136:	e9dc 1301 	ldrd	r1, r3, [ip, #4]
      osp->rxpkts -= 1;
 800313a:	b280      	uxth	r0, r0
      osp->rxbuf += n;
 800313c:	4443      	add	r3, r8
      osp->rxcnt  += n;
 800313e:	4441      	add	r1, r8
      osp->rxsize -= n;
 8003140:	eba2 0208 	sub.w	r2, r2, r8
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8003144:	4547      	cmp	r7, r8
      osp->rxcnt  += n;
 8003146:	e9cc 1301 	strd	r1, r3, [ip, #4]
      osp->rxpkts -= 1;
 800314a:	f8ac 000c 	strh.w	r0, [ip, #12]
      osp->rxsize -= n;
 800314e:	f8cc 2000 	str.w	r2, [ip]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8003152:	d800      	bhi.n	8003156 <Vector90+0x226>
 8003154:	b990      	cbnz	r0, 800317c <Vector90+0x24c>
        _usb_isr_invoke_out_cb(usbp, ep);
 8003156:	2201      	movs	r2, #1
 8003158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800315c:	6871      	ldr	r1, [r6, #4]
 800315e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8003162:	40aa      	lsls	r2, r5
 8003164:	68cc      	ldr	r4, [r1, #12]
 8003166:	ea23 0302 	bic.w	r3, r3, r2
 800316a:	f8a9 300a 	strh.w	r3, [r9, #10]
 800316e:	2c00      	cmp	r4, #0
 8003170:	f43f af7d 	beq.w	800306e <Vector90+0x13e>
 8003174:	4629      	mov	r1, r5
 8003176:	4658      	mov	r0, fp
 8003178:	47a0      	blx	r4
 800317a:	e778      	b.n	800306e <Vector90+0x13e>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	e76b      	b.n	800306e <Vector90+0x13e>
    STM32_USB->ISTR = ~ISTR_SUSP;
 8003196:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 800319a:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <Vector90+0x314>)
  usbp->saved_state = usbp->state;
 800319e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003248 <Vector90+0x318>
 80031a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a4:	f042 0208 	orr.w	r2, r2, #8
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 80031aa:	6458      	str	r0, [r3, #68]	; 0x44
 80031ac:	f899 2000 	ldrb.w	r2, [r9]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80031b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->saved_state = usbp->state;
 80031b4:	f889 2080 	strb.w	r2, [r9, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 80031b8:	f889 1000 	strb.w	r1, [r9]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b113      	cbz	r3, 80031c6 <Vector90+0x296>
 80031c0:	2104      	movs	r1, #4
 80031c2:	4648      	mov	r0, r9
 80031c4:	4798      	blx	r3
  usbp->transmitting  = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c9 3008 	str.w	r3, [r9, #8]
 80031cc:	e6bb      	b.n	8002f46 <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_RESET;
 80031ce:	f46f 6180 	mvn.w	r1, #1024	; 0x400
  usbp->status        = 0;
 80031d2:	2400      	movs	r4, #0
  usbp->state         = USB_READY;
 80031d4:	2202      	movs	r2, #2
 80031d6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003248 <Vector90+0x318>
 80031da:	6459      	str	r1, [r3, #68]	; 0x44
  usb_lld_reset(usbp);
 80031dc:	4648      	mov	r0, r9
    usbp->epc[i] = NULL;
 80031de:	e9c9 4402 	strd	r4, r4, [r9, #8]
 80031e2:	e9c9 4404 	strd	r4, r4, [r9, #16]
 80031e6:	e9c9 4406 	strd	r4, r4, [r9, #24]
 80031ea:	e9c9 4408 	strd	r4, r4, [r9, #32]
  usbp->state         = USB_READY;
 80031ee:	f889 2000 	strb.w	r2, [r9]
  usbp->status        = 0;
 80031f2:	f8c9 407c 	str.w	r4, [r9, #124]	; 0x7c
    usbp->epc[i] = NULL;
 80031f6:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
  usbp->ep0state = USB_EP0_STP_WAITING;
 80031fa:	f889 4064 	strb.w	r4, [r9, #100]	; 0x64
  usb_lld_reset(usbp);
 80031fe:	f7fd fe67 	bl	8000ed0 <usb_lld_reset>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8003202:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f43f ae99 	beq.w	8002f40 <Vector90+0x10>
 800320e:	4621      	mov	r1, r4
 8003210:	4648      	mov	r0, r9
 8003212:	4798      	blx	r3
 8003214:	e694      	b.n	8002f40 <Vector90+0x10>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8003216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8003218:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8003248 <Vector90+0x318>
 800321c:	f022 0208 	bic.w	r2, r2, #8
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
 8003222:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003226:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->state = usbp->saved_state;
 800322a:	f889 2000 	strb.w	r2, [r9]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f43f ae8f 	beq.w	8002f54 <Vector90+0x24>
 8003236:	4648      	mov	r0, r9
 8003238:	2105      	movs	r1, #5
 800323a:	4798      	blx	r3
 800323c:	e68a      	b.n	8002f54 <Vector90+0x24>
  i = n;
 800323e:	4643      	mov	r3, r8
 8003240:	e76e      	b.n	8003120 <Vector90+0x1f0>
 8003242:	bf00      	nop
 8003244:	40005c00 	.word	0x40005c00
 8003248:	2000159c 	.word	0x2000159c
 800324c:	00000000 	.word	0x00000000

08003250 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8003254:	4c62      	ldr	r4, [pc, #392]	; (80033e0 <VectorD4+0x190>)
 8003256:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8003258:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 800325c:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800325e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8003260:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8003262:	d476      	bmi.n	8003352 <VectorD4+0x102>
 8003264:	2320      	movs	r3, #32
 8003266:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800326a:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 800326e:	d044      	beq.n	80032fa <VectorD4+0xaa>
  chEvtBroadcastFlagsI(esp, flags);
 8003270:	4f5c      	ldr	r7, [pc, #368]	; (80033e4 <VectorD4+0x194>)
  chThdDequeueNextI(tqp, msg);
 8003272:	f107 0908 	add.w	r9, r7, #8
 8003276:	e008      	b.n	800328a <VectorD4+0x3a>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8003278:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800327a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800327e:	d41e      	bmi.n	80032be <VectorD4+0x6e>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8003280:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003282:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8003286:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003288:	d037      	beq.n	80032fa <VectorD4+0xaa>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800328a:	072b      	lsls	r3, r5, #28
 800328c:	d0f4      	beq.n	8003278 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 800328e:	f015 0f08 	tst.w	r5, #8
 8003292:	bf0c      	ite	eq
 8003294:	2100      	moveq	r1, #0
 8003296:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8003298:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 800329a:	bf48      	it	mi
 800329c:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80032a0:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 80032a2:	bf48      	it	mi
 80032a4:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80032a8:	076b      	lsls	r3, r5, #29
  chEvtBroadcastFlagsI(esp, flags);
 80032aa:	4638      	mov	r0, r7
    sts |= SD_NOISE_ERROR;
 80032ac:	bf48      	it	mi
 80032ae:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80032b2:	f7fe fb95 	bl	80019e0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 80032b6:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80032b8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80032bc:	d5e0      	bpl.n	8003280 <VectorD4+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80032be:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 80032c0:	f894 507c 	ldrb.w	r5, [r4, #124]	; 0x7c
 80032c4:	b3a3      	cbz	r3, 8003330 <VectorD4+0xe0>
  if (!iqIsFullI(iqp)) {
 80032c6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d038      	beq.n	8003340 <VectorD4+0xf0>
    iqp->q_counter++;
 80032ce:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80032d0:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 80032d2:	3201      	adds	r2, #1
 80032d4:	ea05 050a 	and.w	r5, r5, sl
 80032d8:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80032da:	6221      	str	r1, [r4, #32]
 80032dc:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80032de:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d301      	bcc.n	80032ea <VectorD4+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 80032e6:	69a3      	ldr	r3, [r4, #24]
 80032e8:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 80032ea:	4648      	mov	r0, r9
 80032ec:	f7fe fb68 	bl	80019c0 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 80032f0:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80032f2:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80032f6:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80032f8:	d1c7      	bne.n	800328a <VectorD4+0x3a>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8003300:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003304:	d001      	beq.n	800330a <VectorD4+0xba>
 8003306:	062a      	lsls	r2, r5, #24
 8003308:	d432      	bmi.n	8003370 <VectorD4+0x120>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800330a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800330e:	d00b      	beq.n	8003328 <VectorD4+0xd8>
 8003310:	066b      	lsls	r3, r5, #25
 8003312:	d509      	bpl.n	8003328 <VectorD4+0xd8>
 8003314:	2320      	movs	r3, #32
 8003316:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue)) {
 800331a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800331e:	429a      	cmp	r2, r3
 8003320:	d043      	beq.n	80033aa <VectorD4+0x15a>
 8003322:	2300      	movs	r3, #0
 8003324:	f383 8811 	msr	BASEPRI, r3
}
 8003328:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800332c:	f7fd bc80 	b.w	8000c30 <__port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8003330:	2104      	movs	r1, #4
 8003332:	4638      	mov	r0, r7
 8003334:	f7fe fb54 	bl	80019e0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8003338:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800333c:	4293      	cmp	r3, r2
 800333e:	d1c6      	bne.n	80032ce <VectorD4+0x7e>
 8003340:	6962      	ldr	r2, [r4, #20]
 8003342:	2a00      	cmp	r2, #0
 8003344:	d0c3      	beq.n	80032ce <VectorD4+0x7e>
 8003346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800334a:	4638      	mov	r0, r7
 800334c:	f7fe fb48 	bl	80019e0 <chEvtBroadcastFlagsI>
 8003350:	e796      	b.n	8003280 <VectorD4+0x30>
 8003352:	2320      	movs	r3, #32
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800335c:	1d20      	adds	r0, r4, #4
 800335e:	f7fe fb3f 	bl	80019e0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8003362:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003366:	2300      	movs	r3, #0
 8003368:	6032      	str	r2, [r6, #0]
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	e779      	b.n	8003264 <VectorD4+0x14>
 8003370:	2320      	movs	r3, #32
 8003372:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8003376:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800337a:	429a      	cmp	r2, r3
 800337c:	d022      	beq.n	80033c4 <VectorD4+0x174>
    oqp->q_counter++;
 800337e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8003380:	6c20      	ldr	r0, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8003382:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8003384:	3201      	adds	r2, #1
 8003386:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8003388:	64a1      	str	r1, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800338a:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 800338c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800338e:	d301      	bcc.n	8003394 <VectorD4+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8003390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003392:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8003394:	4814      	ldr	r0, [pc, #80]	; (80033e8 <VectorD4+0x198>)
 8003396:	f7fe fb13 	bl	80019c0 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800339a:	6077      	str	r7, [r6, #4]
 800339c:	2300      	movs	r3, #0
 800339e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80033a2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80033a6:	d0bf      	beq.n	8003328 <VectorD4+0xd8>
 80033a8:	e7b2      	b.n	8003310 <VectorD4+0xc0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80033aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0b8      	beq.n	8003322 <VectorD4+0xd2>
  chEvtBroadcastFlagsI(esp, flags);
 80033b0:	2110      	movs	r1, #16
 80033b2:	480c      	ldr	r0, [pc, #48]	; (80033e4 <VectorD4+0x194>)
 80033b4:	f7fe fb14 	bl	80019e0 <chEvtBroadcastFlagsI>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80033b8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80033bc:	ea08 0303 	and.w	r3, r8, r3
 80033c0:	60f3      	str	r3, [r6, #12]
 80033c2:	e7ae      	b.n	8003322 <VectorD4+0xd2>
  if (!oqIsEmptyI(oqp)) {
 80033c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	d0d9      	beq.n	800337e <VectorD4+0x12e>
 80033ca:	2108      	movs	r1, #8
 80033cc:	4805      	ldr	r0, [pc, #20]	; (80033e4 <VectorD4+0x194>)
 80033ce:	f7fe fb07 	bl	80019e0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80033d2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80033d6:	ea08 0303 	and.w	r3, r8, r3
 80033da:	60f3      	str	r3, [r6, #12]
 80033dc:	e7de      	b.n	800339c <VectorD4+0x14c>
 80033de:	bf00      	nop
 80033e0:	2000108c 	.word	0x2000108c
 80033e4:	20001090 	.word	0x20001090
 80033e8:	200010bc 	.word	0x200010bc
 80033ec:	00000000 	.word	0x00000000

080033f0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80033f4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80033f8:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80033fa:	68ea      	ldr	r2, [r5, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8003400:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8003402:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8003404:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8003406:	d403      	bmi.n	8003410 <VectorB0+0x20>
}
 8003408:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800340c:	f7fd bc10 	b.w	8000c30 <__port_irq_epilogue>
 8003410:	2320      	movs	r3, #32
 8003412:	f383 8811 	msr	BASEPRI, r3
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8003416:	2700      	movs	r7, #0
 8003418:	4e4e      	ldr	r6, [pc, #312]	; (8003554 <VectorB0+0x164>)
 800341a:	f106 0810 	add.w	r8, r6, #16
 800341e:	f04f 0a20 	mov.w	sl, #32
 8003422:	6a69      	ldr	r1, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8003424:	f8b6 c01c 	ldrh.w	ip, [r6, #28]
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8003428:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800342c:	b289      	uxth	r1, r1
    if (nowdelta < vtp->dlist.delta) {
 800342e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8003432:	eba1 000c 	sub.w	r0, r1, ip
 8003436:	b280      	uxth	r0, r0
  return systime + (systime_t)interval;
 8003438:	eb0c 0403 	add.w	r4, ip, r3
 800343c:	4298      	cmp	r0, r3
 800343e:	b2a4      	uxth	r4, r4
 8003440:	d33e      	bcc.n	80034c0 <VectorB0+0xd0>
  dlp->prev->next = dlp->next;
 8003442:	e9d9 3200 	ldrd	r3, r2, [r9]
    vtlp->lasttime = lasttime;
 8003446:	83b4      	strh	r4, [r6, #28]
 8003448:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 800344a:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 800344c:	f8c9 7000 	str.w	r7, [r9]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8003450:	6933      	ldr	r3, [r6, #16]
 8003452:	4543      	cmp	r3, r8
  STM32_ST_TIM->DIER = 0U;
 8003454:	bf08      	it	eq
 8003456:	60ef      	streq	r7, [r5, #12]
 8003458:	f387 8811 	msr	BASEPRI, r7

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
    vtp->func(vtp, vtp->par);
 800345c:	4648      	mov	r0, r9
 800345e:	e9d9 3103 	ldrd	r3, r1, [r9, #12]
 8003462:	4798      	blx	r3
 8003464:	f38a 8811 	msr	BASEPRI, sl
    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8003468:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800346c:	2800      	cmp	r0, #0
 800346e:	d0d8      	beq.n	8003422 <VectorB0+0x32>
  return (systime_t)STM32_ST_TIM->CNT;
 8003470:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003472:	fa1f fc82 	uxth.w	ip, r2
  return (sysinterval_t)((systime_t)(end - start));
 8003476:	ebac 0204 	sub.w	r2, ip, r4
 800347a:	b292      	uxth	r2, r2
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800347c:	4290      	cmp	r0, r2
 800347e:	d343      	bcc.n	8003508 <VectorB0+0x118>

        delay = (sysinterval_t)0;
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
 8003480:	1a80      	subs	r0, r0, r2
  return (bool)(dlhp == dlhp->next);
 8003482:	6931      	ldr	r1, [r6, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8003484:	4541      	cmp	r1, r8
 8003486:	d045      	beq.n	8003514 <VectorB0+0x124>
      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
      if (delta < nowdelta) {
 8003488:	1813      	adds	r3, r2, r0
 800348a:	bf28      	it	cs
 800348c:	4603      	movcs	r3, r0
  while (likely(dlp->delta < delta)) {
 800348e:	688a      	ldr	r2, [r1, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	d204      	bcs.n	800349e <VectorB0+0xae>
    dlp = dlp->next;
 8003494:	6809      	ldr	r1, [r1, #0]
    delta -= dlp->delta;
 8003496:	1a9b      	subs	r3, r3, r2
  while (likely(dlp->delta < delta)) {
 8003498:	688a      	ldr	r2, [r1, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d3fa      	bcc.n	8003494 <VectorB0+0xa4>
  dlhp->delta = (sysinterval_t)-1;
 800349e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  dlp->delta      = delta;
 80034a2:	f8c9 3008 	str.w	r3, [r9, #8]
  dlp->delta -= delta;
 80034a6:	688a      	ldr	r2, [r1, #8]
  dlp->next       = dlhp;
 80034a8:	f8c9 1000 	str.w	r1, [r9]
  dlp->delta -= delta;
 80034ac:	1ad3      	subs	r3, r2, r3
  dlp->prev       = dlp->next->prev;
 80034ae:	684a      	ldr	r2, [r1, #4]
 80034b0:	f8c9 2004 	str.w	r2, [r9, #4]
  dlp->prev->next = dlp;
 80034b4:	f8c2 9000 	str.w	r9, [r2]
  dlhp->prev      = dlp;
 80034b8:	e9c1 9301 	strd	r9, r3, [r1, #4]
  dlhp->delta = (sysinterval_t)-1;
 80034bc:	61b0      	str	r0, [r6, #24]
 80034be:	e7ae      	b.n	800341e <VectorB0+0x2e>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80034c0:	45c1      	cmp	r9, r8
 80034c2:	d015      	beq.n	80034f0 <VectorB0+0x100>

  /* Calculating the delta to the next alarm time.*/
  delta = vtp->dlist.delta - nowdelta;

  /* Limit delta to CH_CFG_ST_TIMEDELTA.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80034c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  delta = vtp->dlist.delta - nowdelta;
 80034c8:	1a18      	subs	r0, r3, r0
 80034ca:	4290      	cmp	r0, r2
 80034cc:	bf28      	it	cs
 80034ce:	4610      	movcs	r0, r2
  return systime + (systime_t)interval;
 80034d0:	2802      	cmp	r0, #2
 80034d2:	bf2c      	ite	cs
 80034d4:	1809      	addcs	r1, r1, r0
 80034d6:	3102      	addcc	r1, #2
 80034d8:	b289      	uxth	r1, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80034da:	6369      	str	r1, [r5, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80034dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80034de:	eba1 010c 	sub.w	r1, r1, ip
 80034e2:	eba3 0c0c 	sub.w	ip, r3, ip
    sysinterval_t next_alarm = chTimeAddX(now, delta);

    port_timer_set_alarm(next_alarm);

#if !defined(CH_VT_RFCU_DISABLED)
    if (chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) >
 80034e6:	fa1f fc8c 	uxth.w	ip, ip
 80034ea:	b289      	uxth	r1, r1
 80034ec:	458c      	cmp	ip, r1
 80034ee:	d806      	bhi.n	80034fe <VectorB0+0x10e>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f383 8811 	msr	BASEPRI, r3
}
 80034f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80034fa:	f7fd bb99 	b.w	8000c30 <__port_irq_epilogue>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 80034fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6373      	str	r3, [r6, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
 8003506:	e7f3      	b.n	80034f0 <VectorB0+0x100>
  currcore->rfcu.mask |= mask;
 8003508:	6b73      	ldr	r3, [r6, #52]	; 0x34
        delay = (sysinterval_t)0;
 800350a:	2000      	movs	r0, #0
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6373      	str	r3, [r6, #52]	; 0x34
  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
 8003512:	e7b6      	b.n	8003482 <VectorB0+0x92>
  return systime + (systime_t)interval;
 8003514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003518:	4283      	cmp	r3, r0
 800351a:	bf28      	it	cs
 800351c:	4603      	movcs	r3, r0
 800351e:	2b02      	cmp	r3, #2
 8003520:	bf2c      	ite	cs
 8003522:	4463      	addcs	r3, ip
 8003524:	f10c 0302 	addcc.w	r3, ip, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 800352c:	2500      	movs	r5, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800352e:	2402      	movs	r4, #2
  vtlp->lasttime = now;
 8003530:	f8a6 c01c 	strh.w	ip, [r6, #28]
  dlp->prev       = dlhp;
 8003534:	f8c9 8004 	str.w	r8, [r9, #4]
  dlp->next       = dlp->prev->next;
 8003538:	6931      	ldr	r1, [r6, #16]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800353a:	b29b      	uxth	r3, r3
  dlp->delta      = delta;
 800353c:	f8c9 0008 	str.w	r0, [r9, #8]
  dlp->next       = dlp->prev->next;
 8003540:	f8c9 1000 	str.w	r1, [r9]
  dlp->next->prev = dlp;
 8003544:	f8c1 9004 	str.w	r9, [r1, #4]
  dlhp->next      = dlp;
 8003548:	f8c6 9010 	str.w	r9, [r6, #16]
 800354c:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800354e:	6115      	str	r5, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003550:	60d4      	str	r4, [r2, #12]
 8003552:	e7cd      	b.n	80034f0 <VectorB0+0x100>
 8003554:	20001628 	.word	0x20001628
	...

08003560 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003560:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003562:	2600      	movs	r6, #0
 8003564:	4f13      	ldr	r7, [pc, #76]	; (80035b4 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8003566:	4d14      	ldr	r5, [pc, #80]	; (80035b8 <__init_ram_areas+0x58>)
 8003568:	4814      	ldr	r0, [pc, #80]	; (80035bc <__init_ram_areas+0x5c>)
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <__init_ram_areas+0x60>)
 800356c:	4915      	ldr	r1, [pc, #84]	; (80035c4 <__init_ram_areas+0x64>)
 800356e:	f107 0c70 	add.w	ip, r7, #112	; 0x70
    while (p < rap->clear_area) {
 8003572:	4298      	cmp	r0, r3
 8003574:	d911      	bls.n	800359a <__init_ram_areas+0x3a>
 8003576:	461a      	mov	r2, r3
 8003578:	3904      	subs	r1, #4
      *p = *tp;
 800357a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800357e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8003582:	4290      	cmp	r0, r2
 8003584:	d8f9      	bhi.n	800357a <__init_ram_areas+0x1a>
 8003586:	1e42      	subs	r2, r0, #1
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	f022 0203 	bic.w	r2, r2, #3
 800358e:	3204      	adds	r2, #4
 8003590:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8003592:	429d      	cmp	r5, r3
 8003594:	d903      	bls.n	800359e <__init_ram_areas+0x3e>
      *p = 0;
 8003596:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800359a:	429d      	cmp	r5, r3
 800359c:	d8fb      	bhi.n	8003596 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 800359e:	4567      	cmp	r7, ip
 80035a0:	d005      	beq.n	80035ae <__init_ram_areas+0x4e>
 80035a2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 80035a6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 80035aa:	3710      	adds	r7, #16
 80035ac:	e7e1      	b.n	8003572 <__init_ram_areas+0x12>
#endif
}
 80035ae:	bcf0      	pop	{r4, r5, r6, r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	080036cc 	.word	0x080036cc
 80035b8:	200019e8 	.word	0x200019e8
 80035bc:	200019e8 	.word	0x200019e8
 80035c0:	200019e8 	.word	0x200019e8
 80035c4:	08004114 	.word	0x08004114
	...

080035d0 <__default_exit>:
  while (true) {
 80035d0:	e7fe      	b.n	80035d0 <__default_exit>
 80035d2:	bf00      	nop
	...

080035e0 <__late_init>:
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
	...

080035f0 <__cpu_init>:
}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
